
firmware.elf:     file format elf32-msp430


Disassembly of section .text:

0000c000 <__init_stack>:
    c000:	31 40 00 04 	mov	#1024,	r1	;#0x0400

0000c004 <__low_level_init>:
    c004:	15 42 20 01 	mov	&0x0120,r5	
    c008:	75 f3       	and.b	#-1,	r5	;r3 As==11
    c00a:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08

0000c00e <__do_copy_data>:
    c00e:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c012:	0f 93       	tst	r15		
    c014:	07 24       	jz	$+16     	;abs 0xc024
    c016:	82 45 20 01 	mov	r5,	&0x0120	
    c01a:	2f 83       	decd	r15		
    c01c:	9f 4f a4 ca 	mov	-13660(r15),512(r15);0xcaa4(r15), 0x0200(r15)
    c020:	00 02 
    c022:	f9 23       	jnz	$-12     	;abs 0xc016

0000c024 <__do_clear_bss>:
    c024:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c028:	0f 93       	tst	r15		
    c02a:	06 24       	jz	$+14     	;abs 0xc038
    c02c:	82 45 20 01 	mov	r5,	&0x0120	
    c030:	1f 83       	dec	r15		
    c032:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    c036:	fa 23       	jnz	$-10     	;abs 0xc02c

0000c038 <main>:
	while (i != 0);
}

int main(void)
{
	clock_init();
    c038:	b0 12 ac c2 	call	#0xc2ac	
	serial_init(9600);
    c03c:	3f 40 80 25 	mov	#9600,	r15	;#0x2580
    c040:	b0 12 fc c4 	call	#0xc4fc	

	cio_print("** ROCKETuC - libprocessing PIN test **\n\r");
    c044:	3f 40 a0 c3 	mov	#-15456,r15	;#0xc3a0
    c048:	b0 12 f0 c5 	call	#0xc5f0	

	dump_regs("initial");
    c04c:	3f 40 ca c3 	mov	#-15414,r15	;#0xc3ca
    c050:	b0 12 1c c3 	call	#0xc31c	

	// set P1.0 + P1.6 + P2.5 to output (the build in LEDs)
	processing_pin_setup(PIN_1_0, PIN_FUNCTION_OUTPUT);
    c054:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c058:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c05c:	b0 12 4c c8 	call	#0xc84c	
	processing_pin_setup(PIN_1_6, PIN_FUNCTION_OUTPUT);
    c060:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c064:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c068:	b0 12 4c c8 	call	#0xc84c	
	processing_pin_setup(PIN_2_5, PIN_FUNCTION_OUTPUT);
    c06c:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c070:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c074:	b0 12 4c c8 	call	#0xc84c	

	dump_regs("p1.0+p1.6+p2.5 output");
    c078:	3f 40 d2 c3 	mov	#-15406,r15	;#0xc3d2
    c07c:	b0 12 1c c3 	call	#0xc31c	

	// set P1.0 + P1.6i + P2.5 to HIGH
	processing_pin_set(PIN_1_0);
    c080:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c084:	b0 12 32 c9 	call	#0xc932	
	processing_pin_set(PIN_1_6);
    c088:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c08c:	b0 12 32 c9 	call	#0xc932	
	processing_pin_set(PIN_2_5);
    c090:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c094:	b0 12 32 c9 	call	#0xc932	

	dump_regs("p1.0+p1.6+p2.5 set");
    c098:	3f 40 e8 c3 	mov	#-15384,r15	;#0xc3e8
    c09c:	b0 12 1c c3 	call	#0xc31c	

	// read P1.0 + P1.6 + p2.5 states
	cio_printf("P1.0 is %x\n\r", processing_pin_digital_read(PIN_1_0));	
    c0a0:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c0a4:	b0 12 92 c9 	call	#0xc992	
    c0a8:	4f 4f       	mov.b	r15,	r15	
    c0aa:	0f 12       	push	r15		
    c0ac:	30 12 fb c3 	push	#-15365	;#0xc3fb
    c0b0:	b0 12 d6 c6 	call	#0xc6d6	
    c0b4:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", processing_pin_digital_read(PIN_1_6));	
    c0b6:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c0ba:	b0 12 92 c9 	call	#0xc992	
    c0be:	4f 4f       	mov.b	r15,	r15	
    c0c0:	0f 12       	push	r15		
    c0c2:	30 12 08 c4 	push	#-15352	;#0xc408
    c0c6:	b0 12 d6 c6 	call	#0xc6d6	
    c0ca:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", processing_pin_digital_read(PIN_2_5));	
    c0cc:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c0d0:	b0 12 92 c9 	call	#0xc992	
    c0d4:	4f 4f       	mov.b	r15,	r15	
    c0d6:	0f 12       	push	r15		
    c0d8:	30 12 15 c4 	push	#-15339	;#0xc415
    c0dc:	b0 12 d6 c6 	call	#0xc6d6	
    c0e0:	21 52       	add	#4,	r1	;r2 As==10
	
	// clear P1.0 + p1.6 + p2.5 to LOW 
	processing_pin_clear(PIN_1_0);
    c0e2:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c0e6:	b0 12 02 c9 	call	#0xc902	
	processing_pin_clear(PIN_1_6);
    c0ea:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c0ee:	b0 12 02 c9 	call	#0xc902	
	processing_pin_clear(PIN_2_5);
    c0f2:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c0f6:	b0 12 02 c9 	call	#0xc902	

	dump_regs("p1.0+p1.6+p2.5 clear");
    c0fa:	3f 40 22 c4 	mov	#-15326,r15	;#0xc422
    c0fe:	b0 12 1c c3 	call	#0xc31c	

	// read P1.0 + P1.6 + 2.5 states
	cio_printf("P1.0 is %x\n\r", processing_pin_digital_read(PIN_1_0));	
    c102:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c106:	b0 12 92 c9 	call	#0xc992	
    c10a:	4f 4f       	mov.b	r15,	r15	
    c10c:	0f 12       	push	r15		
    c10e:	30 12 fb c3 	push	#-15365	;#0xc3fb
    c112:	b0 12 d6 c6 	call	#0xc6d6	
    c116:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", processing_pin_digital_read(PIN_1_6));	
    c118:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c11c:	b0 12 92 c9 	call	#0xc992	
    c120:	4f 4f       	mov.b	r15,	r15	
    c122:	0f 12       	push	r15		
    c124:	30 12 08 c4 	push	#-15352	;#0xc408
    c128:	b0 12 d6 c6 	call	#0xc6d6	
    c12c:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", processing_pin_digital_read(PIN_2_5));	
    c12e:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c132:	b0 12 92 c9 	call	#0xc992	
    c136:	4f 4f       	mov.b	r15,	r15	
    c138:	0f 12       	push	r15		
    c13a:	30 12 15 c4 	push	#-15339	;#0xc415
    c13e:	b0 12 d6 c6 	call	#0xc6d6	
    c142:	21 52       	add	#4,	r1	;r2 As==10

	// toggle P1.0 + P1.6 + P2.5
	processing_pin_toggle(PIN_1_0);
    c144:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c148:	b0 12 62 c9 	call	#0xc962	
	processing_pin_toggle(PIN_1_6);
    c14c:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c150:	b0 12 62 c9 	call	#0xc962	
	processing_pin_toggle(PIN_2_5);
    c154:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c158:	b0 12 62 c9 	call	#0xc962	

	dump_regs("p1.0+p1.6+p2.5 toggle");
    c15c:	3f 40 37 c4 	mov	#-15305,r15	;#0xc437
    c160:	b0 12 1c c3 	call	#0xc31c	

	// read P1.0 + P1.6 states
	cio_printf("P1.0 is %x\n\r", processing_pin_digital_read(PIN_1_0));	
    c164:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c168:	b0 12 92 c9 	call	#0xc992	
    c16c:	4f 4f       	mov.b	r15,	r15	
    c16e:	0f 12       	push	r15		
    c170:	30 12 fb c3 	push	#-15365	;#0xc3fb
    c174:	b0 12 d6 c6 	call	#0xc6d6	
    c178:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", processing_pin_digital_read(PIN_1_6));	
    c17a:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c17e:	b0 12 92 c9 	call	#0xc992	
    c182:	4f 4f       	mov.b	r15,	r15	
    c184:	0f 12       	push	r15		
    c186:	30 12 08 c4 	push	#-15352	;#0xc408
    c18a:	b0 12 d6 c6 	call	#0xc6d6	
    c18e:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", processing_pin_digital_read(PIN_2_5));	
    c190:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c194:	b0 12 92 c9 	call	#0xc992	
    c198:	4f 4f       	mov.b	r15,	r15	
    c19a:	0f 12       	push	r15		
    c19c:	30 12 15 c4 	push	#-15339	;#0xc415
    c1a0:	b0 12 d6 c6 	call	#0xc6d6	
    c1a4:	21 52       	add	#4,	r1	;r2 As==10

	// set P1.3 to input float
	processing_pin_setup(PIN_1_3, PIN_FUNCTION_INPUT_FLOAT);
    c1a6:	4e 43       	clr.b	r14		
    c1a8:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c1ac:	b0 12 4c c8 	call	#0xc84c	

	dump_regs("p1.3 input float");
    c1b0:	3f 40 4d c4 	mov	#-15283,r15	;#0xc44d
    c1b4:	b0 12 1c c3 	call	#0xc31c	

	cio_print("Press button on P1.3 to continue ...");
    c1b8:	3f 40 5e c4 	mov	#-15266,r15	;#0xc45e
    c1bc:	b0 12 f0 c5 	call	#0xc5f0	
    c1c0:	01 3c       	jmp	$+4      	;abs 0xc1c4

	while(processing_pin_digital_read(PIN_1_3)) __asm__("nop");
    c1c2:	03 43       	nop			
    c1c4:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c1c8:	b0 12 92 c9 	call	#0xc992	
    c1cc:	4f 93       	tst.b	r15		
    c1ce:	f9 23       	jnz	$-12     	;abs 0xc1c2

	cio_print(" OK\n\r");
    c1d0:	3f 40 83 c4 	mov	#-15229,r15	;#0xc483
    c1d4:	b0 12 f0 c5 	call	#0xc5f0	
	
	// set P2.3 to input pull-down 
	processing_pin_setup(PIN_2_3, PIN_FUNCTION_INPUT_PULLDOWN);
    c1d8:	6e 43       	mov.b	#2,	r14	;r3 As==10
    c1da:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c1de:	b0 12 4c c8 	call	#0xc84c	

	dump_regs("p2.3 input pull-down");
    c1e2:	3f 40 89 c4 	mov	#-15223,r15	;#0xc489
    c1e6:	b0 12 1c c3 	call	#0xc31c	

	cio_print("Press button on P2.3 to continue ...");
    c1ea:	3f 40 9e c4 	mov	#-15202,r15	;#0xc49e
    c1ee:	b0 12 f0 c5 	call	#0xc5f0	
    c1f2:	01 3c       	jmp	$+4      	;abs 0xc1f6

	while(!processing_pin_digital_read(PIN_2_3)) __asm__("nop");
    c1f4:	03 43       	nop			
    c1f6:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c1fa:	b0 12 92 c9 	call	#0xc992	
    c1fe:	4f 93       	tst.b	r15		
    c200:	f9 27       	jz	$-12     	;abs 0xc1f4

	cio_print(" OK\n\r");
    c202:	3f 40 83 c4 	mov	#-15229,r15	;#0xc483
    c206:	b0 12 f0 c5 	call	#0xc5f0	
	
	// set P2.4 to input pull-down 
	processing_pin_setup(PIN_2_4, PIN_FUNCTION_INPUT_PULLUP);
    c20a:	5e 43       	mov.b	#1,	r14	;r3 As==01
    c20c:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c210:	b0 12 4c c8 	call	#0xc84c	

	dump_regs("p2.4 input pull-up");
    c214:	3f 40 c3 c4 	mov	#-15165,r15	;#0xc4c3
    c218:	b0 12 1c c3 	call	#0xc31c	

	cio_print("Press button on P2.4 to continue ...");
    c21c:	3f 40 d6 c4 	mov	#-15146,r15	;#0xc4d6
    c220:	b0 12 f0 c5 	call	#0xc5f0	
    c224:	01 3c       	jmp	$+4      	;abs 0xc228

	while(processing_pin_digital_read(PIN_2_4)) __asm__("nop");
    c226:	03 43       	nop			
    c228:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c22c:	b0 12 92 c9 	call	#0xc992	
    c230:	4f 93       	tst.b	r15		
    c232:	f9 23       	jnz	$-12     	;abs 0xc226

	cio_print(" OK\n\r");
    c234:	3f 40 83 c4 	mov	#-15229,r15	;#0xc483
    c238:	b0 12 f0 c5 	call	#0xc5f0	
	
	processing_pin_set(PIN_1_0);
    c23c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c240:	b0 12 32 c9 	call	#0xc932	
	processing_pin_clear(PIN_1_6);
    c244:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c248:	b0 12 02 c9 	call	#0xc902	
	processing_pin_clear(PIN_2_5);
    c24c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c250:	b0 12 02 c9 	call	#0xc902	

	int i = 0;
    c254:	0b 43       	clr	r11		

	while (1) {
		delay();
    c256:	b0 12 7a c3 	call	#0xc37a	

		processing_pin_toggle(PIN_1_0);
    c25a:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c25e:	b0 12 62 c9 	call	#0xc962	
		processing_pin_toggle(PIN_1_6);
    c262:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c266:	b0 12 62 c9 	call	#0xc962	

		if(i++ % 2 == 0) {
    c26a:	0f 4b       	mov	r11,	r15	
    c26c:	1f f3       	and	#1,	r15	;r3 As==01
    c26e:	1b 53       	inc	r11		
    c270:	0f 93       	tst	r15		
    c272:	04 20       	jnz	$+10     	;abs 0xc27c
			processing_pin_toggle(PIN_2_5);
    c274:	7f 50 25 00 	add.b	#37,	r15	;#0x0025
    c278:	b0 12 62 c9 	call	#0xc962	
		}

		if(!processing_pin_digital_read(PIN_1_3)) {
    c27c:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c280:	b0 12 92 c9 	call	#0xc992	
    c284:	4f 93       	tst.b	r15		
    c286:	e7 23       	jnz	$-48     	;abs 0xc256
			processing_pin_toggle(PIN_1_6);
    c288:	7f 50 16 00 	add.b	#22,	r15	;#0x0016
    c28c:	b0 12 62 c9 	call	#0xc962	
    c290:	01 3c       	jmp	$+4      	;abs 0xc294
			while(!processing_pin_digital_read(PIN_1_3)) __asm__("nop");
    c292:	03 43       	nop			
    c294:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c298:	b0 12 92 c9 	call	#0xc992	
    c29c:	4f 93       	tst.b	r15		
    c29e:	f9 27       	jz	$-12     	;abs 0xc292
    c2a0:	da 3f       	jmp	$-74     	;abs 0xc256

0000c2a2 <__stop_progExec__>:
    c2a2:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c2a6:	fd 3f       	jmp	$-4      	;abs 0xc2a2

0000c2a8 <__ctors_end>:
    c2a8:	30 40 a2 ca 	br	#0xcaa2	

0000c2ac <clock_init>:

#include "pin.h"

void clock_init(void)
{
	WDTCTL = WDTPW + WDTHOLD;
    c2ac:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c2b0:	20 01 
    BCSCTL1 = CALBC1_1MHZ;
    c2b2:	d2 42 ff 10 	mov.b	&0x10ff,&0x0057	
    c2b6:	57 00 
    DCOCTL  = CALDCO_1MHZ;
    c2b8:	d2 42 fe 10 	mov.b	&0x10fe,&0x0056	
    c2bc:	56 00 
}
    c2be:	30 41       	ret			
    c2c0:	52 45 47 44 	mov.b	17479(r5),r2	;0x4447(r5)
    c2c4:	55 4d 50 28 	mov.b	10320(r13),r5	;0x2850(r13)
    c2c8:	25 73       	subc	#2,	r5	;r3 As==10
    c2ca:	29 3a       	jl	$-940    	;abs 0xbf1e
    c2cc:	20 50       	add	@r0,	r0	
    c2ce:	31 44       	mov	@r4+,	r1	
    c2d0:	49 52       	add.b	r2,	r9	
    c2d2:	3d 25       	jz	$+636    	;abs 0xc54e
    c2d4:	78 3b       	jl	$-270    	;abs 0xc1c6
    c2d6:	20 50       	add	@r0,	r0	
    c2d8:	32 44       	mov	@r4+,	r2	
    c2da:	49 52       	add.b	r2,	r9	
    c2dc:	3d 25       	jz	$+636    	;abs 0xc558
    c2de:	78 3b       	jl	$-270    	;abs 0xc1d0
    c2e0:	20 50       	add	@r0,	r0	
    c2e2:	31 4f       	mov	@r15+,	r1	
    c2e4:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c2e8:	78 3b       	jl	$-270    	;abs 0xc1da
    c2ea:	20 50       	add	@r0,	r0	
    c2ec:	32 4f       	mov	@r15+,	r2	
    c2ee:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c2f2:	78 3b       	jl	$-270    	;abs 0xc1e4
    c2f4:	20 50       	add	@r0,	r0	
    c2f6:	31 52       	add	#8,	r1	;r2 As==11
    c2f8:	45 4e       	mov.b	r14,	r5	
    c2fa:	3d 25       	jz	$+636    	;abs 0xc576
    c2fc:	78 3b       	jl	$-270    	;abs 0xc1ee
    c2fe:	20 50       	add	@r0,	r0	
    c300:	32 52       	add	#8,	r2	;r2 As==11
    c302:	45 4e       	mov.b	r14,	r5	
    c304:	3d 25       	jz	$+636    	;abs 0xc580
    c306:	78 3b       	jl	$-270    	;abs 0xc1f8
    c308:	20 50       	add	@r0,	r0	
    c30a:	31 49       	mov	@r9+,	r1	
    c30c:	4e 3d       	jmp	$+670    	;abs 0xc5aa
    c30e:	25 78       	subc	@r8,	r5	
    c310:	2c 20       	jnz	$+90     	;abs 0xc36a
    c312:	50 32       	jn	$-862    	;abs 0xbfb4
    c314:	49 4e       	mov.b	r14,	r9	
    c316:	3d 25       	jz	$+636    	;abs 0xc592
    c318:	78 0a       	.word	0x0a78;	????	
    c31a:	0d 00       	.word	0x000d;	????	

0000c31c <dump_regs>:

void dump_regs(const char *msg) 
{
    c31c:	0b 12       	push	r11		
    c31e:	0a 12       	push	r10		
    c320:	09 12       	push	r9		
    c322:	08 12       	push	r8		

	cio_printf("REGDUMP(%s): P1DIR=%x; P2DIR=%x; P1OUT=%x; P2OUT=%x; P1REN=%x; P2REN=%x; P1IN=%x, P2IN=%x\n\r",
    c324:	58 42 28 00 	mov.b	&0x0028,r8	
    c328:	59 42 20 00 	mov.b	&0x0020,r9	
    c32c:	5a 42 2f 00 	mov.b	&0x002f,r10	
    c330:	5b 42 27 00 	mov.b	&0x0027,r11	
    c334:	5c 42 29 00 	mov.b	&0x0029,r12	
    c338:	5d 42 21 00 	mov.b	&0x0021,r13	
    c33c:	5e 42 2a 00 	mov.b	&0x002a,r14	
    c340:	48 48       	mov.b	r8,	r8	
    c342:	08 12       	push	r8		
    c344:	49 49       	mov.b	r9,	r9	
    c346:	09 12       	push	r9		
    c348:	4a 4a       	mov.b	r10,	r10	
    c34a:	0a 12       	push	r10		
    c34c:	4b 4b       	mov.b	r11,	r11	
    c34e:	0b 12       	push	r11		
    c350:	4c 4c       	mov.b	r12,	r12	
    c352:	0c 12       	push	r12		
    c354:	4d 4d       	mov.b	r13,	r13	
    c356:	0d 12       	push	r13		
    c358:	4e 4e       	mov.b	r14,	r14	
    c35a:	0e 12       	push	r14		
    c35c:	5e 42 22 00 	mov.b	&0x0022,r14	
    c360:	0e 12       	push	r14		
    c362:	0f 12       	push	r15		
    c364:	30 12 c0 c2 	push	#-15680	;#0xc2c0
    c368:	b0 12 d6 c6 	call	#0xc6d6	
    c36c:	31 50 14 00 	add	#20,	r1	;#0x0014
				msg,
				P1DIR, P2DIR, P1OUT, P2OUT, P1REN, P2REN, P1IN, P2IN);
}
    c370:	38 41       	pop	r8		
    c372:	39 41       	pop	r9		
    c374:	3a 41       	pop	r10		
    c376:	3b 41       	pop	r11		
    c378:	30 41       	ret			

0000c37a <delay>:

void delay() 
{
    c37a:	21 82       	sub	#4,	r1	;r2 As==10
	volatile unsigned long i = 59999;
    c37c:	b1 40 5f ea 	mov	#-5537,	0(r1)	;#0xea5f, 0x0000(r1)
    c380:	00 00 
    c382:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)

	do (i--);
    c386:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    c38a:	b1 63 02 00 	addc	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
	while (i != 0);
    c38e:	2e 41       	mov	@r1,	r14	
    c390:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    c394:	0e 93       	tst	r14		
    c396:	f7 23       	jnz	$-16     	;abs 0xc386
    c398:	0f 93       	tst	r15		
    c39a:	f5 23       	jnz	$-20     	;abs 0xc386
}
    c39c:	21 52       	add	#4,	r1	;r2 As==10
    c39e:	30 41       	ret			
    c3a0:	2a 2a       	jnc	$-938    	;abs 0xbff6
    c3a2:	20 52       	add	#4,	r0	;r2 As==10
    c3a4:	4f 43       	clr.b	r15		
    c3a6:	4b 45       	mov.b	r5,	r11	
    c3a8:	54 75 43 20 	subc.b	8259(r5),r4	;0x2043(r5)
    c3ac:	2d 20       	jnz	$+92     	;abs 0xc408
    c3ae:	6c 69       	addc.b	@r9,	r12	
    c3b0:	62 70       	subc.b	@r0,	r2	
    c3b2:	72 6f       	addc.b	@r15+,	r2	
    c3b4:	63 65       	.word	0x6563;	????	Illegal as 2-op instr
    c3b6:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    c3b8:	69 6e       	addc.b	@r14,	r9	
    c3ba:	67 20       	jnz	$+208    	;abs 0xc48a
    c3bc:	50 49 4e 20 	br	8270(r9)	;0x204e(r9)
    c3c0:	74 65       	addc.b	@r5+,	r4	
    c3c2:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    c3c4:	20 2a       	jnc	$-958    	;abs 0xc006
    c3c6:	2a 0a       	.word	0x0a2a;	????	
    c3c8:	0d 00       	.word	0x000d;	????	
    c3ca:	69 6e       	addc.b	@r14,	r9	
    c3cc:	69 74       	subc.b	@r4,	r9	
    c3ce:	69 61       	addc.b	@r1,	r9	
    c3d0:	6c 00       	.word	0x006c;	????	
    c3d2:	70 31       	jn	$+738    	;abs 0xc6b4
    c3d4:	2e 30       	jn	$+94     	;abs 0xc432
    c3d6:	2b 70       	subc	@r0,	r11	
    c3d8:	31 2e       	jc	$-924    	;abs 0xc03c
    c3da:	36 2b       	jnc	$-402    	;abs 0xc248
    c3dc:	70 32       	jn	$-798    	;abs 0xc0be
    c3de:	2e 35       	jge	$+606    	;abs 0xc63c
    c3e0:	20 6f       	addc	@r15,	r0	
    c3e2:	75 74       	subc.b	@r4+,	r5	
    c3e4:	70 75       	subc.b	@r5+,	r0	
    c3e6:	74 00       	.word	0x0074;	????	
    c3e8:	70 31       	jn	$+738    	;abs 0xc6ca
    c3ea:	2e 30       	jn	$+94     	;abs 0xc448
    c3ec:	2b 70       	subc	@r0,	r11	
    c3ee:	31 2e       	jc	$-924    	;abs 0xc052
    c3f0:	36 2b       	jnc	$-402    	;abs 0xc25e
    c3f2:	70 32       	jn	$-798    	;abs 0xc0d4
    c3f4:	2e 35       	jge	$+606    	;abs 0xc652
    c3f6:	20 73       	subc	#2,	r0	;r3 As==10
    c3f8:	65 74       	subc.b	@r4,	r5	
    c3fa:	00 50       	rla	r0		
    c3fc:	31 2e       	jc	$-924    	;abs 0xc060
    c3fe:	30 20       	jnz	$+98     	;abs 0xc460
    c400:	69 73       	subc.b	#2,	r9	;r3 As==10
    c402:	20 25       	jz	$+578    	;abs 0xc644
    c404:	78 0a       	.word	0x0a78;	????	
    c406:	0d 00       	.word	0x000d;	????	
    c408:	50 31       	jn	$+674    	;abs 0xc6aa
    c40a:	2e 36       	jge	$-930    	;abs 0xc068
    c40c:	20 69       	addc	@r9,	r0	
    c40e:	73 20       	jnz	$+232    	;abs 0xc4f6
    c410:	25 78       	subc	@r8,	r5	
    c412:	0a 0d       	.word	0x0d0a;	????	
    c414:	00 50       	rla	r0		
    c416:	32 2e       	jc	$-922    	;abs 0xc07c
    c418:	35 20       	jnz	$+108    	;abs 0xc484
    c41a:	69 73       	subc.b	#2,	r9	;r3 As==10
    c41c:	20 25       	jz	$+578    	;abs 0xc65e
    c41e:	78 0a       	.word	0x0a78;	????	
    c420:	0d 00       	.word	0x000d;	????	
    c422:	70 31       	jn	$+738    	;abs 0xc704
    c424:	2e 30       	jn	$+94     	;abs 0xc482
    c426:	2b 70       	subc	@r0,	r11	
    c428:	31 2e       	jc	$-924    	;abs 0xc08c
    c42a:	36 2b       	jnc	$-402    	;abs 0xc298
    c42c:	70 32       	jn	$-798    	;abs 0xc10e
    c42e:	2e 35       	jge	$+606    	;abs 0xc68c
    c430:	20 63       	addc	#2,	r0	;r3 As==10
    c432:	6c 65       	addc.b	@r5,	r12	
    c434:	61 72       	subc.b	#4,	r1	;r2 As==10
    c436:	00 70       	subc	r0,	r0	
    c438:	31 2e       	jc	$-924    	;abs 0xc09c
    c43a:	30 2b       	jnc	$-414    	;abs 0xc29c
    c43c:	70 31       	jn	$+738    	;abs 0xc71e
    c43e:	2e 36       	jge	$-930    	;abs 0xc09c
    c440:	2b 70       	subc	@r0,	r11	
    c442:	32 2e       	jc	$-922    	;abs 0xc0a8
    c444:	35 20       	jnz	$+108    	;abs 0xc4b0
    c446:	74 6f       	addc.b	@r15+,	r4	
    c448:	67 67       	addc.b	@r7,	r7	
    c44a:	6c 65       	addc.b	@r5,	r12	
    c44c:	00 70       	subc	r0,	r0	
    c44e:	31 2e       	jc	$-924    	;abs 0xc0b2
    c450:	33 20       	jnz	$+104    	;abs 0xc4b8
    c452:	69 6e       	addc.b	@r14,	r9	
    c454:	70 75       	subc.b	@r5+,	r0	
    c456:	74 20       	jnz	$+234    	;abs 0xc540
    c458:	66 6c       	addc.b	@r12,	r6	
    c45a:	6f 61       	addc.b	@r1,	r15	
    c45c:	74 00       	.word	0x0074;	????	
    c45e:	50 72 65 73 	subc.b	&0x7365,r0	
    c462:	73 20       	jnz	$+232    	;abs 0xc54a
    c464:	62 75       	subc.b	@r5,	r2	
    c466:	74 74       	subc.b	@r4+,	r4	
    c468:	6f 6e       	addc.b	@r14,	r15	
    c46a:	20 6f       	addc	@r15,	r0	
    c46c:	6e 20       	jnz	$+222    	;abs 0xc54a
    c46e:	50 31       	jn	$+674    	;abs 0xc710
    c470:	2e 33       	jn	$-418    	;abs 0xc2ce
    c472:	20 74       	subc	@r4,	r0	
    c474:	6f 20       	jnz	$+224    	;abs 0xc554
    c476:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c478:	6e 74       	subc.b	@r4,	r14	
    c47a:	69 6e       	addc.b	@r14,	r9	
    c47c:	75 65       	addc.b	@r5+,	r5	
    c47e:	20 2e       	jc	$-958    	;abs 0xc0c0
    c480:	2e 2e       	jc	$-930    	;abs 0xc0de
    c482:	00 20       	jnz	$+2      	;abs 0xc484
    c484:	4f 4b       	mov.b	r11,	r15	
    c486:	0a 0d       	.word	0x0d0a;	????	
    c488:	00 70       	subc	r0,	r0	
    c48a:	32 2e       	jc	$-922    	;abs 0xc0f0
    c48c:	33 20       	jnz	$+104    	;abs 0xc4f4
    c48e:	69 6e       	addc.b	@r14,	r9	
    c490:	70 75       	subc.b	@r5+,	r0	
    c492:	74 20       	jnz	$+234    	;abs 0xc57c
    c494:	70 75       	subc.b	@r5+,	r0	
    c496:	6c 6c       	addc.b	@r12,	r12	
    c498:	2d 64       	addc	@r4,	r13	
    c49a:	6f 77       	subc.b	@r7,	r15	
    c49c:	6e 00       	.word	0x006e;	????	
    c49e:	50 72 65 73 	subc.b	&0x7365,r0	
    c4a2:	73 20       	jnz	$+232    	;abs 0xc58a
    c4a4:	62 75       	subc.b	@r5,	r2	
    c4a6:	74 74       	subc.b	@r4+,	r4	
    c4a8:	6f 6e       	addc.b	@r14,	r15	
    c4aa:	20 6f       	addc	@r15,	r0	
    c4ac:	6e 20       	jnz	$+222    	;abs 0xc58a
    c4ae:	50 32       	jn	$-862    	;abs 0xc150
    c4b0:	2e 33       	jn	$-418    	;abs 0xc30e
    c4b2:	20 74       	subc	@r4,	r0	
    c4b4:	6f 20       	jnz	$+224    	;abs 0xc594
    c4b6:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c4b8:	6e 74       	subc.b	@r4,	r14	
    c4ba:	69 6e       	addc.b	@r14,	r9	
    c4bc:	75 65       	addc.b	@r5+,	r5	
    c4be:	20 2e       	jc	$-958    	;abs 0xc100
    c4c0:	2e 2e       	jc	$-930    	;abs 0xc11e
    c4c2:	00 70       	subc	r0,	r0	
    c4c4:	32 2e       	jc	$-922    	;abs 0xc12a
    c4c6:	34 20       	jnz	$+106    	;abs 0xc530
    c4c8:	69 6e       	addc.b	@r14,	r9	
    c4ca:	70 75       	subc.b	@r5+,	r0	
    c4cc:	74 20       	jnz	$+234    	;abs 0xc5b6
    c4ce:	70 75       	subc.b	@r5+,	r0	
    c4d0:	6c 6c       	addc.b	@r12,	r12	
    c4d2:	2d 75       	subc	@r5,	r13	
    c4d4:	70 00       	.word	0x0070;	????	
    c4d6:	50 72 65 73 	subc.b	&0x7365,r0	
    c4da:	73 20       	jnz	$+232    	;abs 0xc5c2
    c4dc:	62 75       	subc.b	@r5,	r2	
    c4de:	74 74       	subc.b	@r4+,	r4	
    c4e0:	6f 6e       	addc.b	@r14,	r15	
    c4e2:	20 6f       	addc	@r15,	r0	
    c4e4:	6e 20       	jnz	$+222    	;abs 0xc5c2
    c4e6:	50 32       	jn	$-862    	;abs 0xc188
    c4e8:	2e 34       	jge	$+94     	;abs 0xc546
    c4ea:	20 74       	subc	@r4,	r0	
    c4ec:	6f 20       	jnz	$+224    	;abs 0xc5cc
    c4ee:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c4f0:	6e 74       	subc.b	@r4,	r14	
    c4f2:	69 6e       	addc.b	@r14,	r9	
    c4f4:	75 65       	addc.b	@r5+,	r5	
    c4f6:	20 2e       	jc	$-958    	;abs 0xc138
    c4f8:	2e 2e       	jc	$-930    	;abs 0xc156
	...

0000c4fc <serial_init>:
 * TXD pin
 */
#define UART_TXD   		BIT2	

void serial_init(unsigned int baudrate)
{
    c4fc:	0b 12       	push	r11		
    c4fe:	0a 12       	push	r10		
    c500:	09 12       	push	r9		
    c502:	08 12       	push	r8		
    c504:	07 12       	push	r7		
	P1SEL    |= UART_RXD + UART_TXD;                       
    c506:	f2 d0 06 00 	bis.b	#6,	&0x0026	;#0x0006
    c50a:	26 00 
  	P1SEL2   |= UART_RXD + UART_TXD;                       
    c50c:	f2 d0 06 00 	bis.b	#6,	&0x0041	;#0x0006
    c510:	41 00 
  	UCA0CTL1 |= UCSSEL_2;                   // SMCLK
    c512:	f2 d0 80 ff 	bis.b	#-128,	&0x0061	;#0xff80
    c516:	61 00 

	unsigned char br = (unsigned char)(1000000 / (long)baudrate);
    c518:	07 43       	clr	r7		
    c51a:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    c51e:	3d 40 0f 00 	mov	#15,	r13	;#0x000f
    c522:	0a 4f       	mov	r15,	r10	
    c524:	0b 47       	mov	r7,	r11	
    c526:	b0 12 12 ca 	call	#0xca12	

  	UCA0BR0  = br;                          // 1MHz / baudrate 
    c52a:	c2 4c 62 00 	mov.b	r12,	&0x0062	
  	UCA0BR1  = 0;                           // 
    c52e:	c2 47 63 00 	mov.b	r7,	&0x0063	
  	UCA0MCTL = UCBRS0;                      // Modulation UCBRSx = 1
    c532:	e2 43 64 00 	mov.b	#2,	&0x0064	;r3 As==10
  	UCA0CTL1 &= ~UCSWRST;                   // Initialize USCI state machine
    c536:	f2 f0 fe ff 	and.b	#-2,	&0x0061	;#0xfffe
    c53a:	61 00 
}
    c53c:	37 41       	pop	r7		
    c53e:	38 41       	pop	r8		
    c540:	39 41       	pop	r9		
    c542:	3a 41       	pop	r10		
    c544:	3b 41       	pop	r11		
    c546:	30 41       	ret			

0000c548 <serial_send>:

void serial_send(unsigned char data)
{
  	UCA0TXBUF = data;                 		
    c548:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c54c:	30 41       	ret			

0000c54e <serial_send_blocking>:

void serial_send_blocking(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG));              // USCI_A0 TX buffer ready?
    c54e:	5e 42 03 00 	mov.b	&0x0003,r14	
    c552:	2e f3       	and	#2,	r14	;r3 As==10
    c554:	fc 27       	jz	$-6      	;abs 0xc54e
  	UCA0TXBUF = data;                  
    c556:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c55a:	30 41       	ret			

0000c55c <serial_recv>:

unsigned char serial_recv()
{
	return UCA0RXBUF;
}
    c55c:	5f 42 66 00 	mov.b	&0x0066,r15	
    c560:	30 41       	ret			

0000c562 <serial_recv_blocking>:

unsigned char serial_recv_blocking()
{
    while (!(IFG2&UCA0RXIFG));         		// USCI_A0 RX buffer ready?
    c562:	5f 42 03 00 	mov.b	&0x0003,r15	
    c566:	1f f3       	and	#1,	r15	;r3 As==01
    c568:	fc 27       	jz	$-6      	;abs 0xc562
	return UCA0RXBUF;
}
    c56a:	5f 42 66 00 	mov.b	&0x0066,r15	
    c56e:	30 41       	ret			

0000c570 <_xtoa>:
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
}

static void _xtoa(unsigned long x, const unsigned long *dp)
{
    c570:	0b 12       	push	r11		
    c572:	0a 12       	push	r10		
    c574:	09 12       	push	r9		
    c576:	08 12       	push	r8		
    c578:	07 12       	push	r7		
    c57a:	0a 4e       	mov	r14,	r10	
    c57c:	0b 4f       	mov	r15,	r11	
    c57e:	07 4d       	mov	r13,	r7	
     char c;
     unsigned long d;

     if(x) {
    c580:	0e 93       	tst	r14		
    c582:	04 20       	jnz	$+10     	;abs 0xc58c
    c584:	0b 93       	tst	r11		
    c586:	02 20       	jnz	$+6      	;abs 0xc58c
    c588:	22 3c       	jmp	$+70     	;abs 0xc5ce
          while(x < *dp) ++dp;
    c58a:	27 52       	add	#4,	r7	;r2 As==10
    c58c:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c590:	fc 2b       	jnc	$-6      	;abs 0xc58a
    c592:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c596:	02 20       	jnz	$+6      	;abs 0xc59c
    c598:	2a 97       	cmp	@r7,	r10	
    c59a:	f7 2b       	jnc	$-16     	;abs 0xc58a
          do {
               d = *dp++;
    c59c:	28 47       	mov	@r7,	r8	
    c59e:	19 47 02 00 	mov	2(r7),	r9	;0x0002(r7)
    c5a2:	27 52       	add	#4,	r7	;r2 As==10
               c = '0';
    c5a4:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c5a8:	03 3c       	jmp	$+8      	;abs 0xc5b0
               while(x >= d) ++c, x -= d;
    c5aa:	5f 53       	inc.b	r15		
    c5ac:	0a 88       	sub	r8,	r10	
    c5ae:	0b 79       	subc	r9,	r11	
    c5b0:	0b 99       	cmp	r9,	r11	
    c5b2:	04 28       	jnc	$+10     	;abs 0xc5bc
    c5b4:	09 9b       	cmp	r11,	r9	
    c5b6:	f9 2b       	jnc	$-12     	;abs 0xc5aa
    c5b8:	0a 98       	cmp	r8,	r10	
    c5ba:	f7 2f       	jc	$-16     	;abs 0xc5aa
               cio_printc(c);
    c5bc:	b0 12 40 c8 	call	#0xc840	
          } while(!(d & 1));
    c5c0:	18 f3       	and	#1,	r8	;r3 As==01
    c5c2:	09 f3       	and	#0,	r9	;r3 As==00
    c5c4:	08 93       	tst	r8		
    c5c6:	07 20       	jnz	$+16     	;abs 0xc5d6
    c5c8:	09 93       	tst	r9		
    c5ca:	05 20       	jnz	$+12     	;abs 0xc5d6
    c5cc:	e7 3f       	jmp	$-48     	;abs 0xc59c
     } else
          cio_printc('0');
    c5ce:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c5d2:	b0 12 40 c8 	call	#0xc840	
}
    c5d6:	37 41       	pop	r7		
    c5d8:	38 41       	pop	r8		
    c5da:	39 41       	pop	r9		
    c5dc:	3a 41       	pop	r10		
    c5de:	3b 41       	pop	r11		
    c5e0:	30 41       	ret			

0000c5e2 <_puth>:
};

static void _puth(unsigned int n)
{
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
    c5e2:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c5e6:	5f 4f 30 c8 	mov.b	-14288(r15),r15	;0xc830(r15)
    c5ea:	b0 12 40 c8 	call	#0xc840	
}
    c5ee:	30 41       	ret			

0000c5f0 <cio_print>:
#include <stdarg.h>

#include "conio.h"

void cio_print(char *line)
{
    c5f0:	0b 12       	push	r11		
    c5f2:	0b 4f       	mov	r15,	r11	
    c5f4:	02 3c       	jmp	$+6      	;abs 0xc5fa
     int   i = 0;

     while(line[i] != 0) {
          cio_printc(line[i++]);
    c5f6:	b0 12 40 c8 	call	#0xc840	

void cio_print(char *line)
{
     int   i = 0;

     while(line[i] != 0) {
    c5fa:	6f 4b       	mov.b	@r11,	r15	
    c5fc:	1b 53       	inc	r11		
    c5fe:	4f 93       	tst.b	r15		
    c600:	fa 23       	jnz	$-10     	;abs 0xc5f6
          cio_printc(line[i++]);
     }
}
    c602:	3b 41       	pop	r11		
    c604:	30 41       	ret			

0000c606 <cio_printi>:

void cio_printi(int n)
{
    c606:	0b 12       	push	r11		
    c608:	0a 12       	push	r10		
    c60a:	09 12       	push	r9		
    c60c:	08 12       	push	r8		
    c60e:	07 12       	push	r7		
    c610:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
    c614:	0f 93       	tst	r15		
    c616:	07 24       	jz	$+16     	;abs 0xc626
    c618:	08 41       	mov	r1,	r8	
    c61a:	38 50 1e 00 	add	#30,	r8	;#0x001e
    c61e:	39 40 0f 00 	mov	#15,	r9	;#0x000f
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    c622:	07 43       	clr	r7		
    c624:	18 3c       	jmp	$+50     	;abs 0xc656
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
          cio_printc('0');
    c626:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c62a:	b0 12 40 c8 	call	#0xc840	
    c62e:	23 3c       	jmp	$+72     	;abs 0xc676
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
    c630:	0c 4f       	mov	r15,	r12	
    c632:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    c636:	b0 12 dc c9 	call	#0xc9dc	
    c63a:	3e 50 30 00 	add	#48,	r14	;#0x0030
    c63e:	88 4e 00 00 	mov	r14,	0(r8)	;0x0000(r8)
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    c642:	39 53       	add	#-1,	r9	;r3 As==11
    c644:	28 83       	decd	r8		
    c646:	09 93       	tst	r9		
    c648:	08 24       	jz	$+18     	;abs 0xc65a
          buffer[i] = (n%10)+'0';
          n /= 10;
    c64a:	0c 4f       	mov	r15,	r12	
    c64c:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    c650:	b0 12 dc c9 	call	#0xc9dc	
    c654:	0f 4c       	mov	r12,	r15	
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    c656:	07 9f       	cmp	r15,	r7	
    c658:	eb 3b       	jl	$-40     	;abs 0xc630
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    c65a:	0a 49       	mov	r9,	r10	
    c65c:	1a 53       	inc	r10		
     while(line[i] != 0) {
          cio_printc(line[i++]);
     }
}

void cio_printi(int n)
    c65e:	0b 4a       	mov	r10,	r11	
    c660:	0b 5b       	rla	r11		
    c662:	0b 51       	add	r1,	r11	
    c664:	05 3c       	jmp	$+12     	;abs 0xc670
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
          cio_printc(buffer[j]);
    c666:	6f 4b       	mov.b	@r11,	r15	
    c668:	b0 12 40 c8 	call	#0xc840	
     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    c66c:	1a 53       	inc	r10		
    c66e:	2b 53       	incd	r11		
    c670:	3a 90 10 00 	cmp	#16,	r10	;#0x0010
    c674:	f8 23       	jnz	$-14     	;abs 0xc666
          cio_printc(buffer[j]);
     }
}
    c676:	31 50 20 00 	add	#32,	r1	;#0x0020
    c67a:	37 41       	pop	r7		
    c67c:	38 41       	pop	r8		
    c67e:	39 41       	pop	r9		
    c680:	3a 41       	pop	r10		
    c682:	3b 41       	pop	r11		
    c684:	30 41       	ret			

0000c686 <cio_printb>:

void cio_printb(int n, int size)
{
    c686:	0b 12       	push	r11		
    c688:	0a 12       	push	r10		
    c68a:	09 12       	push	r9		
    c68c:	08 12       	push	r8		
    c68e:	08 4f       	mov	r15,	r8	
    c690:	09 4e       	mov	r14,	r9	

     int i;

     int mask = 1 << (size - 1);
    c692:	1b 43       	mov	#1,	r11	;r3 As==01
    c694:	0d 4e       	mov	r14,	r13	
    c696:	3d 53       	add	#-1,	r13	;r3 As==11
    c698:	0d 93       	tst	r13		
    c69a:	03 24       	jz	$+8      	;abs 0xc6a2
    c69c:	0b 5b       	rla	r11		
    c69e:	1d 83       	dec	r13		
    c6a0:	fd 23       	jnz	$-4      	;abs 0xc69c

     for(i = 0; i < size; i++) {
    c6a2:	0a 43       	clr	r10		
    c6a4:	11 3c       	jmp	$+36     	;abs 0xc6c8
          if((n & (mask >> i)) != 0) {
    c6a6:	0f 4a       	mov	r10,	r15	
    c6a8:	0d 4b       	mov	r11,	r13	
    c6aa:	0f 93       	tst	r15		
    c6ac:	03 24       	jz	$+8      	;abs 0xc6b4
    c6ae:	0d 11       	rra	r13		
    c6b0:	1f 83       	dec	r15		
    c6b2:	fd 23       	jnz	$-4      	;abs 0xc6ae
    c6b4:	0d f8       	and	r8,	r13	
    c6b6:	03 24       	jz	$+8      	;abs 0xc6be
               cio_printc('1');
    c6b8:	7f 40 31 00 	mov.b	#49,	r15	;#0x0031
    c6bc:	02 3c       	jmp	$+6      	;abs 0xc6c2
          } else {
               cio_printc('0');
    c6be:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c6c2:	b0 12 40 c8 	call	#0xc840	

     int i;

     int mask = 1 << (size - 1);

     for(i = 0; i < size; i++) {
    c6c6:	1a 53       	inc	r10		
    c6c8:	0a 99       	cmp	r9,	r10	
    c6ca:	ed 3b       	jl	$-36     	;abs 0xc6a6
          } else {
               cio_printc('0');
          }
     }

}
    c6cc:	38 41       	pop	r8		
    c6ce:	39 41       	pop	r9		
    c6d0:	3a 41       	pop	r10		
    c6d2:	3b 41       	pop	r11		
    c6d4:	30 41       	ret			

0000c6d6 <cio_printf>:
     } else
          cio_printc('0');
}

void cio_printf(char *format, ...)
{
    c6d6:	0b 12       	push	r11		
    c6d8:	0a 12       	push	r10		
    c6da:	09 12       	push	r9		
    c6dc:	08 12       	push	r8		
    c6de:	07 12       	push	r7		
    c6e0:	06 12       	push	r6		
    c6e2:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
     char c;
     int i;
     long n;

     va_list a;
     va_start(a, format);
    c6e6:	0a 41       	mov	r1,	r10	
    c6e8:	3a 50 10 00 	add	#16,	r10	;#0x0010

     while((c = *format++)) {
          if(c == '%') {
               switch(c = *format++) {
    c6ec:	77 40 6e 00 	mov.b	#110,	r7	;#0x006e
    c6f0:	78 40 69 00 	mov.b	#105,	r8	;#0x0069
    c6f4:	7f 3c       	jmp	$+256    	;abs 0xc7f4
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    c6f6:	19 53       	inc	r9		
          if(c == '%') {
    c6f8:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    c6fc:	79 20       	jnz	$+244    	;abs 0xc7f0
               switch(c = *format++) {
    c6fe:	6f 49       	mov.b	@r9,	r15	
    c700:	19 53       	inc	r9		
    c702:	7f 90 6e 00 	cmp.b	#110,	r15	;#0x006e
    c706:	3c 24       	jz	$+122    	;abs 0xc780
    c708:	47 9f       	cmp.b	r15,	r7	
    c70a:	0f 38       	jl	$+32     	;abs 0xc72a
    c70c:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    c710:	22 24       	jz	$+70     	;abs 0xc756
    c712:	48 9f       	cmp.b	r15,	r8	
    c714:	06 38       	jl	$+14     	;abs 0xc722
    c716:	4f 93       	tst.b	r15		
    c718:	70 24       	jz	$+226    	;abs 0xc7fa
    c71a:	7f 90 63 00 	cmp.b	#99,	r15	;#0x0063
    c71e:	68 20       	jnz	$+210    	;abs 0xc7f0
    c720:	13 3c       	jmp	$+40     	;abs 0xc748
    c722:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    c726:	64 20       	jnz	$+202    	;abs 0xc7f0
    c728:	2b 3c       	jmp	$+88     	;abs 0xc780
    c72a:	7f 90 75 00 	cmp.b	#117,	r15	;#0x0075
    c72e:	13 24       	jz	$+40     	;abs 0xc756
    c730:	7f 90 78 00 	cmp.b	#120,	r15	;#0x0078
    c734:	3f 24       	jz	$+128    	;abs 0xc7b4
    c736:	7f 90 73 00 	cmp.b	#115,	r15	;#0x0073
    c73a:	5a 20       	jnz	$+182    	;abs 0xc7f0
               case 's':                       // String
                    cio_print(va_arg(a, char*));
    c73c:	0b 4a       	mov	r10,	r11	
    c73e:	2b 53       	incd	r11		
    c740:	2f 4a       	mov	@r10,	r15	
    c742:	b0 12 f0 c5 	call	#0xc5f0	
    c746:	05 3c       	jmp	$+12     	;abs 0xc752
                    break;
               case 'c':                       // Char
                    cio_printc((char)va_arg(a, int));
    c748:	0b 4a       	mov	r10,	r11	
    c74a:	2b 53       	incd	r11		
    c74c:	6f 4a       	mov.b	@r10,	r15	
    c74e:	b0 12 40 c8 	call	#0xc840	
    c752:	0a 4b       	mov	r11,	r10	
    c754:	4f 3c       	jmp	$+160    	;abs 0xc7f4
                    break;
               case 'i':                       // 16 bit Integer
               case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    c756:	0b 4a       	mov	r10,	r11	
    c758:	2b 53       	incd	r11		
    c75a:	2a 4a       	mov	@r10,	r10	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
    c75c:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    c760:	08 20       	jnz	$+18     	;abs 0xc772
    c762:	0a 93       	tst	r10		
    c764:	06 34       	jge	$+14     	;abs 0xc772
    c766:	3a e3       	inv	r10		
    c768:	1a 53       	inc	r10		
    c76a:	7f 50 c4 ff 	add.b	#-60,	r15	;#0xffc4
    c76e:	b0 12 40 c8 	call	#0xc840	
                    _xtoa((unsigned)i, _dv + 5);
    c772:	3d 40 1c c8 	mov	#-14308,r13	;#0xc81c
    c776:	0e 4a       	mov	r10,	r14	
    c778:	0f 43       	clr	r15		
    c77a:	b0 12 70 c5 	call	#0xc570	
    c77e:	e9 3f       	jmp	$-44     	;abs 0xc752
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    c780:	06 4a       	mov	r10,	r6	
    c782:	26 52       	add	#4,	r6	;r2 As==10
    c784:	1b 4a 02 00 	mov	2(r10),	r11	;0x0002(r10)
    c788:	2a 4a       	mov	@r10,	r10	
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
    c78a:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    c78e:	0a 20       	jnz	$+22     	;abs 0xc7a4
    c790:	0b 93       	tst	r11		
    c792:	08 34       	jge	$+18     	;abs 0xc7a4
    c794:	3a e3       	inv	r10		
    c796:	3b e3       	inv	r11		
    c798:	1a 53       	inc	r10		
    c79a:	0b 63       	adc	r11		
    c79c:	7f 50 c1 ff 	add.b	#-63,	r15	;#0xffc1
    c7a0:	b0 12 40 c8 	call	#0xc840	
                    _xtoa((unsigned long)n, _dv);
    c7a4:	3d 40 08 c8 	mov	#-14328,r13	;#0xc808
    c7a8:	0e 4a       	mov	r10,	r14	
    c7aa:	0f 4b       	mov	r11,	r15	
    c7ac:	b0 12 70 c5 	call	#0xc570	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
                    _xtoa((unsigned)i, _dv + 5);
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    c7b0:	0a 46       	mov	r6,	r10	
    c7b2:	20 3c       	jmp	$+66     	;abs 0xc7f4
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
                    _xtoa((unsigned long)n, _dv);
                    break;
               case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    c7b4:	0b 4a       	mov	r10,	r11	
    c7b6:	2b 53       	incd	r11		
    c7b8:	2a 4a       	mov	@r10,	r10	
                    _puth(i >> 12);
    c7ba:	0e 4a       	mov	r10,	r14	
    c7bc:	8e 10       	swpb	r14		
    c7be:	8e 11       	sxt	r14		
    c7c0:	0e 11       	rra	r14		
    c7c2:	0e 11       	rra	r14		
    c7c4:	0e 11       	rra	r14		
    c7c6:	0f 4e       	mov	r14,	r15	
    c7c8:	0f 11       	rra	r15		
    c7ca:	b0 12 e2 c5 	call	#0xc5e2	
                    _puth(i >> 8);
    c7ce:	0f 4a       	mov	r10,	r15	
    c7d0:	8f 10       	swpb	r15		
    c7d2:	8f 11       	sxt	r15		
    c7d4:	b0 12 e2 c5 	call	#0xc5e2	
                    _puth(i >> 4);
    c7d8:	0e 4a       	mov	r10,	r14	
    c7da:	0e 11       	rra	r14		
    c7dc:	0e 11       	rra	r14		
    c7de:	0e 11       	rra	r14		
    c7e0:	0f 4e       	mov	r14,	r15	
    c7e2:	0f 11       	rra	r15		
    c7e4:	b0 12 e2 c5 	call	#0xc5e2	
                    _puth(i);
    c7e8:	0f 4a       	mov	r10,	r15	
    c7ea:	b0 12 e2 c5 	call	#0xc5e2	
    c7ee:	b1 3f       	jmp	$-156    	;abs 0xc752
               default:
                    goto bad_fmt;
               }
          } else
bad_fmt:
               cio_printc(c);
    c7f0:	b0 12 40 c8 	call	#0xc840	
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    c7f4:	6f 49       	mov.b	@r9,	r15	
    c7f6:	4f 93       	tst.b	r15		
    c7f8:	7e 23       	jnz	$-258    	;abs 0xc6f6
          } else
bad_fmt:
               cio_printc(c);
     }
     va_end(a);
}
    c7fa:	36 41       	pop	r6		
    c7fc:	37 41       	pop	r7		
    c7fe:	38 41       	pop	r8		
    c800:	39 41       	pop	r9		
    c802:	3a 41       	pop	r10		
    c804:	3b 41       	pop	r11		
    c806:	30 41       	ret			

0000c808 <_dv>:
    c808:	00 ca 9a 3b 00 e1 f5 05 80 96 98 00 40 42 0f 00     ...;........@B..
    c818:	a0 86 01 00 10 27 00 00 e8 03 00 00 64 00 00 00     .....'......d...
    c828:	0a 00 00 00 01 00 00 00                             ........

0000c830 <hex.1251>:
    c830:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

0000c840 <cio_printc>:
#include "serial.h"
#include "conio.h"

void cio_printc(char c)
{
     serial_send_blocking(c);
    c840:	b0 12 4e c5 	call	#0xc54e	
}
    c844:	30 41       	ret			

0000c846 <cio_getc>:

char cio_getc()
{
	return serial_recv_blocking();
    c846:	b0 12 62 c5 	call	#0xc562	
}
    c84a:	30 41       	ret			

0000c84c <processing_pin_setup>:
#include <msp430.h>
#include "pin.h"

void processing_pin_setup(unsigned char pin, unsigned char function)
{
	unsigned char port = (0xF0 & pin) >> 4;
    c84c:	4d 4f       	mov.b	r15,	r13	
    c84e:	12 c3       	clrc			
    c850:	4d 10       	rrc.b	r13		
    c852:	4d 11       	rra.b	r13		
    c854:	4d 11       	rra.b	r13		
    c856:	4d 11       	rra.b	r13		
	unsigned char bit  =  0x01 << (0x0F & pin);
    c858:	1c 43       	mov	#1,	r12	;r3 As==01
    c85a:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c85e:	0f 93       	tst	r15		
    c860:	03 24       	jz	$+8      	;abs 0xc868
    c862:	0c 5c       	rla	r12		
    c864:	1f 83       	dec	r15		
    c866:	fd 23       	jnz	$-4      	;abs 0xc862
    c868:	4f 4c       	mov.b	r12,	r15	

	switch(function) {
    c86a:	5e 93       	cmp.b	#1,	r14	;r3 As==01
    c86c:	12 24       	jz	$+38     	;abs 0xc892
    c86e:	4e 93       	tst.b	r14		
    c870:	06 24       	jz	$+14     	;abs 0xc87e
    c872:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    c874:	1c 24       	jz	$+58     	;abs 0xc8ae
    c876:	7e 90 03 00 	cmp.b	#3,	r14	;#0x0003
    c87a:	42 20       	jnz	$+134    	;abs 0xc900
    c87c:	2e 3c       	jmp	$+94     	;abs 0xc8da
	case PIN_FUNCTION_INPUT_FLOAT:
		if(port == 1) {
    c87e:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c880:	03 20       	jnz	$+8      	;abs 0xc888
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c882:	c2 cc 22 00 	bic.b	r12,	&0x0022	
    c886:	30 41       	ret			
		}
		else if(port == 2) {
    c888:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c88a:	3a 20       	jnz	$+118    	;abs 0xc900
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c88c:	c2 cc 2a 00 	bic.b	r12,	&0x002a	
    c890:	30 41       	ret			
		}
		break;
	case PIN_FUNCTION_INPUT_PULLUP:
		if(port == 1) {
    c892:	4d 9e       	cmp.b	r14,	r13	
    c894:	05 20       	jnz	$+12     	;abs 0xc8a0
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c896:	c2 cc 22 00 	bic.b	r12,	&0x0022	
  			P1OUT |=  bit;					// setting out to HIGH enables pull-up                     
    c89a:	c2 dc 21 00 	bis.b	r12,	&0x0021	
    c89e:	0f 3c       	jmp	$+32     	;abs 0xc8be
			P1REN |=  bit; 	                // enable pull-up/down 
		}
		else if(port == 2) {
    c8a0:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c8a2:	2e 20       	jnz	$+94     	;abs 0xc900
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c8a4:	c2 cc 2a 00 	bic.b	r12,	&0x002a	
  			P2OUT |=  bit;					// setting out to HIGH enables pull-up                     
    c8a8:	c2 dc 29 00 	bis.b	r12,	&0x0029	
    c8ac:	13 3c       	jmp	$+40     	;abs 0xc8d4
			P2REN |=  bit; 	                // enable pull-up/down 
		}
		break;
	case PIN_FUNCTION_INPUT_PULLDOWN:
		if(port == 1) {
    c8ae:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c8b0:	09 20       	jnz	$+20     	;abs 0xc8c4
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c8b2:	4e 4c       	mov.b	r12,	r14	
    c8b4:	7e e3       	xor.b	#-1,	r14	;r3 As==11
    c8b6:	c2 fe 22 00 	and.b	r14,	&0x0022	
  			P1OUT &= ~bit;					// setting out to LOW enables pull-down                     
    c8ba:	c2 fe 21 00 	and.b	r14,	&0x0021	
			P1REN |=  bit; 	                // enable pull-up/down 
    c8be:	c2 df 27 00 	bis.b	r15,	&0x0027	
    c8c2:	30 41       	ret			
		}
		else if(port == 2) {
    c8c4:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c8c6:	1c 20       	jnz	$+58     	;abs 0xc900
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c8c8:	4e 4c       	mov.b	r12,	r14	
    c8ca:	7e e3       	xor.b	#-1,	r14	;r3 As==11
    c8cc:	c2 fe 2a 00 	and.b	r14,	&0x002a	
  			P2OUT &= ~bit;					// setting out to LOW enables pull-down                     
    c8d0:	c2 fe 29 00 	and.b	r14,	&0x0029	
			P2REN |=  bit; 	                // enable pull-up/down 
    c8d4:	c2 df 2f 00 	bis.b	r15,	&0x002f	
    c8d8:	30 41       	ret			
		}
		break;
	case PIN_FUNCTION_OUTPUT:
		if(port == 1) {
    c8da:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c8dc:	08 20       	jnz	$+18     	;abs 0xc8ee
			P1DIR |=  bit;					// set direction to out                 
    c8de:	c2 dc 22 00 	bis.b	r12,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    c8e2:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c8e4:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    c8e8:	c2 ff 27 00 	and.b	r15,	&0x0027	
    c8ec:	30 41       	ret			
		}
		else if(port == 2) {
    c8ee:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c8f0:	07 20       	jnz	$+16     	;abs 0xc900
			P2DIR |=  bit;					// set direction to out                 
    c8f2:	c2 dc 2a 00 	bis.b	r12,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    c8f6:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c8f8:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    c8fc:	c2 ff 2f 00 	and.b	r15,	&0x002f	
    c900:	30 41       	ret			

0000c902 <processing_pin_clear>:
	}
}

void processing_pin_clear(unsigned char pin)
{
	unsigned char port = (0xF0 & pin) >> 4;
    c902:	4d 4f       	mov.b	r15,	r13	
    c904:	12 c3       	clrc			
    c906:	4d 10       	rrc.b	r13		
    c908:	4d 11       	rra.b	r13		
    c90a:	4d 11       	rra.b	r13		
    c90c:	4d 11       	rra.b	r13		
	unsigned char bit  =  0x01 << (0x0F & pin);
    c90e:	1e 43       	mov	#1,	r14	;r3 As==01
    c910:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c914:	0f 93       	tst	r15		
    c916:	03 24       	jz	$+8      	;abs 0xc91e
    c918:	0e 5e       	rla	r14		
    c91a:	1f 83       	dec	r15		
    c91c:	fd 23       	jnz	$-4      	;abs 0xc918

	if(port == 1) {
    c91e:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c920:	03 20       	jnz	$+8      	;abs 0xc928
  		P1OUT &= ~bit;					// set to LOW                   
    c922:	c2 ce 21 00 	bic.b	r14,	&0x0021	
    c926:	30 41       	ret			
	}
	else if(port == 2) {
    c928:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c92a:	02 20       	jnz	$+6      	;abs 0xc930
  		P2OUT &= ~bit;					// set to LOW                    
    c92c:	c2 ce 29 00 	bic.b	r14,	&0x0029	
    c930:	30 41       	ret			

0000c932 <processing_pin_set>:
	}
}

void processing_pin_set(unsigned char pin)
{
	unsigned char port = (0xF0 & pin) >> 4;
    c932:	4d 4f       	mov.b	r15,	r13	
    c934:	12 c3       	clrc			
    c936:	4d 10       	rrc.b	r13		
    c938:	4d 11       	rra.b	r13		
    c93a:	4d 11       	rra.b	r13		
    c93c:	4d 11       	rra.b	r13		
	unsigned char bit  =  0x01 << (0x0F & pin);
    c93e:	1e 43       	mov	#1,	r14	;r3 As==01
    c940:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c944:	0f 93       	tst	r15		
    c946:	03 24       	jz	$+8      	;abs 0xc94e
    c948:	0e 5e       	rla	r14		
    c94a:	1f 83       	dec	r15		
    c94c:	fd 23       	jnz	$-4      	;abs 0xc948

	if(port == 1) {
    c94e:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c950:	03 20       	jnz	$+8      	;abs 0xc958
  		P1OUT |= bit;					// set to HIGH 
    c952:	c2 de 21 00 	bis.b	r14,	&0x0021	
    c956:	30 41       	ret			
	}
	else if(port == 2) {
    c958:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c95a:	02 20       	jnz	$+6      	;abs 0xc960
  		P2OUT |= bit;					// set to HIGH               
    c95c:	c2 de 29 00 	bis.b	r14,	&0x0029	
    c960:	30 41       	ret			

0000c962 <processing_pin_toggle>:
	}
}

void processing_pin_toggle(unsigned char pin)
{
	unsigned char port = (0xF0 & pin) >> 4;
    c962:	4d 4f       	mov.b	r15,	r13	
    c964:	12 c3       	clrc			
    c966:	4d 10       	rrc.b	r13		
    c968:	4d 11       	rra.b	r13		
    c96a:	4d 11       	rra.b	r13		
    c96c:	4d 11       	rra.b	r13		
	unsigned char bit  =  0x01 << (0x0F & pin);
    c96e:	1e 43       	mov	#1,	r14	;r3 As==01
    c970:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c974:	0f 93       	tst	r15		
    c976:	03 24       	jz	$+8      	;abs 0xc97e
    c978:	0e 5e       	rla	r14		
    c97a:	1f 83       	dec	r15		
    c97c:	fd 23       	jnz	$-4      	;abs 0xc978

	if(port == 1) {
    c97e:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c980:	03 20       	jnz	$+8      	;abs 0xc988
  		P1OUT ^= bit;					// toggle 
    c982:	c2 ee 21 00 	xor.b	r14,	&0x0021	
    c986:	30 41       	ret			
	}
	else if(port == 2) {
    c988:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    c98a:	02 20       	jnz	$+6      	;abs 0xc990
  		P2OUT ^= bit;					// toggle           
    c98c:	c2 ee 29 00 	xor.b	r14,	&0x0029	
    c990:	30 41       	ret			

0000c992 <processing_pin_digital_read>:
	}
}

unsigned char processing_pin_digital_read(unsigned char pin)
{
	unsigned char port = (0xF0 & pin) >> 4;
    c992:	4c 4f       	mov.b	r15,	r12	
    c994:	12 c3       	clrc			
    c996:	4c 10       	rrc.b	r12		
    c998:	4c 11       	rra.b	r12		
    c99a:	4c 11       	rra.b	r12		
    c99c:	4c 11       	rra.b	r12		
	unsigned char bit  =  0x01 << (0x0F & pin);
    c99e:	1d 43       	mov	#1,	r13	;r3 As==01
    c9a0:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c9a4:	0e 4d       	mov	r13,	r14	
    c9a6:	0f 93       	tst	r15		
    c9a8:	03 24       	jz	$+8      	;abs 0xc9b0
    c9aa:	0e 5e       	rla	r14		
    c9ac:	1f 83       	dec	r15		
    c9ae:	fd 23       	jnz	$-4      	;abs 0xc9aa

	if(port == 1) {
    c9b0:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    c9b2:	04 20       	jnz	$+10     	;abs 0xc9bc
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
    c9b4:	4c 4e       	mov.b	r14,	r12	
    c9b6:	5c f2 20 00 	and.b	&0x0020,r12	
    c9ba:	05 3c       	jmp	$+12     	;abs 0xc9c6
	}
	else if(port == 2) {
    c9bc:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    c9be:	08 20       	jnz	$+18     	;abs 0xc9d0
  		return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
    c9c0:	4c 4e       	mov.b	r14,	r12	
    c9c2:	5c f2 28 00 	and.b	&0x0028,r12	
    c9c6:	4f 4d       	mov.b	r13,	r15	
    c9c8:	4c 9e       	cmp.b	r14,	r12	
    c9ca:	03 24       	jz	$+8      	;abs 0xc9d2
    c9cc:	4f 43       	clr.b	r15		
    c9ce:	30 41       	ret			
	}

	return 0;
    c9d0:	4f 43       	clr.b	r15		
}
    c9d2:	30 41       	ret			

0000c9d4 <processing_pin_analog_read>:

int processing_pin_analog_read(unsigned char pin)
{
	// TODO
	return 0;
}
    c9d4:	0f 43       	clr	r15		
    c9d6:	30 41       	ret			

0000c9d8 <processing_pin_pulselength_read>:

int processing_pin_pulselength_read(unsigned char pin)
{
	// TODO
	return 0;
}
    c9d8:	0f 43       	clr	r15		
    c9da:	30 41       	ret			

0000c9dc <__divmodhi4>:
    c9dc:	0d 43       	clr	r13		
    c9de:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    c9e2:	03 28       	jnc	$+8      	;abs 0xc9ea
    c9e4:	3c e3       	inv	r12		
    c9e6:	1c 53       	inc	r12		
    c9e8:	2d d2       	bis	#4,	r13	;r2 As==10
    c9ea:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    c9ee:	03 28       	jnc	$+8      	;abs 0xc9f6
    c9f0:	3a e3       	inv	r10		
    c9f2:	1a 53       	inc	r10		
    c9f4:	3d d2       	bis	#8,	r13	;r2 As==11
    c9f6:	b0 12 5c ca 	call	#0xca5c	
    c9fa:	0d 10       	rrc	r13		
    c9fc:	2d b2       	bit	#4,	r13	;r2 As==10
    c9fe:	04 28       	jnc	$+10     	;abs 0xca08
    ca00:	3e e3       	inv	r14		
    ca02:	1e 53       	inc	r14		
    ca04:	3c e3       	inv	r12		
    ca06:	1c 53       	inc	r12		
    ca08:	3d b2       	bit	#8,	r13	;r2 As==11
    ca0a:	02 28       	jnc	$+6      	;abs 0xca10
    ca0c:	3c e3       	inv	r12		
    ca0e:	1c 53       	inc	r12		
    ca10:	30 41       	ret			

0000ca12 <__divmodsi4>:
    ca12:	08 43       	clr	r8		
    ca14:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    ca18:	05 24       	jz	$+12     	;abs 0xca24
    ca1a:	3d e3       	inv	r13		
    ca1c:	3c e3       	inv	r12		
    ca1e:	1c 53       	inc	r12		
    ca20:	0d 63       	adc	r13		
    ca22:	28 d2       	bis	#4,	r8	;r2 As==10
    ca24:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    ca28:	05 24       	jz	$+12     	;abs 0xca34
    ca2a:	3b e3       	inv	r11		
    ca2c:	3a e3       	inv	r10		
    ca2e:	1a 53       	inc	r10		
    ca30:	0b 63       	adc	r11		
    ca32:	38 d2       	bis	#8,	r8	;r2 As==11
    ca34:	b0 12 78 ca 	call	#0xca78	
    ca38:	08 10       	rrc	r8		
    ca3a:	28 b2       	bit	#4,	r8	;r2 As==10
    ca3c:	08 24       	jz	$+18     	;abs 0xca4e
    ca3e:	3e e3       	inv	r14		
    ca40:	3f e3       	inv	r15		
    ca42:	1e 53       	inc	r14		
    ca44:	0f 63       	adc	r15		
    ca46:	3c e3       	inv	r12		
    ca48:	3d e3       	inv	r13		
    ca4a:	1c 53       	inc	r12		
    ca4c:	0d 63       	adc	r13		
    ca4e:	38 b2       	bit	#8,	r8	;r2 As==11
    ca50:	04 24       	jz	$+10     	;abs 0xca5a
    ca52:	3c e3       	inv	r12		
    ca54:	3d e3       	inv	r13		
    ca56:	1c 53       	inc	r12		
    ca58:	0d 63       	adc	r13		
    ca5a:	30 41       	ret			

0000ca5c <__udivmodhi4>:
    ca5c:	0e ee       	xor	r14,	r14	
    ca5e:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    ca62:	05 3c       	jmp	$+12     	;abs 0xca6e
    ca64:	0d 10       	rrc	r13		
    ca66:	0e 6e       	rlc	r14		
    ca68:	0e 9a       	cmp	r10,	r14	
    ca6a:	01 28       	jnc	$+4      	;abs 0xca6e
    ca6c:	0e 8a       	sub	r10,	r14	
    ca6e:	0c 6c       	rlc	r12		
    ca70:	0d 6d       	rlc	r13		
    ca72:	1b 83       	dec	r11		
    ca74:	f7 23       	jnz	$-16     	;abs 0xca64
    ca76:	30 41       	ret			

0000ca78 <__udivmodsi4>:
    ca78:	0f ef       	xor	r15,	r15	
    ca7a:	0e ee       	xor	r14,	r14	
    ca7c:	39 40 21 00 	mov	#33,	r9	;#0x0021
    ca80:	0a 3c       	jmp	$+22     	;abs 0xca96
    ca82:	08 10       	rrc	r8		
    ca84:	0e 6e       	rlc	r14		
    ca86:	0f 6f       	rlc	r15		
    ca88:	0f 9b       	cmp	r11,	r15	
    ca8a:	05 28       	jnc	$+12     	;abs 0xca96
    ca8c:	02 20       	jnz	$+6      	;abs 0xca92
    ca8e:	0e 9a       	cmp	r10,	r14	
    ca90:	02 28       	jnc	$+6      	;abs 0xca96
    ca92:	0e 8a       	sub	r10,	r14	
    ca94:	0f 7b       	subc	r11,	r15	
    ca96:	0c 6c       	rlc	r12		
    ca98:	0d 6d       	rlc	r13		
    ca9a:	08 68       	rlc	r8		
    ca9c:	19 83       	dec	r9		
    ca9e:	f1 23       	jnz	$-28     	;abs 0xca82
    caa0:	30 41       	ret			

0000caa2 <_unexpected_>:
    caa2:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 a8 c2     ................
    fff0:	a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 a8 c2 00 c0     ................
