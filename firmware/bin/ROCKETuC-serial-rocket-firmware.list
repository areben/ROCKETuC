
firmware.elf:     file format elf32-msp430


Disassembly of section .text:

0000c000 <__init_stack>:
    c000:	31 40 00 04 	mov	#1024,	r1	;#0x0400

0000c004 <__low_level_init>:
    c004:	15 42 20 01 	mov	&0x0120,r5	
    c008:	75 f3       	and.b	#-1,	r5	;r3 As==11
    c00a:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08

0000c00e <__do_copy_data>:
    c00e:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    c012:	0f 93       	tst	r15		
    c014:	07 24       	jz	$+16     	;abs 0xc024
    c016:	82 45 20 01 	mov	r5,	&0x0120	
    c01a:	2f 83       	decd	r15		
    c01c:	9f 4f 9e dd 	mov	-8802(r15),512(r15);0xdd9e(r15), 0x0200(r15)
    c020:	00 02 
    c022:	f9 23       	jnz	$-12     	;abs 0xc016

0000c024 <__do_clear_bss>:
    c024:	3f 40 2c 01 	mov	#300,	r15	;#0x012c
    c028:	0f 93       	tst	r15		
    c02a:	06 24       	jz	$+14     	;abs 0xc038
    c02c:	82 45 20 01 	mov	r5,	&0x0120	
    c030:	1f 83       	dec	r15		
    c032:	cf 43 26 02 	mov.b	#0,	550(r15);r3 As==00, 0x0226(r15)
    c036:	fa 23       	jnz	$-10     	;abs 0xc02c

0000c038 <main>:
    DCOCTL  = CALDCO_1MHZ;
}

int main(void)
{
	clock_init();
    c038:	b0 12 60 c0 	call	#0xc060	

	pin_reserve(PIN_1_1);
    c03c:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    c040:	b0 12 9a c2 	call	#0xc29a	
	pin_reserve(PIN_1_2);
    c044:	7f 40 12 00 	mov.b	#18,	r15	;#0x0012
    c048:	b0 12 9a c2 	call	#0xc29a	

	packet_handler_init();
    c04c:	b0 12 74 c0 	call	#0xc074	

	while (1) {
		packet_do_handle();
    c050:	b0 12 6c c9 	call	#0xc96c	
    c054:	fd 3f       	jmp	$-4      	;abs 0xc050

0000c056 <__stop_progExec__>:
    c056:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c05a:	fd 3f       	jmp	$-4      	;abs 0xc056

0000c05c <__ctors_end>:
    c05c:	30 40 9c dd 	br	#0xdd9c	

0000c060 <clock_init>:

#include "rocketcore.h"

void clock_init(void)
{
	WDTCTL = WDTPW + WDTHOLD;
    c060:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c064:	20 01 
    BCSCTL1 = CALBC1_1MHZ;
    c066:	d2 42 ff 10 	mov.b	&0x10ff,&0x0057	
    c06a:	57 00 
    DCOCTL  = CALDCO_1MHZ;
    c06c:	d2 42 fe 10 	mov.b	&0x10fe,&0x0056	
    c070:	56 00 
}
    c072:	30 41       	ret			

0000c074 <packet_handler_init>:
 */
SERIAL_RB_Q stx_buf[RB_SIZE];
serial_rb stx;

void packet_handler_init()
{
    c074:	0b 12       	push	r11		
	serial_init(BAUDRATE);
    c076:	3f 40 80 25 	mov	#9600,	r15	;#0x2580
    c07a:	b0 12 d0 c1 	call	#0xc1d0	

    serial_rb_init(&srx, &(srx_buf[0]), RB_SIZE);
    c07e:	3b 40 40 00 	mov	#64,	r11	;#0x0040
    c082:	0d 4b       	mov	r11,	r13	
    c084:	3e 40 4a 02 	mov	#586,	r14	;#0x024a
    c088:	3f 40 36 02 	mov	#566,	r15	;#0x0236
    c08c:	b0 12 6e c1 	call	#0xc16e	
    serial_rb_init(&stx, &(stx_buf[0]), RB_SIZE);
    c090:	0d 4b       	mov	r11,	r13	
    c092:	3e 40 8a 02 	mov	#650,	r14	;#0x028a
    c096:	3f 40 40 02 	mov	#576,	r15	;#0x0240
    c09a:	b0 12 6e c1 	call	#0xc16e	


    IE2 |= UCA0RXIE; 
    c09e:	d2 d3 01 00 	bis.b	#1,	&0x0001	;r3 As==01
	__bis_SR_register(GIE);
    c0a2:	32 d2       	eint			
}
    c0a4:	3b 41       	pop	r11		
    c0a6:	30 41       	ret			

0000c0a8 <packet_byte_to_sendq>:

void packet_byte_to_sendq(unsigned char pkt_byte) 
{
    c0a8:	0b 12       	push	r11		
    c0aa:	4b 4f       	mov.b	r15,	r11	
    c0ac:	01 3c       	jmp	$+4      	;abs 0xc0b0
	// wait until buffer empties 
	while(serial_rb_full(&stx)) {
		__asm__("nop");
    c0ae:	03 43       	nop			
}

void packet_byte_to_sendq(unsigned char pkt_byte) 
{
	// wait until buffer empties 
	while(serial_rb_full(&stx)) {
    c0b0:	3f 40 40 02 	mov	#576,	r15	;#0x0240
    c0b4:	b0 12 50 c1 	call	#0xc150	
    c0b8:	0f 93       	tst	r15		
    c0ba:	f9 23       	jnz	$-12     	;abs 0xc0ae
		__asm__("nop");
	}

	serial_rb_write(&stx, pkt_byte);
    c0bc:	4e 4b       	mov.b	r11,	r14	
    c0be:	3f 40 40 02 	mov	#576,	r15	;#0x0240
    c0c2:	b0 12 84 c1 	call	#0xc184	
	IE2 |= UCA0TXIE;
    c0c6:	e2 d3 01 00 	bis.b	#2,	&0x0001	;r3 As==10
}
    c0ca:	3b 41       	pop	r11		
    c0cc:	30 41       	ret			

0000c0ce <packet_byte_from_rcvq>:
    c0ce:	01 3c       	jmp	$+4      	;abs 0xc0d2

unsigned char packet_byte_from_rcvq() 
{
	// wait until data arrived in buffer
	while(serial_rb_empty(&srx)) {
		__asm__("nop");
    c0d0:	03 43       	nop			
}

unsigned char packet_byte_from_rcvq() 
{
	// wait until data arrived in buffer
	while(serial_rb_empty(&srx)) {
    c0d2:	3f 40 36 02 	mov	#566,	r15	;#0x0236
    c0d6:	b0 12 60 c1 	call	#0xc160	
    c0da:	0f 93       	tst	r15		
    c0dc:	f9 23       	jnz	$-12     	;abs 0xc0d0
		__asm__("nop");
	}

	return serial_rb_read(&srx);
    c0de:	3f 40 36 02 	mov	#566,	r15	;#0x0236
    c0e2:	b0 12 aa c1 	call	#0xc1aa	
}
    c0e6:	30 41       	ret			

0000c0e8 <USCI0RX_ISR>:

interrupt(USCIAB0RX_VECTOR) USCI0RX_ISR(void)
{
    c0e8:	0f 12       	push	r15		
    c0ea:	0e 12       	push	r14		
    c0ec:	0d 12       	push	r13		
    c0ee:	0c 12       	push	r12		
	if (!serial_rb_full(&srx)) {
    c0f0:	3f 40 36 02 	mov	#566,	r15	;#0x0236
    c0f4:	b0 12 50 c1 	call	#0xc150	
    c0f8:	0f 93       	tst	r15		
    c0fa:	06 20       	jnz	$+14     	;abs 0xc108
        serial_rb_write(&srx, UCA0RXBUF);
    c0fc:	5e 42 66 00 	mov.b	&0x0066,r14	
    c100:	3f 40 36 02 	mov	#566,	r15	;#0x0236
    c104:	b0 12 84 c1 	call	#0xc184	
	}
}
    c108:	3c 41       	pop	r12		
    c10a:	3d 41       	pop	r13		
    c10c:	3e 41       	pop	r14		
    c10e:	3f 41       	pop	r15		
    c110:	00 13       	reti			

0000c112 <USCI0TX_ISR>:

interrupt(USCIAB0TX_VECTOR) USCI0TX_ISR(void)
{
    c112:	0f 12       	push	r15		
    c114:	0e 12       	push	r14		
    c116:	0d 12       	push	r13		
    c118:	0c 12       	push	r12		
	if(!serial_rb_empty(&stx)) {
    c11a:	3f 40 40 02 	mov	#576,	r15	;#0x0240
    c11e:	b0 12 60 c1 	call	#0xc160	
    c122:	0f 93       	tst	r15		
    c124:	07 20       	jnz	$+16     	;abs 0xc134
    	serial_send(serial_rb_read(&stx));
    c126:	3f 40 40 02 	mov	#576,	r15	;#0x0240
    c12a:	b0 12 aa c1 	call	#0xc1aa	
    c12e:	b0 12 1c c2 	call	#0xc21c	
    c132:	03 3c       	jmp	$+8      	;abs 0xc13a
    }
    else {
		IE2 &= ~UCA0TXIE; 
    c134:	f2 f0 fd ff 	and.b	#-3,	&0x0001	;#0xfffd
    c138:	01 00 
    }
}
    c13a:	3c 41       	pop	r12		
    c13c:	3d 41       	pop	r13		
    c13e:	3e 41       	pop	r14		
    c140:	3f 41       	pop	r15		
    c142:	00 13       	reti			

0000c144 <serial_rb_free>:
#include "serial_rb.h"

unsigned short serial_rb_free(serial_rb *rb)
{
    return (rb->elements - rb->entries);
}
    c144:	1e 4f 06 00 	mov	6(r15),	r14	;0x0006(r15)
    c148:	1e 8f 08 00 	sub	8(r15),	r14	;0x0008(r15)
    c14c:	0f 4e       	mov	r14,	r15	
    c14e:	30 41       	ret			

0000c150 <serial_rb_full>:

int serial_rb_full(serial_rb *rb)
{
    return (rb->elements == rb->entries);
    c150:	1e 43       	mov	#1,	r14	;r3 As==01
    c152:	9f 9f 08 00 	cmp	8(r15),	6(r15)	;0x0008(r15), 0x0006(r15)
    c156:	06 00 
    c158:	01 24       	jz	$+4      	;abs 0xc15c
    c15a:	0e 43       	clr	r14		
}
    c15c:	0f 4e       	mov	r14,	r15	
    c15e:	30 41       	ret			

0000c160 <serial_rb_empty>:

int serial_rb_empty(serial_rb *rb)
{
    return (rb->entries == 0);
    c160:	1e 43       	mov	#1,	r14	;r3 As==01
    c162:	8f 93 08 00 	tst	8(r15)		;0x0008(r15)
    c166:	01 24       	jz	$+4      	;abs 0xc16a
    c168:	0e 43       	clr	r14		
}
    c16a:	0f 4e       	mov	r14,	r15	
    c16c:	30 41       	ret			

0000c16e <serial_rb_init>:

void serial_rb_init(serial_rb *rb, SERIAL_RB_Q *buffer, unsigned short elements)
{
    rb->buffer      = buffer;
    c16e:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
    rb->read        = &(rb->buffer[0]);
    c172:	8f 4e 02 00 	mov	r14,	2(r15)	;0x0002(r15)
    rb->write       = &(rb->buffer[0]);
    c176:	8f 4e 04 00 	mov	r14,	4(r15)	;0x0004(r15)
    rb->elements    = elements;
    c17a:	8f 4d 06 00 	mov	r13,	6(r15)	;0x0006(r15)
    rb->entries     = 0;
    c17e:	8f 43 08 00 	mov	#0,	8(r15)	;r3 As==00, 0x0008(r15)
}
    c182:	30 41       	ret			

0000c184 <serial_rb_write>:

void serial_rb_write(serial_rb *rb, SERIAL_RB_Q element)
{
  rb->entries++;
    c184:	9f 53 08 00 	inc	8(r15)		;0x0008(r15)

  if (rb->write > &(rb->buffer[rb->elements - 1])) {
    c188:	1d 4f 06 00 	mov	6(r15),	r13	;0x0006(r15)
    c18c:	3d 53       	add	#-1,	r13	;r3 As==11
    c18e:	2d 5f       	add	@r15,	r13	
    c190:	1d 9f 04 00 	cmp	4(r15),	r13	;0x0004(r15)
    c194:	02 2c       	jc	$+6      	;abs 0xc19a
      rb->write = &(rb->buffer[0]);
    c196:	af 4f 04 00 	mov	@r15,	4(r15)	;0x0004(r15)
  }

  *(rb->write++) = element;
    c19a:	1d 4f 04 00 	mov	4(r15),	r13	;0x0004(r15)
    c19e:	cd 4e 00 00 	mov.b	r14,	0(r13)	;0x0000(r13)
    c1a2:	1d 53       	inc	r13		
    c1a4:	8f 4d 04 00 	mov	r13,	4(r15)	;0x0004(r15)
}
    c1a8:	30 41       	ret			

0000c1aa <serial_rb_read>:

SERIAL_RB_Q serial_rb_read(serial_rb *rb)
{
  rb->entries--;
    c1aa:	bf 53 08 00 	add	#-1,	8(r15)	;r3 As==11, 0x0008(r15)

  if (rb->read > &(rb->buffer[rb->elements - 1])) {
    c1ae:	1e 4f 06 00 	mov	6(r15),	r14	;0x0006(r15)
    c1b2:	3e 53       	add	#-1,	r14	;r3 As==11
    c1b4:	2e 5f       	add	@r15,	r14	
    c1b6:	1e 9f 02 00 	cmp	2(r15),	r14	;0x0002(r15)
    c1ba:	02 2c       	jc	$+6      	;abs 0xc1c0
      rb->read = &(rb->buffer[0]);
    c1bc:	af 4f 02 00 	mov	@r15,	2(r15)	;0x0002(r15)
  }

  return *(rb->read++);
    c1c0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    c1c4:	6e 4d       	mov.b	@r13,	r14	
    c1c6:	1d 53       	inc	r13		
    c1c8:	8f 4d 02 00 	mov	r13,	2(r15)	;0x0002(r15)
}
    c1cc:	4f 4e       	mov.b	r14,	r15	
    c1ce:	30 41       	ret			

0000c1d0 <serial_init>:
 * TXD pin
 */
#define UART_TXD   		BIT2	

void serial_init(unsigned int baudrate)
{
    c1d0:	0b 12       	push	r11		
    c1d2:	0a 12       	push	r10		
    c1d4:	09 12       	push	r9		
    c1d6:	08 12       	push	r8		
    c1d8:	07 12       	push	r7		
	P1SEL    |= UART_RXD + UART_TXD;                       
    c1da:	f2 d0 06 00 	bis.b	#6,	&0x0026	;#0x0006
    c1de:	26 00 
  	P1SEL2   |= UART_RXD + UART_TXD;                       
    c1e0:	f2 d0 06 00 	bis.b	#6,	&0x0041	;#0x0006
    c1e4:	41 00 
  	UCA0CTL1 |= UCSSEL_2;                   // SMCLK
    c1e6:	f2 d0 80 ff 	bis.b	#-128,	&0x0061	;#0xff80
    c1ea:	61 00 

	unsigned char br = (unsigned char)(1000000 / (long)baudrate);
    c1ec:	07 43       	clr	r7		
    c1ee:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    c1f2:	3d 40 0f 00 	mov	#15,	r13	;#0x000f
    c1f6:	0a 4f       	mov	r15,	r10	
    c1f8:	0b 47       	mov	r7,	r11	
    c1fa:	b0 12 28 dd 	call	#0xdd28	

  	UCA0BR0  = br;                          // 1MHz / baudrate 
    c1fe:	c2 4c 62 00 	mov.b	r12,	&0x0062	
  	UCA0BR1  = 0;                           // 
    c202:	c2 47 63 00 	mov.b	r7,	&0x0063	
  	UCA0MCTL = UCBRS0;                      // Modulation UCBRSx = 1
    c206:	e2 43 64 00 	mov.b	#2,	&0x0064	;r3 As==10
  	UCA0CTL1 &= ~UCSWRST;                   // Initialize USCI state machine
    c20a:	f2 f0 fe ff 	and.b	#-2,	&0x0061	;#0xfffe
    c20e:	61 00 
}
    c210:	37 41       	pop	r7		
    c212:	38 41       	pop	r8		
    c214:	39 41       	pop	r9		
    c216:	3a 41       	pop	r10		
    c218:	3b 41       	pop	r11		
    c21a:	30 41       	ret			

0000c21c <serial_send>:

void serial_send(unsigned char data)
{
  	UCA0TXBUF = data;                 		
    c21c:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c220:	30 41       	ret			

0000c222 <serial_send_blocking>:

void serial_send_blocking(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG));              // USCI_A0 TX buffer ready?
    c222:	5e 42 03 00 	mov.b	&0x0003,r14	
    c226:	2e f3       	and	#2,	r14	;r3 As==10
    c228:	fc 27       	jz	$-6      	;abs 0xc222
  	UCA0TXBUF = data;                  
    c22a:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c22e:	30 41       	ret			

0000c230 <serial_recv>:

unsigned char serial_recv()
{
	return UCA0RXBUF;
}
    c230:	5f 42 66 00 	mov.b	&0x0066,r15	
    c234:	30 41       	ret			

0000c236 <serial_recv_blocking>:

unsigned char serial_recv_blocking()
{
    while (!(IFG2&UCA0RXIFG));         		// USCI_A0 RX buffer ready?
    c236:	5f 42 03 00 	mov.b	&0x0003,r15	
    c23a:	1f f3       	and	#1,	r15	;r3 As==01
    c23c:	fc 27       	jz	$-6      	;abs 0xc236
	return UCA0RXBUF;
}
    c23e:	5f 42 66 00 	mov.b	&0x0066,r15	
    c242:	30 41       	ret			

0000c244 <pin2port>:
	PIN_FUNCTION_INPUT_FLOAT,			// P2.7
};

int pin2port(unsigned char pin) 
{
	int port = (0xF0 & pin) >> 4;
    c244:	12 c3       	clrc			
    c246:	4f 10       	rrc.b	r15		
    c248:	4f 11       	rra.b	r15		
    c24a:	4f 11       	rra.b	r15		
    c24c:	4f 11       	rra.b	r15		
    c24e:	4f 4f       	mov.b	r15,	r15	

	if(port >= 1 && port <= 2) { 
    c250:	0e 4f       	mov	r15,	r14	
    c252:	3e 53       	add	#-1,	r14	;r3 As==11
    c254:	2e 93       	cmp	#2,	r14	;r3 As==10
    c256:	02 28       	jnc	$+6      	;abs 0xc25c
		return port;
	}

	return PIN_STAT_ERR_INVALPORT;
    c258:	3f 40 fe ff 	mov	#-2,	r15	;#0xfffe
}
    c25c:	30 41       	ret			

0000c25e <pin2bit>:

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c25e:	0e 4f       	mov	r15,	r14	
    c260:	3e f0 0f 00 	and	#15,	r14	;#0x000f

	return bit;
}
    c264:	1f 43       	mov	#1,	r15	;r3 As==01
    c266:	0e 93       	tst	r14		
    c268:	03 24       	jz	$+8      	;abs 0xc270
    c26a:	0f 5f       	rla	r15		
    c26c:	1e 83       	dec	r14		
    c26e:	fd 23       	jnz	$-4      	;abs 0xc26a
    c270:	30 41       	ret			

0000c272 <pin_set_curr_func>:

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
    c272:	4d 4f       	mov.b	r15,	r13	
    c274:	12 c3       	clrc			
    c276:	4d 10       	rrc.b	r13		
    c278:	4d 11       	rra.b	r13		
    c27a:	4d 11       	rra.b	r13		
    c27c:	4d 11       	rra.b	r13		
    c27e:	4d 4d       	mov.b	r13,	r13	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    c280:	3d 53       	add	#-1,	r13	;r3 As==11
    c282:	0d 5d       	rla	r13		
    c284:	0d 5d       	rla	r13		
    c286:	0d 5d       	rla	r13		
}

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    c288:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    c28c:	0d 5f       	add	r15,	r13	

	if((unsigned int)idx > sizeof(pin_curr_func)) {
    c28e:	3d 90 11 00 	cmp	#17,	r13	;#0x0011
    c292:	02 2c       	jc	$+6      	;abs 0xc298
		return;
	}

	pin_curr_func[idx] = func;
    c294:	cd 4e 26 02 	mov.b	r14,	550(r13);0x0226(r13)
    c298:	30 41       	ret			

0000c29a <pin_reserve>:
}

void pin_reserve(unsigned char pin) 
{
	pin_set_curr_func(pin, PIN_FUNCTION_RESERVED);	
    c29a:	7e 40 fe ff 	mov.b	#-2,	r14	;#0xfffe
    c29e:	b0 12 72 c2 	call	#0xc272	
}
    c2a2:	30 41       	ret			

0000c2a4 <pin_function>:

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
    c2a4:	4e 4f       	mov.b	r15,	r14	
    c2a6:	12 c3       	clrc			
    c2a8:	4e 10       	rrc.b	r14		
    c2aa:	4e 11       	rra.b	r14		
    c2ac:	4e 11       	rra.b	r14		
    c2ae:	4e 11       	rra.b	r14		
    c2b0:	4e 4e       	mov.b	r14,	r14	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    c2b2:	3e 53       	add	#-1,	r14	;r3 As==11
    c2b4:	0e 5e       	rla	r14		
    c2b6:	0e 5e       	rla	r14		
    c2b8:	0e 5e       	rla	r14		
}

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    c2ba:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    c2be:	0e 5f       	add	r15,	r14	

	if((unsigned int)idx >= 16) {
    c2c0:	3e 90 10 00 	cmp	#16,	r14	;#0x0010
    c2c4:	03 2c       	jc	$+8      	;abs 0xc2cc
		return PIN_FUNCTION_UNKNOWN;
	}

	return pin_curr_func[idx];
    c2c6:	5f 4e 26 02 	mov.b	550(r14),r15	;0x0226(r14)
    c2ca:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;

	if((unsigned int)idx >= 16) {
		return PIN_FUNCTION_UNKNOWN;
    c2cc:	7f 43       	mov.b	#-1,	r15	;r3 As==11
	}

	return pin_curr_func[idx];
}
    c2ce:	30 41       	ret			

0000c2d0 <pin_with_function>:

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    c2d0:	4f 93       	tst.b	r15		
    c2d2:	10 24       	jz	$+34     	;abs 0xc2f4
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    c2d4:	0d 4f       	mov	r15,	r13	
    c2d6:	3d f0 0f 00 	and	#15,	r13	;#0x000f
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    c2da:	1d 53       	inc	r13		
	return pin_curr_func[idx];
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
    c2dc:	12 c3       	clrc			
    c2de:	4f 10       	rrc.b	r15		
    c2e0:	4f 11       	rra.b	r15		
    c2e2:	4f 11       	rra.b	r15		
    c2e4:	4f 11       	rra.b	r15		
    c2e6:	4f 4f       	mov.b	r15,	r15	
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    c2e8:	3f 53       	add	#-1,	r15	;r3 As==11
    c2ea:	0f 5f       	rla	r15		
    c2ec:	0f 5f       	rla	r15		
    c2ee:	0f 5f       	rla	r15		
    c2f0:	0d 5f       	add	r15,	r13	
    c2f2:	01 3c       	jmp	$+4      	;abs 0xc2f6
    c2f4:	0d 43       	clr	r13		
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    c2f6:	1d 53       	inc	r13		
    c2f8:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    c2fc:	11 3c       	jmp	$+36     	;abs 0xc320
		if(pin_curr_func[i] == function) {
    c2fe:	cd 9e 26 02 	cmp.b	r14,	550(r13);0x0226(r13)
    c302:	0d 20       	jnz	$+28     	;abs 0xc31e
			return (((i / 8 + 1) << 4) + (i % 8));
    c304:	0f 4d       	mov	r13,	r15	
    c306:	0f 11       	rra	r15		
    c308:	0f 11       	rra	r15		
    c30a:	0f 11       	rra	r15		
    c30c:	5f 53       	inc.b	r15		
    c30e:	4f 5f       	rla.b	r15		
    c310:	4f 5f       	rla.b	r15		
    c312:	4f 5f       	rla.b	r15		
    c314:	4f 5f       	rla.b	r15		
    c316:	3d f0 07 00 	and	#7,	r13	;#0x0007
    c31a:	4f 5d       	add.b	r13,	r15	
    c31c:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    c31e:	1d 53       	inc	r13		
    c320:	0f 9d       	cmp	r13,	r15	
    c322:	ed 2f       	jc	$-36     	;abs 0xc2fe
		if(pin_curr_func[i] == function) {
			return (((i / 8 + 1) << 4) + (i % 8));
		}
	}

	return 0;
    c324:	4f 43       	clr.b	r15		
}
    c326:	30 41       	ret			

0000c328 <pin_capabilities>:

int pin_capabilities(unsigned char pin) 
{
    c328:	4e 4f       	mov.b	r15,	r14	

	// PIN_CAP_INPUT
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    c32a:	4d 4f       	mov.b	r15,	r13	
    c32c:	7d 50 f0 ff 	add.b	#-16,	r13	;#0xfff0
{
	int caps = 0;

	// PIN_CAP_INPUT
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    c330:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    c332:	19 28       	jnc	$+52     	;abs 0xc366
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    c334:	7f 90 20 00 	cmp.b	#32,	r15	;#0x0020
    c338:	2d 24       	jz	$+92     	;abs 0xc394
    c33a:	7f 90 21 00 	cmp.b	#33,	r15	;#0x0021
    c33e:	22 24       	jz	$+70     	;abs 0xc384
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
    c340:	7f 90 22 00 	cmp.b	#34,	r15	;#0x0022
    c344:	1f 24       	jz	$+64     	;abs 0xc384
    c346:	7f 90 23 00 	cmp.b	#35,	r15	;#0x0023
    c34a:	24 24       	jz	$+74     	;abs 0xc394
    c34c:	7f 90 24 00 	cmp.b	#36,	r15	;#0x0024
    c350:	21 24       	jz	$+68     	;abs 0xc394
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    c352:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    c356:	1e 24       	jz	$+62     	;abs 0xc394
    c358:	7f 90 26 00 	cmp.b	#38,	r15	;#0x0026
    c35c:	1b 24       	jz	$+56     	;abs 0xc394
    c35e:	7f 90 27 00 	cmp.b	#39,	r15	;#0x0027
    c362:	1b 20       	jnz	$+56     	;abs 0xc39a
    c364:	17 3c       	jmp	$+48     	;abs 0xc394
	
		caps |= PIN_CAP_INPUT + PIN_CAP_INPUT_RE + PIN_CAP_OUTPUT;
	} 

	// PIN_CAP_PWM
	if( pin == PIN_1_2 || pin == PIN_1_6 || pin == PIN_2_1 || 
    c366:	7f 90 12 00 	cmp.b	#18,	r15	;#0x0012
    c36a:	0c 24       	jz	$+26     	;abs 0xc384
    c36c:	7f 90 16 00 	cmp.b	#22,	r15	;#0x0016
    c370:	09 24       	jz	$+20     	;abs 0xc384
    c372:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    c376:	7e 90 21 00 	cmp.b	#33,	r14	;#0x0021
    c37a:	06 24       	jz	$+14     	;abs 0xc388
    c37c:	7e 90 22 00 	cmp.b	#34,	r14	;#0x0022
    c380:	05 20       	jnz	$+12     	;abs 0xc38c
    c382:	02 3c       	jmp	$+6      	;abs 0xc388
    c384:	3f 40 07 00 	mov	#7,	r15	;#0x0007
		pin == PIN_2_2) {
	
		caps |= PIN_CAP_PWM;
    c388:	3f d0 10 00 	bis	#16,	r15	;#0x0010
	} 

	// PIN_CAP_ANALOG_IN
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    c38c:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    c38e:	01 2c       	jc	$+4      	;abs 0xc392
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7) {
	
		caps |= PIN_CAP_ANALOG_IN;
    c390:	3f d2       	bis	#8,	r15	;r2 As==11
	} 

	return caps;
}
    c392:	30 41       	ret			
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    c394:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    c398:	f9 3f       	jmp	$-12     	;abs 0xc38c
	return 0;
}

int pin_capabilities(unsigned char pin) 
{
	int caps = 0;
    c39a:	0f 43       	clr	r15		
    c39c:	ec 3f       	jmp	$-38     	;abs 0xc376

0000c39e <pin_has_capabilities>:

	return caps;
}

int pin_has_capabilities(unsigned char pin, int capabilities) 
{
    c39e:	0b 12       	push	r11		
    c3a0:	0b 4e       	mov	r14,	r11	
	return ((pin_capabilities(pin) & capabilities) == capabilities ? 1 : 0);
    c3a2:	b0 12 28 c3 	call	#0xc328	
    c3a6:	0e 4f       	mov	r15,	r14	
    c3a8:	0e fb       	and	r11,	r14	
    c3aa:	1f 43       	mov	#1,	r15	;r3 As==01
    c3ac:	0e 9b       	cmp	r11,	r14	
    c3ae:	01 24       	jz	$+4      	;abs 0xc3b2
    c3b0:	0f 43       	clr	r15		
}
    c3b2:	3b 41       	pop	r11		
    c3b4:	30 41       	ret			

0000c3b6 <pin_setup>:

int pin_setup(unsigned char pin, unsigned char function)
{
    c3b6:	0b 12       	push	r11		
    c3b8:	0a 12       	push	r10		
    c3ba:	09 12       	push	r9		
    c3bc:	08 12       	push	r8		
    c3be:	49 4f       	mov.b	r15,	r9	
    c3c0:	48 4e       	mov.b	r14,	r8	
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c3c2:	b0 12 44 c2 	call	#0xc244	
    c3c6:	0b 4f       	mov	r15,	r11	
    c3c8:	0f 93       	tst	r15		
    c3ca:	02 34       	jge	$+6      	;abs 0xc3d0
    c3cc:	30 40 7a c5 	br	#0xc57a	
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c3d0:	1a 43       	mov	#1,	r10	;r3 As==01
    c3d2:	0f 49       	mov	r9,	r15	
    c3d4:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c3d8:	0f 93       	tst	r15		
    c3da:	03 24       	jz	$+8      	;abs 0xc3e2
    c3dc:	0a 5a       	rla	r10		
    c3de:	1f 83       	dec	r15		
    c3e0:	fd 23       	jnz	$-4      	;abs 0xc3dc
{
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c3e2:	0a 93       	tst	r10		
    c3e4:	c5 38       	jl	$+396    	;abs 0xc570

	unsigned char f;

	f = pin_function(pin); 
    c3e6:	4f 49       	mov.b	r9,	r15	
    c3e8:	b0 12 a4 c2 	call	#0xc2a4	
#ifdef PIN_DBG
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
    c3ec:	4f 98       	cmp.b	r8,	r15	
    c3ee:	c2 24       	jz	$+390    	;abs 0xc574
		return PIN_STAT_OK;
	}
	// PIN is reserved
	else if(f == PIN_FUNCTION_RESERVED) {
    c3f0:	7f 90 fe ff 	cmp.b	#-2,	r15	;#0xfffe
    c3f4:	c1 24       	jz	$+388    	;abs 0xc578
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	switch(function) {
    c3f6:	78 90 06 00 	cmp.b	#6,	r8	;#0x0006
    c3fa:	be 2c       	jc	$+382    	;abs 0xc578
    c3fc:	4f 48       	mov.b	r8,	r15	
    c3fe:	0f 5f       	rla	r15		
    c400:	10 4f 04 c4 	br	-15356(r15)	;0xc404(r15)
    c404:	10 c4 34 c4 	bic	-15308(r4),r0	;0xc434(r4)
    c408:	64 c4       	bic.b	@r4,	r4	
    c40a:	a4 c4 e0 c4 	bic	@r4,	-15136(r4);0xc4e0(r4)
    c40e:	02 c5       	bic	r5,	r2	
	case PIN_FUNCTION_INPUT_FLOAT:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT)) {
    c410:	1e 43       	mov	#1,	r14	;r3 As==01
    c412:	4f 49       	mov.b	r9,	r15	
    c414:	b0 12 9e c3 	call	#0xc39e	
    c418:	0f 93       	tst	r15		
    c41a:	ae 24       	jz	$+350    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    c41c:	1b 93       	cmp	#1,	r11	;r3 As==01
    c41e:	04 20       	jnz	$+10     	;abs 0xc428
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c420:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    c422:	c2 fa 22 00 	and.b	r10,	&0x0022	
    c426:	4b 3c       	jmp	$+152    	;abs 0xc4be
			P1REN &= ~bit; 	                // disable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    c428:	2b 93       	cmp	#2,	r11	;r3 As==10
    c42a:	9d 20       	jnz	$+316    	;abs 0xc566
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c42c:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    c42e:	c2 fa 2a 00 	and.b	r10,	&0x002a	
    c432:	51 3c       	jmp	$+164    	;abs 0xc4d6
			P2REN &= ~bit; 	                // disable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLUP:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    c434:	2e 43       	mov	#2,	r14	;r3 As==10
    c436:	4f 49       	mov.b	r9,	r15	
    c438:	b0 12 9e c3 	call	#0xc39e	
    c43c:	0f 93       	tst	r15		
    c43e:	9c 24       	jz	$+314    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    c440:	1b 93       	cmp	#1,	r11	;r3 As==01
    c442:	07 20       	jnz	$+16     	;abs 0xc452
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c444:	4f 4a       	mov.b	r10,	r15	
    c446:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c448:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT |=  bit;					// setting out to HIGH enables pull-up                     
    c44c:	c2 da 21 00 	bis.b	r10,	&0x0021	
    c450:	17 3c       	jmp	$+48     	;abs 0xc480
			P1REN |=  bit; 	                // enable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    c452:	2b 93       	cmp	#2,	r11	;r3 As==10
    c454:	88 20       	jnz	$+274    	;abs 0xc566
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c456:	4f 4a       	mov.b	r10,	r15	
    c458:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c45a:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT |=  bit;					// setting out to HIGH enables pull-up                     
    c45e:	c2 da 29 00 	bis.b	r10,	&0x0029	
    c462:	1b 3c       	jmp	$+56     	;abs 0xc49a
			P2REN |=  bit; 	                // enable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLDOWN:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    c464:	2e 43       	mov	#2,	r14	;r3 As==10
    c466:	4f 49       	mov.b	r9,	r15	
    c468:	b0 12 9e c3 	call	#0xc39e	
    c46c:	0f 93       	tst	r15		
    c46e:	84 24       	jz	$+266    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    c470:	1b 93       	cmp	#1,	r11	;r3 As==01
    c472:	0b 20       	jnz	$+24     	;abs 0xc48a
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c474:	4f 4a       	mov.b	r10,	r15	
    c476:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c478:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT &= ~bit;					// setting out to LOW enables pull-down                     
    c47c:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN |=  bit; 	                // enable pull-up/down 
    c480:	c2 da 27 00 	bis.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    c484:	c2 ff 26 00 	and.b	r15,	&0x0026	
    c488:	6e 3c       	jmp	$+222    	;abs 0xc566
		}
		else if(port == 2) {
    c48a:	2b 93       	cmp	#2,	r11	;r3 As==10
    c48c:	6c 20       	jnz	$+218    	;abs 0xc566
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    c48e:	4f 4a       	mov.b	r10,	r15	
    c490:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c492:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT &= ~bit;					// setting out to LOW enables pull-down                     
    c496:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN |=  bit; 	                // enable pull-up/down 
    c49a:	c2 da 2f 00 	bis.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    c49e:	c2 ff 2e 00 	and.b	r15,	&0x002e	
    c4a2:	61 3c       	jmp	$+196    	;abs 0xc566
		}
		break;
	case PIN_FUNCTION_OUTPUT:
		if(!pin_has_capabilities(pin, PIN_CAP_OUTPUT)) { 
    c4a4:	2e 42       	mov	#4,	r14	;r2 As==10
    c4a6:	4f 49       	mov.b	r9,	r15	
    c4a8:	b0 12 9e c3 	call	#0xc39e	
    c4ac:	0f 93       	tst	r15		
    c4ae:	64 24       	jz	$+202    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    c4b0:	1b 93       	cmp	#1,	r11	;r3 As==01
    c4b2:	0a 20       	jnz	$+22     	;abs 0xc4c8
			P1DIR |=  bit;					// set direction to out                 
    c4b4:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    c4b8:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    c4ba:	c2 fa 21 00 	and.b	r10,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    c4be:	c2 fa 27 00 	and.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    c4c2:	c2 fa 26 00 	and.b	r10,	&0x0026	
    c4c6:	4f 3c       	jmp	$+160    	;abs 0xc566
		}
		else if(port == 2) {
    c4c8:	2b 93       	cmp	#2,	r11	;r3 As==10
    c4ca:	4d 20       	jnz	$+156    	;abs 0xc566
			P2DIR |=  bit;					// set direction to out                 
    c4cc:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    c4d0:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    c4d2:	c2 fa 29 00 	and.b	r10,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    c4d6:	c2 fa 2f 00 	and.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    c4da:	c2 fa 2e 00 	and.b	r10,	&0x002e	
    c4de:	43 3c       	jmp	$+136    	;abs 0xc566
		}
		break;
	case PIN_FUNCTION_ANALOG_IN:
		if(!pin_has_capabilities(pin, PIN_CAP_ANALOG_IN)) { 
    c4e0:	3e 42       	mov	#8,	r14	;r2 As==11
    c4e2:	4f 49       	mov.b	r9,	r15	
    c4e4:	b0 12 9e c3 	call	#0xc39e	
    c4e8:	0f 93       	tst	r15		
    c4ea:	46 24       	jz	$+142    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		P1DIR &= ~bit;						// make sure to clear OUT flag for the pin                 
    c4ec:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    c4ee:	c2 fa 22 00 	and.b	r10,	&0x0022	
		P1REN &= ~bit; 	                	// disable pull-up/down 
    c4f2:	c2 fa 27 00 	and.b	r10,	&0x0027	
  		P1SEL &= ~bit;                  	// remove option
    c4f6:	c2 fa 26 00 	and.b	r10,	&0x0026	

		// VCC as +VRef, VSS as -VRef, 16 x ADC10CLKs
   		ADC10CTL0 = SREF_0 + ADC10SHT_2 + REFON + ADC10ON;
    c4fa:	b2 40 30 10 	mov	#4144,	&0x01b0	;#0x1030
    c4fe:	b0 01 
    c500:	32 3c       	jmp	$+102    	;abs 0xc566

		break;
	case PIN_FUNCTION_PWM:
		if(!pin_has_capabilities(pin, PIN_CAP_PWM)) { 
    c502:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    c506:	4f 49       	mov.b	r9,	r15	
    c508:	b0 12 9e c3 	call	#0xc39e	
    c50c:	0f 93       	tst	r15		
    c50e:	34 24       	jz	$+106    	;abs 0xc578
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		if(port == 1) {
    c510:	1b 93       	cmp	#1,	r11	;r3 As==01
    c512:	15 20       	jnz	$+44     	;abs 0xc53e
			// only one pin on port 1 is able to perform PWM
			unsigned char pf = pin_with_function(PIN_1_0, function);
    c514:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c518:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c51c:	b0 12 d0 c2 	call	#0xc2d0	

			if(pf > 0 && pf < PIN_2_0) { 
    c520:	7f 53       	add.b	#-1,	r15	;r3 As==11
    c522:	7f 90 1f 00 	cmp.b	#31,	r15	;#0x001f
    c526:	28 28       	jnc	$+82     	;abs 0xc578
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P1DIR |=  bit;					// set direction to out                 
    c528:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    c52c:	4f 4a       	mov.b	r10,	r15	
    c52e:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c530:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    c534:	c2 ff 27 00 	and.b	r15,	&0x0027	
  			P1SEL |=  bit;                  // select TA option
    c538:	c2 da 26 00 	bis.b	r10,	&0x0026	
    c53c:	14 3c       	jmp	$+42     	;abs 0xc566
		}
		else if(port == 2) {
    c53e:	2b 93       	cmp	#2,	r11	;r3 As==10
    c540:	12 20       	jnz	$+38     	;abs 0xc566
			// only one pin on port 2 is able to perform PWM
			if(pin_with_function(PIN_2_0, function)) { 
    c542:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c546:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    c54a:	b0 12 d0 c2 	call	#0xc2d0	
    c54e:	4f 93       	tst.b	r15		
    c550:	13 20       	jnz	$+40     	;abs 0xc578
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P2DIR |=  bit;					// set direction to out                 
    c552:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    c556:	4f 4a       	mov.b	r10,	r15	
    c558:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c55a:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    c55e:	c2 ff 2f 00 	and.b	r15,	&0x002f	
  			P2SEL |=  bit;                  // select TA option
    c562:	c2 da 2e 00 	bis.b	r10,	&0x002e	
		break;
	default:
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	pin_set_curr_func(pin, function);
    c566:	4e 48       	mov.b	r8,	r14	
    c568:	4f 49       	mov.b	r9,	r15	
    c56a:	b0 12 72 c2 	call	#0xc272	
    c56e:	02 3c       	jmp	$+6      	;abs 0xc574
{
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c570:	0b 4a       	mov	r10,	r11	
    c572:	03 3c       	jmp	$+8      	;abs 0xc57a
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
		return PIN_STAT_OK;
    c574:	0b 43       	clr	r11		
    c576:	01 3c       	jmp	$+4      	;abs 0xc57a
  			P1SEL |=  bit;                  // select TA option
		}
		else if(port == 2) {
			// only one pin on port 2 is able to perform PWM
			if(pin_with_function(PIN_2_0, function)) { 
				return PIN_STAT_ERR_UNSUPFUNC;
    c578:	3b 43       	mov	#-1,	r11	;r3 As==11
	}

	pin_set_curr_func(pin, function);

	return PIN_STAT_OK;
}
    c57a:	0f 4b       	mov	r11,	r15	
    c57c:	38 41       	pop	r8		
    c57e:	39 41       	pop	r9		
    c580:	3a 41       	pop	r10		
    c582:	3b 41       	pop	r11		
    c584:	30 41       	ret			

0000c586 <pin_clear>:

int pin_clear(unsigned char pin)
{
    c586:	0b 12       	push	r11		
    c588:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    c58a:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    c58e:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c592:	1a 20       	jnz	$+54     	;abs 0xc5c8
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c594:	4f 4b       	mov.b	r11,	r15	
    c596:	b0 12 44 c2 	call	#0xc244	
    c59a:	0f 93       	tst	r15		
    c59c:	1a 38       	jl	$+54     	;abs 0xc5d2
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c59e:	1e 43       	mov	#1,	r14	;r3 As==01
    c5a0:	0d 4b       	mov	r11,	r13	
    c5a2:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    c5a6:	0d 93       	tst	r13		
    c5a8:	03 24       	jz	$+8      	;abs 0xc5b0
    c5aa:	0e 5e       	rla	r14		
    c5ac:	1d 83       	dec	r13		
    c5ae:	fd 23       	jnz	$-4      	;abs 0xc5aa

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c5b0:	0e 93       	tst	r14		
    c5b2:	0c 38       	jl	$+26     	;abs 0xc5cc

	if(port == 1) {
    c5b4:	1f 93       	cmp	#1,	r15	;r3 As==01
    c5b6:	03 20       	jnz	$+8      	;abs 0xc5be
  		P1OUT &= ~bit;					// set to LOW                   
    c5b8:	c2 ce 21 00 	bic.b	r14,	&0x0021	
    c5bc:	09 3c       	jmp	$+20     	;abs 0xc5d0
	}
	else if(port == 2) {
    c5be:	2f 93       	cmp	#2,	r15	;r3 As==10
    c5c0:	07 20       	jnz	$+16     	;abs 0xc5d0
  		P2OUT &= ~bit;					// set to LOW                    
    c5c2:	c2 ce 29 00 	bic.b	r14,	&0x0029	
    c5c6:	04 3c       	jmp	$+10     	;abs 0xc5d0
int pin_clear(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c5c8:	3f 43       	mov	#-1,	r15	;r3 As==11
    c5ca:	03 3c       	jmp	$+8      	;abs 0xc5d2

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c5cc:	0f 4e       	mov	r14,	r15	
    c5ce:	01 3c       	jmp	$+4      	;abs 0xc5d2
	}
	else if(port == 2) {
  		P2OUT &= ~bit;					// set to LOW                    
	}

	return PIN_STAT_OK;
    c5d0:	0f 43       	clr	r15		
}
    c5d2:	3b 41       	pop	r11		
    c5d4:	30 41       	ret			

0000c5d6 <pin_set>:

int pin_set(unsigned char pin)
{
    c5d6:	0b 12       	push	r11		
    c5d8:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    c5da:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    c5de:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c5e2:	1a 20       	jnz	$+54     	;abs 0xc618
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c5e4:	4f 4b       	mov.b	r11,	r15	
    c5e6:	b0 12 44 c2 	call	#0xc244	
    c5ea:	0f 93       	tst	r15		
    c5ec:	1a 38       	jl	$+54     	;abs 0xc622
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c5ee:	1e 43       	mov	#1,	r14	;r3 As==01
    c5f0:	0d 4b       	mov	r11,	r13	
    c5f2:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    c5f6:	0d 93       	tst	r13		
    c5f8:	03 24       	jz	$+8      	;abs 0xc600
    c5fa:	0e 5e       	rla	r14		
    c5fc:	1d 83       	dec	r13		
    c5fe:	fd 23       	jnz	$-4      	;abs 0xc5fa

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c600:	0e 93       	tst	r14		
    c602:	0c 38       	jl	$+26     	;abs 0xc61c

	if(port == 1) {
    c604:	1f 93       	cmp	#1,	r15	;r3 As==01
    c606:	03 20       	jnz	$+8      	;abs 0xc60e
  		P1OUT |= bit;					// set to HIGH 
    c608:	c2 de 21 00 	bis.b	r14,	&0x0021	
    c60c:	09 3c       	jmp	$+20     	;abs 0xc620
	}
	else if(port == 2) {
    c60e:	2f 93       	cmp	#2,	r15	;r3 As==10
    c610:	07 20       	jnz	$+16     	;abs 0xc620
  		P2OUT |= bit;					// set to HIGH               
    c612:	c2 de 29 00 	bis.b	r14,	&0x0029	
    c616:	04 3c       	jmp	$+10     	;abs 0xc620
int pin_set(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c618:	3f 43       	mov	#-1,	r15	;r3 As==11
    c61a:	03 3c       	jmp	$+8      	;abs 0xc622

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c61c:	0f 4e       	mov	r14,	r15	
    c61e:	01 3c       	jmp	$+4      	;abs 0xc622
	}
	else if(port == 2) {
  		P2OUT |= bit;					// set to HIGH               
	}

	return PIN_STAT_OK;
    c620:	0f 43       	clr	r15		
}
    c622:	3b 41       	pop	r11		
    c624:	30 41       	ret			

0000c626 <pin_toggle>:

int pin_toggle(unsigned char pin)
{
    c626:	0b 12       	push	r11		
    c628:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    c62a:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
    c62e:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c632:	1a 20       	jnz	$+54     	;abs 0xc668
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c634:	4f 4b       	mov.b	r11,	r15	
    c636:	b0 12 44 c2 	call	#0xc244	
    c63a:	0f 93       	tst	r15		
    c63c:	1a 38       	jl	$+54     	;abs 0xc672
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c63e:	1e 43       	mov	#1,	r14	;r3 As==01
    c640:	0d 4b       	mov	r11,	r13	
    c642:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    c646:	0d 93       	tst	r13		
    c648:	03 24       	jz	$+8      	;abs 0xc650
    c64a:	0e 5e       	rla	r14		
    c64c:	1d 83       	dec	r13		
    c64e:	fd 23       	jnz	$-4      	;abs 0xc64a

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c650:	0e 93       	tst	r14		
    c652:	0c 38       	jl	$+26     	;abs 0xc66c

	if(port == 1) {
    c654:	1f 93       	cmp	#1,	r15	;r3 As==01
    c656:	03 20       	jnz	$+8      	;abs 0xc65e
  		P1OUT ^= bit;					// toggle 
    c658:	c2 ee 21 00 	xor.b	r14,	&0x0021	
    c65c:	09 3c       	jmp	$+20     	;abs 0xc670
	}
	else if(port == 2) {
    c65e:	2f 93       	cmp	#2,	r15	;r3 As==10
    c660:	07 20       	jnz	$+16     	;abs 0xc670
  		P2OUT ^= bit;					// toggle           
    c662:	c2 ee 29 00 	xor.b	r14,	&0x0029	
    c666:	04 3c       	jmp	$+10     	;abs 0xc670
int pin_toggle(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c668:	3f 43       	mov	#-1,	r15	;r3 As==11
    c66a:	03 3c       	jmp	$+8      	;abs 0xc672

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c66c:	0f 4e       	mov	r14,	r15	
    c66e:	01 3c       	jmp	$+4      	;abs 0xc672
	}
	else if(port == 2) {
  		P2OUT ^= bit;					// toggle           
	}

	return PIN_STAT_OK;
    c670:	0f 43       	clr	r15		
}
    c672:	3b 41       	pop	r11		
    c674:	30 41       	ret			

0000c676 <pin_digital_read>:

int pin_digital_read(unsigned char pin)
{
    c676:	0b 12       	push	r11		
    c678:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    c67a:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
    c67e:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c682:	09 24       	jz	$+20     	;abs 0xc696
    c684:	4f 93       	tst.b	r15		
    c686:	07 24       	jz	$+16     	;abs 0xc696
    c688:	5f 93       	cmp.b	#1,	r15	;r3 As==01
    c68a:	05 24       	jz	$+12     	;abs 0xc696
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
    c68c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    c68e:	03 24       	jz	$+8      	;abs 0xc696
	   && pf != PIN_FUNCTION_PWM) { 
    c690:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    c694:	1f 20       	jnz	$+64     	;abs 0xc6d4
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c696:	4f 4b       	mov.b	r11,	r15	
    c698:	b0 12 44 c2 	call	#0xc244	
    c69c:	0f 93       	tst	r15		
    c69e:	1d 38       	jl	$+60     	;abs 0xc6da
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c6a0:	1c 43       	mov	#1,	r12	;r3 As==01
    c6a2:	0d 4b       	mov	r11,	r13	
    c6a4:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    c6a8:	0e 4c       	mov	r12,	r14	
    c6aa:	0d 93       	tst	r13		
    c6ac:	03 24       	jz	$+8      	;abs 0xc6b4
    c6ae:	0e 5e       	rla	r14		
    c6b0:	1d 83       	dec	r13		
    c6b2:	fd 23       	jnz	$-4      	;abs 0xc6ae

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c6b4:	0e 93       	tst	r14		
    c6b6:	10 38       	jl	$+34     	;abs 0xc6d8

	if(port == 1) {
    c6b8:	0f 9c       	cmp	r12,	r15	
    c6ba:	04 20       	jnz	$+10     	;abs 0xc6c4
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
    c6bc:	5d 42 20 00 	mov.b	&0x0020,r13	
    c6c0:	0d fe       	and	r14,	r13	
    c6c2:	04 3c       	jmp	$+10     	;abs 0xc6cc
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
    c6c4:	5d 42 28 00 	mov.b	&0x0028,r13	
    c6c8:	0d fe       	and	r14,	r13	
    c6ca:	0f 4c       	mov	r12,	r15	
    c6cc:	0d 9e       	cmp	r14,	r13	
    c6ce:	05 24       	jz	$+12     	;abs 0xc6da
    c6d0:	0f 43       	clr	r15		
    c6d2:	03 3c       	jmp	$+8      	;abs 0xc6da
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
	   && pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c6d4:	3f 43       	mov	#-1,	r15	;r3 As==11
    c6d6:	01 3c       	jmp	$+4      	;abs 0xc6da

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c6d8:	0f 4e       	mov	r14,	r15	
	if(port == 1) {
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
}
    c6da:	3b 41       	pop	r11		
    c6dc:	30 41       	ret			

0000c6de <pin_analog_read>:

int pin_analog_read(unsigned char pin)
{
    c6de:	0b 12       	push	r11		
    c6e0:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    c6e2:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
    c6e6:	7f 50 fd ff 	add.b	#-3,	r15	;#0xfffd
    c6ea:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    c6ec:	22 2c       	jc	$+70     	;abs 0xc732
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	int s;

	if((s = pin2port(pin)) < 0) return s;
    c6ee:	4f 4b       	mov.b	r11,	r15	
    c6f0:	b0 12 44 c2 	call	#0xc244	
    c6f4:	0f 93       	tst	r15		
    c6f6:	1e 38       	jl	$+62     	;abs 0xc734
	return PIN_STAT_ERR_INVALPORT;
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
    c6f8:	4e 4b       	mov.b	r11,	r14	
	int bit 	=  0x01 << bit_num;
    c6fa:	1f 43       	mov	#1,	r15	;r3 As==01
    c6fc:	0d 4e       	mov	r14,	r13	
    c6fe:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    c702:	0d 93       	tst	r13		
    c704:	03 24       	jz	$+8      	;abs 0xc70c
    c706:	0f 5f       	rla	r15		
    c708:	1d 83       	dec	r13		
    c70a:	fd 23       	jnz	$-4      	;abs 0xc706
	}

	int s;

	if((s = pin2port(pin)) < 0) return s;
	if((s = pin2bit(pin))  < 0) return s;
    c70c:	0f 93       	tst	r15		
    c70e:	12 38       	jl	$+38     	;abs 0xc734

	// configure channel
   	ADC10CTL1 = 0xF000 & (pin << 12); 
    c710:	0f 4e       	mov	r14,	r15	
    c712:	8f 10       	swpb	r15		
    c714:	0f 5f       	rla	r15		
    c716:	0f 5f       	rla	r15		
    c718:	0f 5f       	rla	r15		
    c71a:	0f 5f       	rla	r15		
    c71c:	82 4f b2 01 	mov	r15,	&0x01b2	

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    c720:	b2 d0 03 00 	bis	#3,	&0x01b0	;#0x0003
    c724:	b0 01 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY
    c726:	92 b3 b2 01 	bit	#1,	&0x01b2	;r3 As==01
    c72a:	fd 23       	jnz	$-4      	;abs 0xc726

	return ADC10MEM;
    c72c:	1f 42 b4 01 	mov	&0x01b4,r15	
    c730:	01 3c       	jmp	$+4      	;abs 0xc734
int pin_analog_read(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c732:	3f 43       	mov	#-1,	r15	;r3 As==11

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY

	return ADC10MEM;
}
    c734:	3b 41       	pop	r11		
    c736:	30 41       	ret			

0000c738 <pin_pulselength_read>:

int pin_pulselength_read(unsigned char pin)
{
    c738:	0b 12       	push	r11		
    c73a:	0a 12       	push	r10		
    c73c:	09 12       	push	r9		
    c73e:	49 4f       	mov.b	r15,	r9	
	unsigned char pf = pin_function(pin);
    c740:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && 
    c744:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c748:	22 2c       	jc	$+70     	;abs 0xc78e

	int to = 32767;
	int t  = 0;

	// 1. check current state s of pin
	int s  = pin_digital_read(pin); 
    c74a:	4f 49       	mov.b	r9,	r15	
    c74c:	b0 12 76 c6 	call	#0xc676	
    c750:	0b 4f       	mov	r15,	r11	
	
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;
    c752:	0f 93       	tst	r15		
    c754:	21 38       	jl	$+68     	;abs 0xc798
    c756:	0a 43       	clr	r10		

   	while(ds == s) {
		ds = pin_digital_read(pin);
    c758:	4f 49       	mov.b	r9,	r15	
    c75a:	b0 12 76 c6 	call	#0xc676	
    c75e:	0e 4f       	mov	r15,	r14	

    	if(ds < 0) return ds;
    c760:	0f 93       	tst	r15		
    c762:	17 38       	jl	$+48     	;abs 0xc792

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    c764:	3a 90 ff 7f 	cmp	#32767,	r10	;#0x7fff
    c768:	16 24       	jz	$+46     	;abs 0xc796
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;

   	while(ds == s) {
    c76a:	0f 9b       	cmp	r11,	r15	
    c76c:	02 20       	jnz	$+6      	;abs 0xc772
		ds = pin_digital_read(pin);

    	if(ds < 0) return ds;

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    c76e:	1a 53       	inc	r10		
    c770:	f3 3f       	jmp	$-24     	;abs 0xc758
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;

   	while(ds == s) {
    c772:	0a 43       	clr	r10		

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
		ds = pin_digital_read(pin);
    c774:	4f 49       	mov.b	r9,	r15	
    c776:	b0 12 76 c6 	call	#0xc676	
    c77a:	0e 4f       	mov	r15,	r14	

    	if(ds < 0) return ds;
    c77c:	0f 93       	tst	r15		
    c77e:	09 38       	jl	$+20     	;abs 0xc792

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    c780:	3a 90 ff 7f 	cmp	#32767,	r10	;#0x7fff
    c784:	08 24       	jz	$+18     	;abs 0xc796
    c786:	1a 53       	inc	r10		
	}

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
    c788:	0f 9b       	cmp	r11,	r15	
    c78a:	f4 23       	jnz	$-22     	;abs 0xc774
    c78c:	04 3c       	jmp	$+10     	;abs 0xc796
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && 
	   pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c78e:	3b 43       	mov	#-1,	r11	;r3 As==11
    c790:	03 3c       	jmp	$+8      	;abs 0xc798

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
		ds = pin_digital_read(pin);
    c792:	0b 4e       	mov	r14,	r11	
    c794:	01 3c       	jmp	$+4      	;abs 0xc798

    	if(ds < 0) return ds;

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    c796:	0b 4a       	mov	r10,	r11	
	}

	return t;
}
    c798:	0f 4b       	mov	r11,	r15	
    c79a:	39 41       	pop	r9		
    c79c:	3a 41       	pop	r10		
    c79e:	3b 41       	pop	r11		
    c7a0:	30 41       	ret			

0000c7a2 <pin_pwm_function>:

int pin_pwm_function(unsigned char pin, int period)
{
    c7a2:	0b 12       	push	r11		
    c7a4:	0a 12       	push	r10		
    c7a6:	4b 4f       	mov.b	r15,	r11	
    c7a8:	0a 4e       	mov	r14,	r10	
	unsigned char pf = pin_function(pin);
    c7aa:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_PWM) { 
    c7ae:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    c7b2:	27 20       	jnz	$+80     	;abs 0xc802
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c7b4:	4f 4b       	mov.b	r11,	r15	
    c7b6:	b0 12 44 c2 	call	#0xc244	
    c7ba:	0f 93       	tst	r15		
    c7bc:	25 38       	jl	$+76     	;abs 0xc808
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c7be:	1d 43       	mov	#1,	r13	;r3 As==01
    c7c0:	0c 4b       	mov	r11,	r12	
    c7c2:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    c7c6:	0c 93       	tst	r12		
    c7c8:	03 24       	jz	$+8      	;abs 0xc7d0
    c7ca:	0d 5d       	rla	r13		
    c7cc:	1c 83       	dec	r12		
    c7ce:	fd 23       	jnz	$-4      	;abs 0xc7ca

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c7d0:	0d 93       	tst	r13		
    c7d2:	19 38       	jl	$+52     	;abs 0xc806
    c7d4:	0e 4a       	mov	r10,	r14	
    c7d6:	3e 53       	add	#-1,	r14	;r3 As==11

	if(port == 1) {
    c7d8:	1f 93       	cmp	#1,	r15	;r3 As==01
    c7da:	09 20       	jnz	$+20     	;abs 0xc7ee
  		TA0CCR0  = period - 1;					// Set period 
    c7dc:	82 4e 72 01 	mov	r14,	&0x0172	
		TA0CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    c7e0:	b2 40 e0 00 	mov	#224,	&0x0164	;#0x00e0
    c7e4:	64 01 
		TA0CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    c7e6:	b2 40 10 02 	mov	#528,	&0x0160	;#0x0210
    c7ea:	60 01 
    c7ec:	08 3c       	jmp	$+18     	;abs 0xc7fe
	}
	else {
  		TA1CCR0  = period - 1;					// Set period 
    c7ee:	82 4e 92 01 	mov	r14,	&0x0192	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    c7f2:	b2 40 e0 00 	mov	#224,	&0x0184	;#0x00e0
    c7f6:	84 01 
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    c7f8:	b2 40 10 02 	mov	#528,	&0x0180	;#0x0210
    c7fc:	80 01 
	}

	return PIN_STAT_OK;
    c7fe:	0f 43       	clr	r15		
    c800:	03 3c       	jmp	$+8      	;abs 0xc808
int pin_pwm_function(unsigned char pin, int period)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c802:	3f 43       	mov	#-1,	r15	;r3 As==11
    c804:	01 3c       	jmp	$+4      	;abs 0xc808

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c806:	0f 4d       	mov	r13,	r15	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
	}

	return PIN_STAT_OK;
}
    c808:	3a 41       	pop	r10		
    c80a:	3b 41       	pop	r11		
    c80c:	30 41       	ret			

0000c80e <pin_pwm_control>:

int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
    c80e:	0b 12       	push	r11		
    c810:	0a 12       	push	r10		
    c812:	09 12       	push	r9		
    c814:	4a 4f       	mov.b	r15,	r10	
    c816:	49 4e       	mov.b	r14,	r9	
	unsigned char pf = pin_function(pin);
    c818:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_PWM) { 
    c81c:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    c820:	56 20       	jnz	$+174    	;abs 0xc8ce
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c822:	4f 4a       	mov.b	r10,	r15	
    c824:	b0 12 44 c2 	call	#0xc244	
    c828:	0f 93       	tst	r15		
    c82a:	54 38       	jl	$+170    	;abs 0xc8d4
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c82c:	1d 43       	mov	#1,	r13	;r3 As==01
    c82e:	0c 4a       	mov	r10,	r12	
    c830:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    c834:	0c 93       	tst	r12		
    c836:	03 24       	jz	$+8      	;abs 0xc83e
    c838:	0d 5d       	rla	r13		
    c83a:	1c 83       	dec	r12		
    c83c:	fd 23       	jnz	$-4      	;abs 0xc838

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c83e:	0d 93       	tst	r13		
    c840:	48 38       	jl	$+146    	;abs 0xc8d2
    c842:	49 49       	mov.b	r9,	r9	

	if(port == 1) {
    c844:	1f 93       	cmp	#1,	r15	;r3 As==01
    c846:	21 20       	jnz	$+68     	;abs 0xc88a
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA0CCR1 = (TA0CCR0 / 100) * (duty_cycle / 2.55); 
    c848:	1c 42 72 01 	mov	&0x0172,r12	
    c84c:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    c850:	b0 12 0c dd 	call	#0xdd0c	
    c854:	0e 4c       	mov	r12,	r14	
    c856:	0f 43       	clr	r15		
    c858:	b0 12 32 d7 	call	#0xd732	
    c85c:	0a 4e       	mov	r14,	r10	
    c85e:	0b 4f       	mov	r15,	r11	
    c860:	0e 49       	mov	r9,	r14	
    c862:	0f 43       	clr	r15		
    c864:	b0 12 06 d6 	call	#0xd606	
    c868:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    c86c:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    c870:	b0 12 4e d4 	call	#0xd44e	
    c874:	0c 4e       	mov	r14,	r12	
    c876:	0d 4f       	mov	r15,	r13	
    c878:	0e 4a       	mov	r10,	r14	
    c87a:	0f 4b       	mov	r11,	r15	
    c87c:	b0 12 50 d2 	call	#0xd250	
    c880:	b0 12 bc ce 	call	#0xcebc	
    c884:	82 4e 74 01 	mov	r14,	&0x0174	
    c888:	20 3c       	jmp	$+66     	;abs 0xc8ca
	}
	else {
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
    c88a:	1c 42 92 01 	mov	&0x0192,r12	
    c88e:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    c892:	b0 12 0c dd 	call	#0xdd0c	
    c896:	0e 4c       	mov	r12,	r14	
    c898:	0f 43       	clr	r15		
    c89a:	b0 12 32 d7 	call	#0xd732	
    c89e:	0a 4e       	mov	r14,	r10	
    c8a0:	0b 4f       	mov	r15,	r11	
    c8a2:	0e 49       	mov	r9,	r14	
    c8a4:	0f 43       	clr	r15		
    c8a6:	b0 12 06 d6 	call	#0xd606	
    c8aa:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    c8ae:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    c8b2:	b0 12 4e d4 	call	#0xd44e	
    c8b6:	0c 4e       	mov	r14,	r12	
    c8b8:	0d 4f       	mov	r15,	r13	
    c8ba:	0e 4a       	mov	r10,	r14	
    c8bc:	0f 4b       	mov	r11,	r15	
    c8be:	b0 12 50 d2 	call	#0xd250	
    c8c2:	b0 12 bc ce 	call	#0xcebc	
    c8c6:	82 4e 94 01 	mov	r14,	&0x0194	
	}

	return PIN_STAT_OK;
    c8ca:	0f 43       	clr	r15		
    c8cc:	03 3c       	jmp	$+8      	;abs 0xc8d4
int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c8ce:	3f 43       	mov	#-1,	r15	;r3 As==11
    c8d0:	01 3c       	jmp	$+4      	;abs 0xc8d4

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c8d2:	0f 4d       	mov	r13,	r15	
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
	}

	return PIN_STAT_OK;
}
    c8d4:	39 41       	pop	r9		
    c8d6:	3a 41       	pop	r10		
    c8d8:	3b 41       	pop	r11		
    c8da:	30 41       	ret			

0000c8dc <pin_exti_function>:

int pin_exti_function(unsigned char pin, unsigned char function)
{
    c8dc:	0b 12       	push	r11		
    c8de:	0a 12       	push	r10		
    c8e0:	4a 4f       	mov.b	r15,	r10	
    c8e2:	4b 4e       	mov.b	r14,	r11	
	unsigned char pf = pin_function(pin);
    c8e4:	b0 12 a4 c2 	call	#0xc2a4	
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
    c8e8:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    c8ec:	39 2c       	jc	$+116    	;abs 0xc960
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    c8ee:	4f 4a       	mov.b	r10,	r15	
    c8f0:	b0 12 44 c2 	call	#0xc244	
    c8f4:	0f 93       	tst	r15		
    c8f6:	37 38       	jl	$+112    	;abs 0xc966
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    c8f8:	1d 43       	mov	#1,	r13	;r3 As==01
    c8fa:	0e 4a       	mov	r10,	r14	
    c8fc:	3e f0 0f 00 	and	#15,	r14	;#0x000f
    c900:	0e 93       	tst	r14		
    c902:	03 24       	jz	$+8      	;abs 0xc90a
    c904:	0d 5d       	rla	r13		
    c906:	1e 83       	dec	r14		
    c908:	fd 23       	jnz	$-4      	;abs 0xc904

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c90a:	0d 93       	tst	r13		
    c90c:	2b 38       	jl	$+88     	;abs 0xc964

	if(port == 1) {
    c90e:	1f 93       	cmp	#1,	r15	;r3 As==01
    c910:	13 20       	jnz	$+40     	;abs 0xc938
		if(function == PIN_FUNCTION_EXTI_HIGHLOW) {
    c912:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    c914:	03 20       	jnz	$+8      	;abs 0xc91c
    		P1IES |=  bit;		// set mode high-low 
    c916:	c2 dd 24 00 	bis.b	r13,	&0x0024	
    c91a:	02 3c       	jmp	$+6      	;abs 0xc920
		} 
		else {
    		P1IES &= ~bit;		// set mode low-high 
    c91c:	c2 cd 24 00 	bic.b	r13,	&0x0024	
		}

 	    P1IFG &= ~bit;			// reset interrupt flag
    c920:	4f 4d       	mov.b	r13,	r15	
    c922:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c924:	c2 ff 23 00 	and.b	r15,	&0x0023	

		if(function == PIN_FUNCTION_EXTI_DISABLE) {
    c928:	4b 93       	tst.b	r11		
    c92a:	03 20       	jnz	$+8      	;abs 0xc932
 	    	P1IE  &= ~bit;		// disable interrupt
    c92c:	c2 ff 25 00 	and.b	r15,	&0x0025	
    c930:	15 3c       	jmp	$+44     	;abs 0xc95c
		}
		else {
 	    	P1IE  |=  bit;		// enable interrupt
    c932:	c2 dd 25 00 	bis.b	r13,	&0x0025	
    c936:	12 3c       	jmp	$+38     	;abs 0xc95c
		}
	}
	else {
		if(function == PIN_FUNCTION_EXTI_HIGHLOW) {
    c938:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    c93a:	03 20       	jnz	$+8      	;abs 0xc942
    		P2IES |=  bit;		// set mode high-low 
    c93c:	c2 dd 2c 00 	bis.b	r13,	&0x002c	
    c940:	02 3c       	jmp	$+6      	;abs 0xc946
		} 
		else {
    		P2IES &= ~bit;		// set mode low-high 
    c942:	c2 cd 2c 00 	bic.b	r13,	&0x002c	
		}

 	    P2IFG &= ~bit;			// reset interrupt flag
    c946:	4f 4d       	mov.b	r13,	r15	
    c948:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    c94a:	c2 ff 2b 00 	and.b	r15,	&0x002b	

		if(function == PIN_FUNCTION_EXTI_DISABLE) {
    c94e:	4b 93       	tst.b	r11		
    c950:	03 20       	jnz	$+8      	;abs 0xc958
 	    	P2IE  &= ~bit;		// disable interrupt
    c952:	c2 ff 2d 00 	and.b	r15,	&0x002d	
    c956:	02 3c       	jmp	$+6      	;abs 0xc95c
		}
		else {
 	    	P2IE  |=  bit;		// enable interrupt
    c958:	c2 dd 2d 00 	bis.b	r13,	&0x002d	
		}
	}

	return PIN_STAT_OK;
    c95c:	0f 43       	clr	r15		
    c95e:	03 3c       	jmp	$+8      	;abs 0xc966
int pin_exti_function(unsigned char pin, unsigned char function)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    c960:	3f 43       	mov	#-1,	r15	;r3 As==11
    c962:	01 3c       	jmp	$+4      	;abs 0xc966

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    c964:	0f 4d       	mov	r13,	r15	
 	    	P2IE  |=  bit;		// enable interrupt
		}
	}

	return PIN_STAT_OK;
}
    c966:	3a 41       	pop	r10		
    c968:	3b 41       	pop	r11		
    c96a:	30 41       	ret			

0000c96c <packet_do_handle>:
	}
};

void packet_do_handle()
{
	if(packet_receive(&inp, PACKET_INBOUND_START) == PACKET_STAT_OK) {
    c96c:	7e 40 24 00 	mov.b	#36,	r14	;#0x0024
    c970:	3f 40 ca 02 	mov	#714,	r15	;#0x02ca
    c974:	b0 12 0e ce 	call	#0xce0e	
    c978:	0f 93       	tst	r15		
    c97a:	0e 20       	jnz	$+30     	;abs 0xc998
		if(packet_process_received(&packet_handlers, &inp) == PACKET_STAT_ERR_UNKPACK) {
    c97c:	3e 40 ca 02 	mov	#714,	r14	;#0x02ca
    c980:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    c984:	b0 12 7c ce 	call	#0xce7c	
    c988:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c98c:	08 20       	jnz	$+18     	;abs 0xc99e
			send_status_packet(PACKET_RETURN_INVALID_PACKET);
    c98e:	7f 50 06 00 	add.b	#6,	r15	;#0x0006
    c992:	b0 12 a0 c9 	call	#0xc9a0	
    c996:	30 41       	ret			
		}
	}
	else {
		send_status_packet(PACKET_RETURN_BAD_PACKET);
    c998:	6f 43       	mov.b	#2,	r15	;r3 As==10
    c99a:	b0 12 a0 c9 	call	#0xc9a0	
    c99e:	30 41       	ret			

0000c9a0 <send_status_packet>:
 * IN-bound packet instance.
 */
packet inp;

void send_status_packet(unsigned char stat)
{
    c9a0:	0b 12       	push	r11		
	packet_data_out_status *pd = (packet_data_out_status *)&outp.data[0];

	outp.start	= PACKET_OUTBOUND_START;
    c9a2:	3b 40 0e 03 	mov	#782,	r11	;#0x030e
    c9a6:	fb 40 2b 00 	mov.b	#43,	0(r11)	;#0x002b, 0x0000(r11)
    c9aa:	00 00 
	outp.length	= 5;
    c9ac:	fb 40 05 00 	mov.b	#5,	1(r11)	;#0x0005, 0x0001(r11)
    c9b0:	01 00 
	outp.type 	= PACKET_OUT_STATUS;
    c9b2:	db 43 02 00 	mov.b	#1,	2(r11)	;r3 As==01, 0x0002(r11)
	pd->status  = stat;
    c9b6:	cb 4f 03 00 	mov.b	r15,	3(r11)	;0x0003(r11)
	outp.crc	= packet_calc_crc(&outp);
    c9ba:	0f 4b       	mov	r11,	r15	
    c9bc:	b0 12 78 cd 	call	#0xcd78	
    c9c0:	cb 4f 43 00 	mov.b	r15,	67(r11)	;0x0043(r11)

	packet_send(&outp);
    c9c4:	0f 4b       	mov	r11,	r15	
    c9c6:	b0 12 b8 cd 	call	#0xcdb8	
}
    c9ca:	3b 41       	pop	r11		
    c9cc:	30 41       	ret			

0000c9ce <handle_packet_null>:

#include "rocketcore.h"

int handle_packet_null(unsigned char length, unsigned char *data)
{
	send_status_packet(PACKET_RETURN_ACK);
    c9ce:	5f 43       	mov.b	#1,	r15	;r3 As==01
    c9d0:	b0 12 a0 c9 	call	#0xc9a0	

	return PACKET_STAT_OK;
}
    c9d4:	0f 43       	clr	r15		
    c9d6:	30 41       	ret			

0000c9d8 <handle_packet_reserved>:

int handle_packet_reserved(unsigned char length, unsigned char *data)
{
	// TODO define + implement
	send_status_packet(PACKET_RETURN_UNKNOWN);
    c9d8:	4f 43       	clr.b	r15		
    c9da:	b0 12 a0 c9 	call	#0xc9a0	

	return PACKET_STAT_OK;
}
    c9de:	0f 43       	clr	r15		
    c9e0:	30 41       	ret			

0000c9e2 <handle_packet_system_info>:

int handle_packet_system_info(unsigned char length, unsigned char *data)
{
    c9e2:	0b 12       	push	r11		
	packet_data_out_system_info *pd = (packet_data_out_system_info *)&outp.data[0];

	outp.start	= PACKET_OUTBOUND_START;
    c9e4:	3b 40 0e 03 	mov	#782,	r11	;#0x030e
    c9e8:	fb 40 2b 00 	mov.b	#43,	0(r11)	;#0x002b, 0x0000(r11)
    c9ec:	00 00 
	outp.length	= 7;
    c9ee:	fb 40 07 00 	mov.b	#7,	1(r11)	;#0x0007, 0x0001(r11)
    c9f2:	01 00 
	outp.type 	= PACKET_OUT_SYSTEM_INFO;
    c9f4:	eb 43 02 00 	mov.b	#2,	2(r11)	;r3 As==10, 0x0002(r11)
	
	// TODO replace 0xCAFFEE with data from constants
	pd->board_type	= 0xCA;
    c9f8:	f2 40 ca ff 	mov.b	#-54,	&0x0311	;#0xffca
    c9fc:	11 03 
	pd->mcu_type	= 0xFF;
    c9fe:	f2 43 12 03 	mov.b	#-1,	&0x0312	;r3 As==11
	pd->firmware_rev= 0xEE;
    ca02:	f2 40 ee ff 	mov.b	#-18,	&0x0313	;#0xffee
    ca06:	13 03 

	outp.crc	= packet_calc_crc(&outp);
    ca08:	0f 4b       	mov	r11,	r15	
    ca0a:	b0 12 78 cd 	call	#0xcd78	
    ca0e:	cb 4f 43 00 	mov.b	r15,	67(r11)	;0x0043(r11)

	packet_send(&outp);
    ca12:	0f 4b       	mov	r11,	r15	
    ca14:	b0 12 b8 cd 	call	#0xcdb8	

	return PACKET_STAT_OK;
}
    ca18:	0f 43       	clr	r15		
    ca1a:	3b 41       	pop	r11		
    ca1c:	30 41       	ret			

0000ca1e <handle_packet_device_control>:

int handle_packet_device_control(unsigned char length, unsigned char *data)
{
	// TODO define + implement
	send_status_packet(PACKET_RETURN_UNKNOWN);
    ca1e:	4f 43       	clr.b	r15		
    ca20:	b0 12 a0 c9 	call	#0xc9a0	

	return PACKET_STAT_OK;
}
    ca24:	0f 43       	clr	r15		
    ca26:	30 41       	ret			

0000ca28 <handle_packet_pin_function>:

int handle_packet_pin_function(unsigned char length, unsigned char *data)
{
    ca28:	0b 12       	push	r11		
    ca2a:	0d 4e       	mov	r14,	r13	
	int s;

	// check if length matches for packet-data
	if(length != 2) {
    ca2c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    ca2e:	06 24       	jz	$+14     	;abs 0xca3c
		send_status_packet(PACKET_RETURN_INAVLID_DATA);
    ca30:	6f 42       	mov.b	#4,	r15	;r2 As==10
    ca32:	b0 12 a0 c9 	call	#0xc9a0	
		return PACKET_STAT_ERR_DATA;
    ca36:	3b 40 fc ff 	mov	#-4,	r11	;#0xfffc
    ca3a:	0e 3c       	jmp	$+30     	;abs 0xca58
	}

	packet_data_in_pin_function *pd = (packet_data_in_pin_function *)&data[0];

	if((s = pin_setup(pd->pin, pd->function)) != PACKET_STAT_OK) {
    ca3c:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    ca40:	6f 4d       	mov.b	@r13,	r15	
    ca42:	b0 12 b6 c3 	call	#0xc3b6	
    ca46:	0b 4f       	mov	r15,	r11	
    ca48:	0f 93       	tst	r15		
    ca4a:	03 24       	jz	$+8      	;abs 0xca52
		send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    ca4c:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    ca50:	01 3c       	jmp	$+4      	;abs 0xca54
	}
	else {
		send_status_packet(PACKET_RETURN_ACK);
    ca52:	5f 43       	mov.b	#1,	r15	;r3 As==01
    ca54:	b0 12 a0 c9 	call	#0xc9a0	
	}

	return s;
}
    ca58:	0f 4b       	mov	r11,	r15	
    ca5a:	3b 41       	pop	r11		
    ca5c:	30 41       	ret			

0000ca5e <handle_packet_pin_control>:

int handle_packet_pin_control(unsigned char length, unsigned char *data)
{
    ca5e:	0b 12       	push	r11		
    ca60:	0a 12       	push	r10		
    ca62:	0a 4e       	mov	r14,	r10	
	int s = PACKET_STAT_OK;

	// check if length matches for packet-data
	if(length != 2) {
    ca64:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    ca66:	02 24       	jz	$+6      	;abs 0xca6c
		send_status_packet(PACKET_RETURN_INAVLID_DATA);
    ca68:	6f 42       	mov.b	#4,	r15	;r2 As==10
    ca6a:	72 3c       	jmp	$+230    	;abs 0xcb50
		return PACKET_STAT_ERR_DATA;
	}

	packet_data_in_pin_control *pd = (packet_data_in_pin_control *)&data[0];

	switch(pd->control) {
    ca6c:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    ca70:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    ca74:	6d 28       	jnc	$+220    	;abs 0xcb50
    ca76:	5f 4e 01 00 	mov.b	1(r14),	r15	;0x0001(r14)
    ca7a:	0f 5f       	rla	r15		
    ca7c:	10 4f 80 ca 	br	-13696(r15)	;0xca80(r15)
    ca80:	8c ca 94 ca 	bic	r10,	-13676(r12);0xca94(r12)
    ca84:	9c ca b0 ca 	bic	-13648(r10),-13608(r12);0xcab0(r10), 0xcad8(r12)
    ca88:	d8 ca 
    ca8a:	02 cb       	bic	r11,	r2	
		case PIN_CONTROL_CLEAR:
			if((s = pin_clear(pd->pin)) != PACKET_STAT_OK) {
    ca8c:	6f 4e       	mov.b	@r14,	r15	
    ca8e:	b0 12 86 c5 	call	#0xc586	
    ca92:	07 3c       	jmp	$+16     	;abs 0xcaa2
			else {
				send_status_packet(PACKET_RETURN_ACK);
			}
			break;
		case PIN_CONTROL_SET:
			if((s = pin_set(pd->pin)) != PACKET_STAT_OK) {
    ca94:	6f 4e       	mov.b	@r14,	r15	
    ca96:	b0 12 d6 c5 	call	#0xc5d6	
    ca9a:	03 3c       	jmp	$+8      	;abs 0xcaa2
			else {
				send_status_packet(PACKET_RETURN_ACK);
			}
			break;
		case PIN_CONTROL_TOGGLE:
			if((s = pin_toggle(pd->pin)) != PACKET_STAT_OK) {
    ca9c:	6f 4e       	mov.b	@r14,	r15	
    ca9e:	b0 12 26 c6 	call	#0xc626	
    caa2:	0b 4f       	mov	r15,	r11	
    caa4:	0f 93       	tst	r15		
    caa6:	33 20       	jnz	$+104    	;abs 0xcb0e
				send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
			}
			else {
				send_status_packet(PACKET_RETURN_ACK);
    caa8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    caaa:	b0 12 a0 c9 	call	#0xc9a0	
    caae:	54 3c       	jmp	$+170    	;abs 0xcb58
			}
			break;
		case PIN_CONTROL_DIGITAL_READ:
			if((s = pin_digital_read(pd->pin)) < 0) {
    cab0:	6f 4e       	mov.b	@r14,	r15	
    cab2:	b0 12 76 c6 	call	#0xc676	
    cab6:	0b 4f       	mov	r15,	r11	
    cab8:	0f 93       	tst	r15		
    caba:	29 38       	jl	$+84     	;abs 0xcb0e
				send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
			}
			else {
				packet_data_out_digital_pin_read *pdo = (packet_data_out_digital_pin_read *)&outp.data[0];

				outp.start	= PACKET_OUTBOUND_START;
    cabc:	f2 40 2b 00 	mov.b	#43,	&0x030e	;#0x002b
    cac0:	0e 03 
				outp.length	= 6;
    cac2:	f2 40 06 00 	mov.b	#6,	&0x030f	;#0x0006
    cac6:	0f 03 
				outp.type 	= PACKET_OUT_DIGITAL_PIN_READ;
    cac8:	f2 40 03 00 	mov.b	#3,	&0x0310	;#0x0003
    cacc:	10 03 
	
				pdo->pin   = pd->pin;
    cace:	e2 4a 11 03 	mov.b	@r10,	&0x0311	
				pdo->state = s;
    cad2:	c2 4f 12 03 	mov.b	r15,	&0x0312	
    cad6:	31 3c       	jmp	$+100    	;abs 0xcb3a

				packet_send(&outp);
			}
			break;
		case PIN_CONTROL_ANALOG_READ:
			if((s = pin_analog_read(pd->pin)) < 0) {
    cad8:	6f 4e       	mov.b	@r14,	r15	
    cada:	b0 12 de c6 	call	#0xc6de	
    cade:	0b 4f       	mov	r15,	r11	
    cae0:	0f 93       	tst	r15		
    cae2:	15 38       	jl	$+44     	;abs 0xcb0e
				send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
			}
			else {
				packet_data_out_analog_pin_read *pdo = (packet_data_out_analog_pin_read *)&outp.data[0];

				outp.start	= PACKET_OUTBOUND_START;
    cae4:	f2 40 2b 00 	mov.b	#43,	&0x030e	;#0x002b
    cae8:	0e 03 
				outp.length	= 7;
    caea:	f2 40 07 00 	mov.b	#7,	&0x030f	;#0x0007
    caee:	0f 03 
				outp.type 	= PACKET_OUT_ANALOG_PIN_READ;
    caf0:	e2 42 10 03 	mov.b	#4,	&0x0310	;r2 As==10
	
				pdo->pin       = pd->pin;
    caf4:	e2 4a 11 03 	mov.b	@r10,	&0x0311	
				pdo->value_lsb = (0x00FF & s);
    caf8:	c2 4f 12 03 	mov.b	r15,	&0x0312	
				pdo->value_msb = (0x0F00 & s) >> 8;
    cafc:	3f f0 00 0f 	and	#3840,	r15	;#0x0f00
    cb00:	18 3c       	jmp	$+50     	;abs 0xcb32

				packet_send(&outp);
			}
			break;
		case PIN_CONTROL_PULSELENGTH_READ:
			if((s = pin_pulselength_read(pd->pin)) < 0) {
    cb02:	6f 4e       	mov.b	@r14,	r15	
    cb04:	b0 12 38 c7 	call	#0xc738	
    cb08:	0b 4f       	mov	r15,	r11	
    cb0a:	0f 93       	tst	r15		
    cb0c:	03 34       	jge	$+8      	;abs 0xcb14
				send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    cb0e:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    cb12:	cb 3f       	jmp	$-104    	;abs 0xcaaa
			}
			else {
				packet_data_out_pulselength_read *pdo = 
							( packet_data_out_pulselength_read *)&outp.data[0];

				outp.start	= PACKET_OUTBOUND_START;
    cb14:	f2 40 2b 00 	mov.b	#43,	&0x030e	;#0x002b
    cb18:	0e 03 
				outp.length	= 7;
    cb1a:	f2 40 07 00 	mov.b	#7,	&0x030f	;#0x0007
    cb1e:	0f 03 
				outp.type 	= PACKET_OUT_PULSELENGHT_READ;
    cb20:	f2 40 05 00 	mov.b	#5,	&0x0310	;#0x0005
    cb24:	10 03 
	
				pdo->pin   = pd->pin;
    cb26:	e2 4a 11 03 	mov.b	@r10,	&0x0311	
				pdo->value_lsb = (0x00FF & s);
    cb2a:	c2 4f 12 03 	mov.b	r15,	&0x0312	
				pdo->value_msb = (0x7F00 & s) >> 8;
    cb2e:	3f f0 00 7f 	and	#32512,	r15	;#0x7f00
    cb32:	8f 10       	swpb	r15		
    cb34:	8f 11       	sxt	r15		
    cb36:	c2 4f 13 03 	mov.b	r15,	&0x0313	

				outp.crc = packet_calc_crc(&outp);
    cb3a:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    cb3e:	b0 12 78 cd 	call	#0xcd78	
    cb42:	c2 4f 51 03 	mov.b	r15,	&0x0351	

				packet_send(&outp);
    cb46:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    cb4a:	b0 12 b8 cd 	call	#0xcdb8	
    cb4e:	04 3c       	jmp	$+10     	;abs 0xcb58
			}
			break;
		default:
			send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    cb50:	b0 12 a0 c9 	call	#0xc9a0	
			s = PACKET_STAT_ERR_DATA;
    cb54:	3b 40 fc ff 	mov	#-4,	r11	;#0xfffc
	}

	return s;
}
    cb58:	0f 4b       	mov	r11,	r15	
    cb5a:	3a 41       	pop	r10		
    cb5c:	3b 41       	pop	r11		
    cb5e:	30 41       	ret			

0000cb60 <handle_packet_pwm_function>:

int handle_packet_pwm_function(unsigned char length, unsigned char *data)
{
    cb60:	0b 12       	push	r11		
    cb62:	0d 4e       	mov	r14,	r13	
	int s;

	// check if length matches for packet-data
	if(length != 3) {
    cb64:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    cb68:	06 24       	jz	$+14     	;abs 0xcb76
		send_status_packet(PACKET_RETURN_INAVLID_DATA);
    cb6a:	6f 42       	mov.b	#4,	r15	;r2 As==10
    cb6c:	b0 12 a0 c9 	call	#0xc9a0	
		return PACKET_STAT_ERR_DATA;
    cb70:	3b 40 fc ff 	mov	#-4,	r11	;#0xfffc
    cb74:	12 3c       	jmp	$+38     	;abs 0xcb9a
	}

	packet_data_in_pwm_function *pd = (packet_data_in_pwm_function *)&data[0];

	int p = (0x00FF & pd->period_lsb) | (0xFF00 & (pd->period_msb << 8));
    cb76:	5f 4e 02 00 	mov.b	2(r14),	r15	;0x0002(r14)
    cb7a:	8f 10       	swpb	r15		
    cb7c:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)

	if((s = pin_pwm_function(pd->pin, p)) != PACKET_STAT_OK) {
    cb80:	0e df       	bis	r15,	r14	
    cb82:	6f 4d       	mov.b	@r13,	r15	
    cb84:	b0 12 a2 c7 	call	#0xc7a2	
    cb88:	0b 4f       	mov	r15,	r11	
    cb8a:	0f 93       	tst	r15		
    cb8c:	03 24       	jz	$+8      	;abs 0xcb94
		send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    cb8e:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    cb92:	01 3c       	jmp	$+4      	;abs 0xcb96
	}
	else {
		send_status_packet(PACKET_RETURN_ACK);
    cb94:	5f 43       	mov.b	#1,	r15	;r3 As==01
    cb96:	b0 12 a0 c9 	call	#0xc9a0	
	}

	return s;
}
    cb9a:	0f 4b       	mov	r11,	r15	
    cb9c:	3b 41       	pop	r11		
    cb9e:	30 41       	ret			

0000cba0 <handle_packet_pwm_control>:

int handle_packet_pwm_control(unsigned char length, unsigned char *data)
{
    cba0:	0b 12       	push	r11		
    cba2:	0d 4e       	mov	r14,	r13	
	int s;

	// check if length matches for packet-data
	if(length != 2) {
    cba4:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    cba6:	06 24       	jz	$+14     	;abs 0xcbb4
		send_status_packet(PACKET_RETURN_INAVLID_DATA);
    cba8:	6f 42       	mov.b	#4,	r15	;r2 As==10
    cbaa:	b0 12 a0 c9 	call	#0xc9a0	
		return PACKET_STAT_ERR_DATA;
    cbae:	3b 40 fc ff 	mov	#-4,	r11	;#0xfffc
    cbb2:	0e 3c       	jmp	$+30     	;abs 0xcbd0
	}

	packet_data_in_pwm_control *pd = (packet_data_in_pwm_control *)&data[0];

	if((s = pin_pwm_control(pd->pin, pd->duty_cycle)) != PACKET_STAT_OK) {
    cbb4:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    cbb8:	6f 4d       	mov.b	@r13,	r15	
    cbba:	b0 12 0e c8 	call	#0xc80e	
    cbbe:	0b 4f       	mov	r15,	r11	
    cbc0:	0f 93       	tst	r15		
    cbc2:	03 24       	jz	$+8      	;abs 0xcbca
		send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    cbc4:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    cbc8:	01 3c       	jmp	$+4      	;abs 0xcbcc
	}
	else {
		send_status_packet(PACKET_RETURN_ACK);
    cbca:	5f 43       	mov.b	#1,	r15	;r3 As==01
    cbcc:	b0 12 a0 c9 	call	#0xc9a0	
	}

	return s;
}
    cbd0:	0f 4b       	mov	r11,	r15	
    cbd2:	3b 41       	pop	r11		
    cbd4:	30 41       	ret			

0000cbd6 <handle_packet_serial_function>:

int handle_packet_serial_function(unsigned char length, unsigned char *data)
{
	// TODO define + implement
	send_status_packet(PACKET_RETURN_UNKNOWN);
    cbd6:	4f 43       	clr.b	r15		
    cbd8:	b0 12 a0 c9 	call	#0xc9a0	

	return PACKET_STAT_OK;
}
    cbdc:	0f 43       	clr	r15		
    cbde:	30 41       	ret			

0000cbe0 <handle_packet_serial_data>:

int handle_packet_serial_data(unsigned char length, unsigned char *data)
{
	// TODO define + implement
	send_status_packet(PACKET_RETURN_UNKNOWN);
    cbe0:	4f 43       	clr.b	r15		
    cbe2:	b0 12 a0 c9 	call	#0xc9a0	

	return PACKET_STAT_OK;
}
    cbe6:	0f 43       	clr	r15		
    cbe8:	30 41       	ret			

0000cbea <handle_packet_external_interrupt_function>:

int handle_packet_external_interrupt_function(unsigned char length, unsigned char *data)
{
    cbea:	0b 12       	push	r11		
    cbec:	0d 4e       	mov	r14,	r13	
	int s;

	// check if length matches for packet-data
	if(length != 2) {
    cbee:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    cbf0:	06 24       	jz	$+14     	;abs 0xcbfe
		send_status_packet(PACKET_RETURN_INAVLID_DATA);
    cbf2:	6f 42       	mov.b	#4,	r15	;r2 As==10
    cbf4:	b0 12 a0 c9 	call	#0xc9a0	
		return PACKET_STAT_ERR_DATA;
    cbf8:	3f 40 fc ff 	mov	#-4,	r15	;#0xfffc
    cbfc:	12 3c       	jmp	$+38     	;abs 0xcc22
	}

	packet_data_in_external_interrupt_function *pd = (packet_data_in_external_interrupt_function *)&data[0];

	if((s = pin_exti_function(pd->pin, pd->function)) != PACKET_STAT_OK) {
    cbfe:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    cc02:	6f 4d       	mov.b	@r13,	r15	
    cc04:	b0 12 dc c8 	call	#0xc8dc	
    cc08:	0b 4f       	mov	r15,	r11	
    cc0a:	0f 93       	tst	r15		
    cc0c:	06 24       	jz	$+14     	;abs 0xcc1a
		send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
    cc0e:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    cc12:	b0 12 a0 c9 	call	#0xc9a0	
	}
	else {
		send_status_packet(PACKET_RETURN_ACK);
	}

	return PACKET_STAT_OK;
    cc16:	0f 43       	clr	r15		
    cc18:	04 3c       	jmp	$+10     	;abs 0xcc22

	if((s = pin_exti_function(pd->pin, pd->function)) != PACKET_STAT_OK) {
		send_status_packet(PACKET_RETURN_INVALID_PIN_COMMAND);
	}
	else {
		send_status_packet(PACKET_RETURN_ACK);
    cc1a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    cc1c:	b0 12 a0 c9 	call	#0xc9a0	
	}

	return PACKET_STAT_OK;
    cc20:	0f 4b       	mov	r11,	r15	
}
    cc22:	3b 41       	pop	r11		
    cc24:	30 41       	ret			

0000cc26 <handle_packet_reset>:
#include <legacymsp430.h>

#include "rocketcore.h"

int handle_packet_reset(unsigned char length, unsigned char *data)
{
    cc26:	21 82       	sub	#4,	r1	;r2 As==10
	send_status_packet(PACKET_RETURN_ACK);
    cc28:	5f 43       	mov.b	#1,	r15	;r3 As==01
    cc2a:	b0 12 a0 c9 	call	#0xc9a0	
	
	// give send packet some time before we reset ...
	volatile unsigned long i = 10000;
    cc2e:	b1 40 10 27 	mov	#10000,	0(r1)	;#0x2710, 0x0000(r1)
    cc32:	00 00 
    cc34:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)

	do (i--);
    cc38:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    cc3c:	b1 63 02 00 	addc	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
	while (i != 0);
    cc40:	2e 41       	mov	@r1,	r14	
    cc42:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    cc46:	0e 93       	tst	r14		
    cc48:	f7 23       	jnz	$-16     	;abs 0xcc38
    cc4a:	0f 93       	tst	r15		
    cc4c:	f5 23       	jnz	$-20     	;abs 0xcc38
	
	// make watchdog bite ...
	WDTCTL = 0;
    cc4e:	82 4e 20 01 	mov	r14,	&0x0120	

	return PACKET_STAT_OK;
}
    cc52:	0f 4e       	mov	r14,	r15	
    cc54:	21 52       	add	#4,	r1	;r2 As==10
    cc56:	30 41       	ret			

0000cc58 <PORT1_ISR>:

interrupt(PORT1_VECTOR) PORT1_ISR(void)
{
    cc58:	0f 12       	push	r15		
    cc5a:	0e 12       	push	r14		
    cc5c:	0d 12       	push	r13		
    cc5e:	0c 12       	push	r12		
    cc60:	0b 12       	push	r11		
    cc62:	0a 12       	push	r10		
    cc64:	09 12       	push	r9		
	unsigned char i;
	unsigned char bit;

	packet_data_out_digital_pin_read *pdo = (packet_data_out_digital_pin_read *)&outp.data[0];
    cc66:	39 40 11 03 	mov	#785,	r9	;#0x0311

	outp.start	= PACKET_OUTBOUND_START_IR;
    cc6a:	f2 40 21 00 	mov.b	#33,	&0x030e	;#0x0021
    cc6e:	0e 03 
	outp.length	= 6;
    cc70:	f2 40 06 00 	mov.b	#6,	&0x030f	;#0x0006
    cc74:	0f 03 
	outp.type 	= PACKET_OUT_DIGITAL_PIN_READ;
    cc76:	f2 40 03 00 	mov.b	#3,	&0x0310	;#0x0003
    cc7a:	10 03 
    cc7c:	0b 43       	clr	r11		
	
	for(i = 0; i < 8; i++) {
	
		bit = 0x01 << i;
    cc7e:	1a 43       	mov	#1,	r10	;r3 As==01
    cc80:	0e 4b       	mov	r11,	r14	
    cc82:	0f 4a       	mov	r10,	r15	
    cc84:	0e 93       	tst	r14		
    cc86:	03 24       	jz	$+8      	;abs 0xcc8e
    cc88:	0f 5f       	rla	r15		
    cc8a:	1e 83       	dec	r14		
    cc8c:	fd 23       	jnz	$-4      	;abs 0xcc88

		if((P1IE & bit) == bit && (P1IFG & bit) == bit) {
    cc8e:	4e 4f       	mov.b	r15,	r14	
    cc90:	5e f2 25 00 	and.b	&0x0025,r14	
    cc94:	4e 9f       	cmp.b	r15,	r14	
    cc96:	1d 20       	jnz	$+60     	;abs 0xccd2
    cc98:	4f 4e       	mov.b	r14,	r15	
    cc9a:	5f f2 23 00 	and.b	&0x0023,r15	
    cc9e:	4f 9e       	cmp.b	r14,	r15	
    cca0:	18 20       	jnz	$+50     	;abs 0xccd2

			P1IFG &= ~bit;			// reset IR flag
    cca2:	c2 cf 23 00 	bic.b	r15,	&0x0023	

			pdo->pin   = PIN_1_0 + i;
    cca6:	4e 4b       	mov.b	r11,	r14	
    cca8:	7e 50 10 00 	add.b	#16,	r14	;#0x0010
    ccac:	c2 4e 11 03 	mov.b	r14,	&0x0311	
			pdo->state = ((P1IES & bit) ? 0 : 1);
    ccb0:	5f f2 24 00 	and.b	&0x0024,r15	
    ccb4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    ccb6:	01 24       	jz	$+4      	;abs 0xccba
    ccb8:	4e 43       	clr.b	r14		
    ccba:	c9 4e 01 00 	mov.b	r14,	1(r9)	;0x0001(r9)

			outp.crc = packet_calc_crc(&outp);
    ccbe:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    ccc2:	b0 12 78 cd 	call	#0xcd78	
    ccc6:	c2 4f 51 03 	mov.b	r15,	&0x0351	

			packet_send(&outp);
    ccca:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    ccce:	b0 12 b8 cd 	call	#0xcdb8	
    ccd2:	1b 53       	inc	r11		

	outp.start	= PACKET_OUTBOUND_START_IR;
	outp.length	= 6;
	outp.type 	= PACKET_OUT_DIGITAL_PIN_READ;
	
	for(i = 0; i < 8; i++) {
    ccd4:	3b 92       	cmp	#8,	r11	;r2 As==11
    ccd6:	d4 23       	jnz	$-86     	;abs 0xcc80
			outp.crc = packet_calc_crc(&outp);

			packet_send(&outp);
		}
	}
}
    ccd8:	39 41       	pop	r9		
    ccda:	3a 41       	pop	r10		
    ccdc:	3b 41       	pop	r11		
    ccde:	3c 41       	pop	r12		
    cce0:	3d 41       	pop	r13		
    cce2:	3e 41       	pop	r14		
    cce4:	3f 41       	pop	r15		
    cce6:	00 13       	reti			

0000cce8 <PORT2_ISR>:

interrupt(PORT2_VECTOR) PORT2_ISR(void)
{
    cce8:	0f 12       	push	r15		
    ccea:	0e 12       	push	r14		
    ccec:	0d 12       	push	r13		
    ccee:	0c 12       	push	r12		
    ccf0:	0b 12       	push	r11		
    ccf2:	0a 12       	push	r10		
    ccf4:	09 12       	push	r9		
	unsigned char i;
	unsigned char bit;

	packet_data_out_digital_pin_read *pdo = (packet_data_out_digital_pin_read *)&outp.data[0];
    ccf6:	39 40 11 03 	mov	#785,	r9	;#0x0311

	outp.start	= PACKET_OUTBOUND_START_IR;
    ccfa:	f2 40 21 00 	mov.b	#33,	&0x030e	;#0x0021
    ccfe:	0e 03 
	outp.length	= 6;
    cd00:	f2 40 06 00 	mov.b	#6,	&0x030f	;#0x0006
    cd04:	0f 03 
	outp.type 	= PACKET_OUT_DIGITAL_PIN_READ;
    cd06:	f2 40 03 00 	mov.b	#3,	&0x0310	;#0x0003
    cd0a:	10 03 
    cd0c:	0b 43       	clr	r11		
	
	for(i = 0; i < 8; i++) {
	
		bit = 0x01 << i;
    cd0e:	1a 43       	mov	#1,	r10	;r3 As==01
    cd10:	0e 4b       	mov	r11,	r14	
    cd12:	0f 4a       	mov	r10,	r15	
    cd14:	0e 93       	tst	r14		
    cd16:	03 24       	jz	$+8      	;abs 0xcd1e
    cd18:	0f 5f       	rla	r15		
    cd1a:	1e 83       	dec	r14		
    cd1c:	fd 23       	jnz	$-4      	;abs 0xcd18

		if((P2IE & bit) == bit && (P2IFG & bit) == bit) {
    cd1e:	4e 4f       	mov.b	r15,	r14	
    cd20:	5e f2 2d 00 	and.b	&0x002d,r14	
    cd24:	4e 9f       	cmp.b	r15,	r14	
    cd26:	1d 20       	jnz	$+60     	;abs 0xcd62
    cd28:	4f 4e       	mov.b	r14,	r15	
    cd2a:	5f f2 2b 00 	and.b	&0x002b,r15	
    cd2e:	4f 9e       	cmp.b	r14,	r15	
    cd30:	18 20       	jnz	$+50     	;abs 0xcd62
			P2IFG &= ~bit;			// reset IR flag
    cd32:	c2 cf 2b 00 	bic.b	r15,	&0x002b	

			pdo->pin   = PIN_2_0 + i;
    cd36:	4e 4b       	mov.b	r11,	r14	
    cd38:	7e 50 20 00 	add.b	#32,	r14	;#0x0020
    cd3c:	c2 4e 11 03 	mov.b	r14,	&0x0311	
			pdo->state = ((P2IES & bit) ? 0 : 1);
    cd40:	5f f2 2c 00 	and.b	&0x002c,r15	
    cd44:	5e 43       	mov.b	#1,	r14	;r3 As==01
    cd46:	01 24       	jz	$+4      	;abs 0xcd4a
    cd48:	4e 43       	clr.b	r14		
    cd4a:	c9 4e 01 00 	mov.b	r14,	1(r9)	;0x0001(r9)

			outp.crc = packet_calc_crc(&outp);
    cd4e:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    cd52:	b0 12 78 cd 	call	#0xcd78	
    cd56:	c2 4f 51 03 	mov.b	r15,	&0x0351	

			packet_send(&outp);
    cd5a:	3f 40 0e 03 	mov	#782,	r15	;#0x030e
    cd5e:	b0 12 b8 cd 	call	#0xcdb8	
    cd62:	1b 53       	inc	r11		

	outp.start	= PACKET_OUTBOUND_START_IR;
	outp.length	= 6;
	outp.type 	= PACKET_OUT_DIGITAL_PIN_READ;
	
	for(i = 0; i < 8; i++) {
    cd64:	3b 92       	cmp	#8,	r11	;r2 As==11
    cd66:	d4 23       	jnz	$-86     	;abs 0xcd10
			outp.crc = packet_calc_crc(&outp);

			packet_send(&outp);
		}
	}
}
    cd68:	39 41       	pop	r9		
    cd6a:	3a 41       	pop	r10		
    cd6c:	3b 41       	pop	r11		
    cd6e:	3c 41       	pop	r12		
    cd70:	3d 41       	pop	r13		
    cd72:	3e 41       	pop	r14		
    cd74:	3f 41       	pop	r15		
    cd76:	00 13       	reti			

0000cd78 <packet_calc_crc>:
 * 02111-1307 USA.  
 */

#include "packet.h"

unsigned char packet_calc_crc(packet *pkt) {
    cd78:	0b 12       	push	r11		

	unsigned char i;
	unsigned char crc = 0;

	crc += pkt->start;
	crc += pkt->length;
    cd7a:	5d 4f 01 00 	mov.b	1(r15),	r13	;0x0001(r15)
    cd7e:	6e 4f       	mov.b	@r15,	r14	
    cd80:	4e 5d       	add.b	r13,	r14	
	crc += pkt->type;
    cd82:	5e 5f 02 00 	add.b	2(r15),	r14	;0x0002(r15)

	for(i = 0; i < pkt->length - 4; i++) {
    cd86:	4c 43       	clr.b	r12		
    cd88:	2d 82       	sub	#4,	r13	;r2 As==10
    cd8a:	04 3c       	jmp	$+10     	;abs 0xcd94
		crc += pkt->data[i];
    cd8c:	0b 5f       	add	r15,	r11	
    cd8e:	5e 5b 03 00 	add.b	3(r11),	r14	;0x0003(r11)

	crc += pkt->start;
	crc += pkt->length;
	crc += pkt->type;

	for(i = 0; i < pkt->length - 4; i++) {
    cd92:	5c 53       	inc.b	r12		
    cd94:	4b 4c       	mov.b	r12,	r11	
    cd96:	0b 9d       	cmp	r13,	r11	
    cd98:	f9 3b       	jl	$-12     	;abs 0xcd8c
		crc += pkt->data[i];
	} 

	return crc;
}
    cd9a:	4f 4e       	mov.b	r14,	r15	
    cd9c:	3b 41       	pop	r11		
    cd9e:	30 41       	ret			

0000cda0 <packet_check_crc>:

int	packet_check_crc(packet *pkt) {
    cda0:	0b 12       	push	r11		
    cda2:	0b 4f       	mov	r15,	r11	

	if(packet_calc_crc(pkt) == pkt->crc) {
    cda4:	b0 12 78 cd 	call	#0xcd78	
		return 1;
    cda8:	1e 43       	mov	#1,	r14	;r3 As==01
    cdaa:	5f 9b 43 00 	cmp.b	67(r11),r15	;0x0043(r11)
    cdae:	01 24       	jz	$+4      	;abs 0xcdb2
    cdb0:	0e 43       	clr	r14		
	}

	return 0;
}
    cdb2:	0f 4e       	mov	r14,	r15	
    cdb4:	3b 41       	pop	r11		
    cdb6:	30 41       	ret			

0000cdb8 <packet_send>:

int packet_send(packet *pkt) {
    cdb8:	0b 12       	push	r11		
    cdba:	0a 12       	push	r10		
    cdbc:	0b 4f       	mov	r15,	r11	

	unsigned char  i;

	// check length
	if(pkt->length - 4 > PACKET_MAX_DATA) {
    cdbe:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    cdc2:	3f 90 45 00 	cmp	#69,	r15	;#0x0045
    cdc6:	1f 34       	jge	$+64     	;abs 0xce06
		return PACKET_STAT_ERR_LENGTH;
	}
 
	// write start byte
	packet_byte_to_sendq(pkt->start);
    cdc8:	6f 4b       	mov.b	@r11,	r15	
    cdca:	b0 12 a8 c0 	call	#0xc0a8	

	// write length
	packet_byte_to_sendq(pkt->length);
    cdce:	5f 4b 01 00 	mov.b	1(r11),	r15	;0x0001(r11)
    cdd2:	b0 12 a8 c0 	call	#0xc0a8	

	// write type
	packet_byte_to_sendq(pkt->type);
    cdd6:	5f 4b 02 00 	mov.b	2(r11),	r15	;0x0002(r11)
    cdda:	b0 12 a8 c0 	call	#0xc0a8	

	// write data
	for(i = 0; i < pkt->length - 4; i++) {	
    cdde:	4a 43       	clr.b	r10		
    cde0:	06 3c       	jmp	$+14     	;abs 0xcdee
		packet_byte_to_sendq(pkt->data[i]); 
    cde2:	0e 5b       	add	r11,	r14	
    cde4:	5f 4e 03 00 	mov.b	3(r14),	r15	;0x0003(r14)
    cde8:	b0 12 a8 c0 	call	#0xc0a8	

	// write type
	packet_byte_to_sendq(pkt->type);

	// write data
	for(i = 0; i < pkt->length - 4; i++) {	
    cdec:	5a 53       	inc.b	r10		
    cdee:	4e 4a       	mov.b	r10,	r14	
    cdf0:	5f 4b 01 00 	mov.b	1(r11),	r15	;0x0001(r11)
    cdf4:	2f 82       	sub	#4,	r15	;r2 As==10
    cdf6:	0e 9f       	cmp	r15,	r14	
    cdf8:	f4 3b       	jl	$-22     	;abs 0xcde2
		packet_byte_to_sendq(pkt->data[i]); 
	}

	// write crc 
	packet_byte_to_sendq(pkt->crc);
    cdfa:	5f 4b 43 00 	mov.b	67(r11),r15	;0x0043(r11)
    cdfe:	b0 12 a8 c0 	call	#0xc0a8	
	
	return PACKET_STAT_OK;
    ce02:	0f 43       	clr	r15		
    ce04:	01 3c       	jmp	$+4      	;abs 0xce08

	unsigned char  i;

	// check length
	if(pkt->length - 4 > PACKET_MAX_DATA) {
		return PACKET_STAT_ERR_LENGTH;
    ce06:	3f 43       	mov	#-1,	r15	;r3 As==11

	// write crc 
	packet_byte_to_sendq(pkt->crc);
	
	return PACKET_STAT_OK;
}
    ce08:	3a 41       	pop	r10		
    ce0a:	3b 41       	pop	r11		
    ce0c:	30 41       	ret			

0000ce0e <packet_receive>:

int packet_receive(packet *pkt, unsigned char start) {
    ce0e:	0b 12       	push	r11		
    ce10:	0a 12       	push	r10		
    ce12:	09 12       	push	r9		
    ce14:	0b 4f       	mov	r15,	r11	
    ce16:	4a 4e       	mov.b	r14,	r10	

	unsigned char  i;

	// discard everything until start byte found in buffer
	while(packet_byte_from_rcvq() != start);
    ce18:	b0 12 ce c0 	call	#0xc0ce	
    ce1c:	4f 9a       	cmp.b	r10,	r15	
    ce1e:	fc 23       	jnz	$-6      	;abs 0xce18

	pkt->start = start;
    ce20:	cb 4a 00 00 	mov.b	r10,	0(r11)	;0x0000(r11)

	// read length
	pkt->length = packet_byte_from_rcvq();
    ce24:	b0 12 ce c0 	call	#0xc0ce	
    ce28:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
	
	// check length
	if(pkt->length - 4 > PACKET_MAX_DATA) {
    ce2c:	4f 4f       	mov.b	r15,	r15	
    ce2e:	3f 90 45 00 	cmp	#69,	r15	;#0x0045
    ce32:	1d 34       	jge	$+60     	;abs 0xce6e
		return PACKET_STAT_ERR_LENGTH;
	}
 
	// read type
	pkt->type = packet_byte_from_rcvq();
    ce34:	b0 12 ce c0 	call	#0xc0ce	
    ce38:	cb 4f 02 00 	mov.b	r15,	2(r11)	;0x0002(r11)
 	
	// read data
	for(i = 0; i < pkt->length - 4; i++) {	
    ce3c:	4a 43       	clr.b	r10		
    ce3e:	06 3c       	jmp	$+14     	;abs 0xce4c
		pkt->data[i] = packet_byte_from_rcvq();
    ce40:	b0 12 ce c0 	call	#0xc0ce	
    ce44:	09 5b       	add	r11,	r9	
    ce46:	c9 4f 03 00 	mov.b	r15,	3(r9)	;0x0003(r9)
 
	// read type
	pkt->type = packet_byte_from_rcvq();
 	
	// read data
	for(i = 0; i < pkt->length - 4; i++) {	
    ce4a:	5a 53       	inc.b	r10		
    ce4c:	49 4a       	mov.b	r10,	r9	
    ce4e:	5f 4b 01 00 	mov.b	1(r11),	r15	;0x0001(r11)
    ce52:	2f 82       	sub	#4,	r15	;r2 As==10
    ce54:	09 9f       	cmp	r15,	r9	
    ce56:	f4 3b       	jl	$-22     	;abs 0xce40
		pkt->data[i] = packet_byte_from_rcvq();
	}
	
	// read crc 
	pkt->crc = packet_byte_from_rcvq();
    ce58:	b0 12 ce c0 	call	#0xc0ce	
    ce5c:	cb 4f 43 00 	mov.b	r15,	67(r11)	;0x0043(r11)
	
	// check crc
	if(!packet_check_crc(pkt)) {
    ce60:	0f 4b       	mov	r11,	r15	
    ce62:	b0 12 a0 cd 	call	#0xcda0	
    ce66:	0f 93       	tst	r15		
    ce68:	04 20       	jnz	$+10     	;abs 0xce72
		return PACKET_STAT_ERR_CRC;
    ce6a:	2f 83       	decd	r15		
    ce6c:	03 3c       	jmp	$+8      	;abs 0xce74
	// read length
	pkt->length = packet_byte_from_rcvq();
	
	// check length
	if(pkt->length - 4 > PACKET_MAX_DATA) {
		return PACKET_STAT_ERR_LENGTH;
    ce6e:	3f 43       	mov	#-1,	r15	;r3 As==11
    ce70:	01 3c       	jmp	$+4      	;abs 0xce74
	// check crc
	if(!packet_check_crc(pkt)) {
		return PACKET_STAT_ERR_CRC;
	}

	return PACKET_STAT_OK;
    ce72:	0f 43       	clr	r15		
}
    ce74:	39 41       	pop	r9		
    ce76:	3a 41       	pop	r10		
    ce78:	3b 41       	pop	r11		
    ce7a:	30 41       	ret			

0000ce7c <packet_process_received>:

int packet_process_received(packet_rcv_handlers *rh, packet *pkt) {
    ce7c:	0b 12       	push	r11		
    ce7e:	0a 12       	push	r10		
    ce80:	0c 4e       	mov	r14,	r12	

	int i;

    for(i = 0; i < rh->count; i++) {
    ce82:	6b 4f       	mov.b	@r15,	r11	
	}

	return PACKET_STAT_OK;
}

int packet_process_received(packet_rcv_handlers *rh, packet *pkt) {
    ce84:	0e 4f       	mov	r15,	r14	
    ce86:	2e 53       	incd	r14		

	int i;

    for(i = 0; i < rh->count; i++) {
    ce88:	0d 43       	clr	r13		
    ce8a:	11 3c       	jmp	$+36     	;abs 0xceae
		if(rh->handlers[i].type == pkt->type) {
    ce8c:	6a 4e       	mov.b	@r14,	r10	
    ce8e:	2e 52       	add	#4,	r14	;r2 As==10
    ce90:	1d 53       	inc	r13		
    ce92:	5a 9c 02 00 	cmp.b	2(r12),	r10	;0x0002(r12)
    ce96:	0b 20       	jnz	$+24     	;abs 0xceae
			// call handler function
    		return (rh->handlers[i].func)(pkt->length - 4, pkt->data);
    ce98:	0d 5d       	rla	r13		
    ce9a:	0d 5d       	rla	r13		
    ce9c:	0d 5f       	add	r15,	r13	
    ce9e:	0e 4c       	mov	r12,	r14	
    cea0:	3e 50 03 00 	add	#3,	r14	;#0x0003
    cea4:	5f 4c 01 00 	mov.b	1(r12),	r15	;0x0001(r12)
    cea8:	6f 82       	sub.b	#4,	r15	;r2 As==10
    ceaa:	ad 12       	call	@r13		
    ceac:	04 3c       	jmp	$+10     	;abs 0xceb6

int packet_process_received(packet_rcv_handlers *rh, packet *pkt) {

	int i;

    for(i = 0; i < rh->count; i++) {
    ceae:	0d 9b       	cmp	r11,	r13	
    ceb0:	ed 3b       	jl	$-36     	;abs 0xce8c
			// call handler function
    		return (rh->handlers[i].func)(pkt->length - 4, pkt->data);
		}
    }

	return PACKET_STAT_ERR_UNKPACK;
    ceb2:	3f 40 fd ff 	mov	#-3,	r15	;#0xfffd
}
    ceb6:	3a 41       	pop	r10		
    ceb8:	3b 41       	pop	r11		
    ceba:	30 41       	ret			

0000cebc <__fixunssfsi>:
    cebc:	0b 12       	push	r11		
    cebe:	0a 12       	push	r10		
    cec0:	0a 4e       	mov	r14,	r10	
    cec2:	0b 4f       	mov	r15,	r11	
    cec4:	0c 43       	clr	r12		
    cec6:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    ceca:	b0 12 ae d5 	call	#0xd5ae	
    cece:	0f 93       	tst	r15		
    ced0:	07 34       	jge	$+16     	;abs 0xcee0
    ced2:	0e 4a       	mov	r10,	r14	
    ced4:	0f 4b       	mov	r11,	r15	
    ced6:	b0 12 a0 d6 	call	#0xd6a0	
    ceda:	3a 41       	pop	r10		
    cedc:	3b 41       	pop	r11		
    cede:	30 41       	ret			
    cee0:	0c 43       	clr	r12		
    cee2:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    cee6:	0e 4a       	mov	r10,	r14	
    cee8:	0f 4b       	mov	r11,	r15	
    ceea:	b0 12 fc d1 	call	#0xd1fc	
    ceee:	b0 12 a0 d6 	call	#0xd6a0	
    cef2:	0e 53       	add	#0,	r14	;r3 As==00
    cef4:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    cef8:	3a 41       	pop	r10		
    cefa:	3b 41       	pop	r11		
    cefc:	30 41       	ret			

0000cefe <_fpadd_parts>:
    cefe:	0b 12       	push	r11		
    cf00:	0a 12       	push	r10		
    cf02:	09 12       	push	r9		
    cf04:	08 12       	push	r8		
    cf06:	07 12       	push	r7		
    cf08:	06 12       	push	r6		
    cf0a:	05 12       	push	r5		
    cf0c:	04 12       	push	r4		
    cf0e:	31 82       	sub	#8,	r1	;r2 As==11
    cf10:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    cf14:	06 4d       	mov	r13,	r6	
    cf16:	6b 4f       	mov.b	@r15,	r11	
    cf18:	59 43       	mov.b	#1,	r9	;r3 As==01
    cf1a:	49 9b       	cmp.b	r11,	r9	
    cf1c:	aa 2c       	jc	$+342    	;abs 0xd072
    cf1e:	6c 4e       	mov.b	@r14,	r12	
    cf20:	49 9c       	cmp.b	r12,	r9	
    cf22:	02 28       	jnc	$+6      	;abs 0xcf28
    cf24:	30 40 38 d1 	br	#0xd138	
    cf28:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    cf2a:	02 20       	jnz	$+6      	;abs 0xcf30
    cf2c:	30 40 9a d1 	br	#0xd19a	
    cf30:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    cf32:	02 20       	jnz	$+6      	;abs 0xcf38
    cf34:	30 40 38 d1 	br	#0xd138	
    cf38:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cf3a:	c4 24       	jz	$+394    	;abs 0xd0c4
    cf3c:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    cf3e:	02 20       	jnz	$+6      	;abs 0xcf44
    cf40:	30 40 38 d1 	br	#0xd138	
    cf44:	91 4f 02 00 	mov	2(r15),	2(r1)	;0x0002(r15), 0x0002(r1)
    cf48:	02 00 
    cf4a:	2c 41       	mov	@r1,	r12	
    cf4c:	1b 4c 02 00 	mov	2(r12),	r11	;0x0002(r12)
    cf50:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    cf54:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    cf58:	17 4c 04 00 	mov	4(r12),	r7	;0x0004(r12)
    cf5c:	18 4c 06 00 	mov	6(r12),	r8	;0x0006(r12)
    cf60:	1c 41 02 00 	mov	2(r1),	r12	;0x0002(r1)
    cf64:	0c 8b       	sub	r11,	r12	
    cf66:	09 4c       	mov	r12,	r9	
    cf68:	d9 30       	jn	$+436    	;abs 0xd11c
    cf6a:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    cf6e:	8b 34       	jge	$+280    	;abs 0xd086
    cf70:	1c 93       	cmp	#1,	r12	;r3 As==01
    cf72:	02 34       	jge	$+6      	;abs 0xcf78
    cf74:	30 40 3c d1 	br	#0xd13c	
    cf78:	0e 49       	mov	r9,	r14	
    cf7a:	0a 47       	mov	r7,	r10	
    cf7c:	0b 48       	mov	r8,	r11	
    cf7e:	0e 93       	tst	r14		
    cf80:	05 24       	jz	$+12     	;abs 0xcf8c
    cf82:	12 c3       	clrc			
    cf84:	0b 10       	rrc	r11		
    cf86:	0a 10       	rrc	r10		
    cf88:	1e 83       	dec	r14		
    cf8a:	fb 23       	jnz	$-8      	;abs 0xcf82
    cf8c:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    cf90:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    cf94:	1c 43       	mov	#1,	r12	;r3 As==01
    cf96:	0d 43       	clr	r13		
    cf98:	0e 49       	mov	r9,	r14	
    cf9a:	09 4c       	mov	r12,	r9	
    cf9c:	0a 4d       	mov	r13,	r10	
    cf9e:	0e 93       	tst	r14		
    cfa0:	04 24       	jz	$+10     	;abs 0xcfaa
    cfa2:	09 59       	rla	r9		
    cfa4:	0a 6a       	rlc	r10		
    cfa6:	1e 83       	dec	r14		
    cfa8:	fc 23       	jnz	$-6      	;abs 0xcfa2
    cfaa:	39 53       	add	#-1,	r9	;r3 As==11
    cfac:	3a 63       	addc	#-1,	r10	;r3 As==11
    cfae:	09 f7       	and	r7,	r9	
    cfb0:	0a f8       	and	r8,	r10	
    cfb2:	09 93       	tst	r9		
    cfb4:	b9 24       	jz	$+372    	;abs 0xd128
    cfb6:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    cfba:	18 41 06 00 	mov	6(r1),	r8	;0x0006(r1)
    cfbe:	07 dc       	bis	r12,	r7	
    cfc0:	08 dd       	bis	r13,	r8	
    cfc2:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    cfc6:	2c 41       	mov	@r1,	r12	
    cfc8:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    cfcc:	67 24       	jz	$+208    	;abs 0xd09c
    cfce:	4f 93       	tst.b	r15		
    cfd0:	9b 24       	jz	$+312    	;abs 0xd108
    cfd2:	0c 47       	mov	r7,	r12	
    cfd4:	0d 48       	mov	r8,	r13	
    cfd6:	0c 84       	sub	r4,	r12	
    cfd8:	0d 75       	subc	r5,	r13	
    cfda:	0d 93       	tst	r13		
    cfdc:	89 34       	jge	$+276    	;abs 0xd0f0
    cfde:	d6 43 01 00 	mov.b	#1,	1(r6)	;r3 As==01, 0x0001(r6)
    cfe2:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    cfe6:	02 00 
    cfe8:	0e 4c       	mov	r12,	r14	
    cfea:	0f 4d       	mov	r13,	r15	
    cfec:	3e e3       	inv	r14		
    cfee:	3f e3       	inv	r15		
    cff0:	1e 53       	inc	r14		
    cff2:	0f 63       	adc	r15		
    cff4:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    cff8:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    cffc:	0c 4e       	mov	r14,	r12	
    cffe:	0d 4f       	mov	r15,	r13	
    d000:	3c 53       	add	#-1,	r12	;r3 As==11
    d002:	3d 63       	addc	#-1,	r13	;r3 As==11
    d004:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d008:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d00c:	0a 9d       	cmp	r13,	r10	
    d00e:	1a 28       	jnc	$+54     	;abs 0xd044
    d010:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d014:	8e 24       	jz	$+286    	;abs 0xd132
    d016:	1b 46 02 00 	mov	2(r6),	r11	;0x0002(r6)
    d01a:	3b 53       	add	#-1,	r11	;r3 As==11
    d01c:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d020:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d024:	0e 5e       	rla	r14		
    d026:	0f 6f       	rlc	r15		
    d028:	08 4b       	mov	r11,	r8	
    d02a:	3b 53       	add	#-1,	r11	;r3 As==11
    d02c:	0c 4e       	mov	r14,	r12	
    d02e:	0d 4f       	mov	r15,	r13	
    d030:	3c 53       	add	#-1,	r12	;r3 As==11
    d032:	3d 63       	addc	#-1,	r13	;r3 As==11
    d034:	0a 9d       	cmp	r13,	r10	
    d036:	40 2c       	jc	$+130    	;abs 0xd0b8
    d038:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d03c:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d040:	86 48 02 00 	mov	r8,	2(r6)	;0x0002(r6)
    d044:	f6 40 03 00 	mov.b	#3,	0(r6)	;#0x0003, 0x0000(r6)
    d048:	00 00 
    d04a:	0f 93       	tst	r15		
    d04c:	11 34       	jge	$+36     	;abs 0xd070
    d04e:	0c 4e       	mov	r14,	r12	
    d050:	0d 4f       	mov	r15,	r13	
    d052:	1c f3       	and	#1,	r12	;r3 As==01
    d054:	0d f3       	and	#0,	r13	;r3 As==00
    d056:	12 c3       	clrc			
    d058:	0f 10       	rrc	r15		
    d05a:	0e 10       	rrc	r14		
    d05c:	0a 4c       	mov	r12,	r10	
    d05e:	0b 4d       	mov	r13,	r11	
    d060:	0a de       	bis	r14,	r10	
    d062:	0b df       	bis	r15,	r11	
    d064:	86 4a 04 00 	mov	r10,	4(r6)	;0x0004(r6)
    d068:	86 4b 06 00 	mov	r11,	6(r6)	;0x0006(r6)
    d06c:	96 53 02 00 	inc	2(r6)		;0x0002(r6)
    d070:	0f 46       	mov	r6,	r15	
    d072:	31 52       	add	#8,	r1	;r2 As==11
    d074:	34 41       	pop	r4		
    d076:	35 41       	pop	r5		
    d078:	36 41       	pop	r6		
    d07a:	37 41       	pop	r7		
    d07c:	38 41       	pop	r8		
    d07e:	39 41       	pop	r9		
    d080:	3a 41       	pop	r10		
    d082:	3b 41       	pop	r11		
    d084:	30 41       	ret			
    d086:	1b 91 02 00 	cmp	2(r1),	r11	;0x0002(r1)
    d08a:	43 34       	jge	$+136    	;abs 0xd112
    d08c:	07 43       	clr	r7		
    d08e:	08 43       	clr	r8		
    d090:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    d094:	2c 41       	mov	@r1,	r12	
    d096:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    d09a:	99 23       	jnz	$-204    	;abs 0xcfce
    d09c:	c6 4f 01 00 	mov.b	r15,	1(r6)	;0x0001(r6)
    d0a0:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d0a4:	02 00 
    d0a6:	0e 47       	mov	r7,	r14	
    d0a8:	0f 48       	mov	r8,	r15	
    d0aa:	0e 54       	add	r4,	r14	
    d0ac:	0f 65       	addc	r5,	r15	
    d0ae:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d0b2:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d0b6:	c6 3f       	jmp	$-114    	;abs 0xd044
    d0b8:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d0bc:	b3 2b       	jnc	$-152    	;abs 0xd024
    d0be:	09 9c       	cmp	r12,	r9	
    d0c0:	b1 2f       	jc	$-156    	;abs 0xd024
    d0c2:	ba 3f       	jmp	$-138    	;abs 0xd038
    d0c4:	4b 9c       	cmp.b	r12,	r11	
    d0c6:	d5 23       	jnz	$-84     	;abs 0xd072
    d0c8:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    d0cc:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    d0d0:	02 00 
    d0d2:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    d0d6:	04 00 
    d0d8:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    d0dc:	06 00 
    d0de:	2b 41       	mov	@r1,	r11	
    d0e0:	5a 4b 01 00 	mov.b	1(r11),	r10	;0x0001(r11)
    d0e4:	5a ff 01 00 	and.b	1(r15),	r10	;0x0001(r15)
    d0e8:	cd 4a 01 00 	mov.b	r10,	1(r13)	;0x0001(r13)
    d0ec:	0f 4d       	mov	r13,	r15	
    d0ee:	c1 3f       	jmp	$-124    	;abs 0xd072
    d0f0:	c6 43 01 00 	mov.b	#0,	1(r6)	;r3 As==00, 0x0001(r6)
    d0f4:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d0f8:	02 00 
    d0fa:	0e 4c       	mov	r12,	r14	
    d0fc:	0f 4d       	mov	r13,	r15	
    d0fe:	86 4c 04 00 	mov	r12,	4(r6)	;0x0004(r6)
    d102:	86 4d 06 00 	mov	r13,	6(r6)	;0x0006(r6)
    d106:	7a 3f       	jmp	$-266    	;abs 0xcffc
    d108:	0c 44       	mov	r4,	r12	
    d10a:	0d 45       	mov	r5,	r13	
    d10c:	0c 87       	sub	r7,	r12	
    d10e:	0d 78       	subc	r8,	r13	
    d110:	64 3f       	jmp	$-310    	;abs 0xcfda
    d112:	81 4b 02 00 	mov	r11,	2(r1)	;0x0002(r1)
    d116:	04 43       	clr	r4		
    d118:	05 43       	clr	r5		
    d11a:	53 3f       	jmp	$-344    	;abs 0xcfc2
    d11c:	39 e3       	inv	r9		
    d11e:	19 53       	inc	r9		
    d120:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    d124:	b0 37       	jge	$-158    	;abs 0xd086
    d126:	24 3f       	jmp	$-438    	;abs 0xcf70
    d128:	0a 93       	tst	r10		
    d12a:	45 23       	jnz	$-372    	;abs 0xcfb6
    d12c:	0c 43       	clr	r12		
    d12e:	0d 43       	clr	r13		
    d130:	42 3f       	jmp	$-378    	;abs 0xcfb6
    d132:	09 9c       	cmp	r12,	r9	
    d134:	87 2b       	jnc	$-240    	;abs 0xd044
    d136:	6f 3f       	jmp	$-288    	;abs 0xd016
    d138:	2f 41       	mov	@r1,	r15	
    d13a:	9b 3f       	jmp	$-200    	;abs 0xd072
    d13c:	0c 93       	tst	r12		
    d13e:	41 27       	jz	$-380    	;abs 0xcfc2
    d140:	81 59 02 00 	add	r9,	2(r1)	;0x0002(r1)
    d144:	0e 49       	mov	r9,	r14	
    d146:	0b 44       	mov	r4,	r11	
    d148:	0c 45       	mov	r5,	r12	
    d14a:	0e 93       	tst	r14		
    d14c:	05 24       	jz	$+12     	;abs 0xd158
    d14e:	12 c3       	clrc			
    d150:	0c 10       	rrc	r12		
    d152:	0b 10       	rrc	r11		
    d154:	1e 83       	dec	r14		
    d156:	fb 23       	jnz	$-8      	;abs 0xd14e
    d158:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    d15c:	81 4c 06 00 	mov	r12,	6(r1)	;0x0006(r1)
    d160:	1d 43       	mov	#1,	r13	;r3 As==01
    d162:	0e 43       	clr	r14		
    d164:	0b 4d       	mov	r13,	r11	
    d166:	0c 4e       	mov	r14,	r12	
    d168:	09 93       	tst	r9		
    d16a:	04 24       	jz	$+10     	;abs 0xd174
    d16c:	0b 5b       	rla	r11		
    d16e:	0c 6c       	rlc	r12		
    d170:	19 83       	dec	r9		
    d172:	fc 23       	jnz	$-6      	;abs 0xd16c
    d174:	3b 53       	add	#-1,	r11	;r3 As==11
    d176:	3c 63       	addc	#-1,	r12	;r3 As==11
    d178:	0b f4       	and	r4,	r11	
    d17a:	0c f5       	and	r5,	r12	
    d17c:	0b 93       	tst	r11		
    d17e:	08 24       	jz	$+18     	;abs 0xd190
    d180:	14 41 04 00 	mov	4(r1),	r4	;0x0004(r1)
    d184:	15 41 06 00 	mov	6(r1),	r5	;0x0006(r1)
    d188:	04 dd       	bis	r13,	r4	
    d18a:	05 de       	bis	r14,	r5	
    d18c:	30 40 c2 cf 	br	#0xcfc2	
    d190:	0c 93       	tst	r12		
    d192:	f6 23       	jnz	$-18     	;abs 0xd180
    d194:	0d 43       	clr	r13		
    d196:	0e 43       	clr	r14		
    d198:	f3 3f       	jmp	$-24     	;abs 0xd180
    d19a:	4c 9b       	cmp.b	r11,	r12	
    d19c:	6a 23       	jnz	$-298    	;abs 0xd072
    d19e:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    d1a2:	01 00 
    d1a4:	66 27       	jz	$-306    	;abs 0xd072
    d1a6:	3f 40 2a d7 	mov	#-10454,r15	;#0xd72a
    d1aa:	63 3f       	jmp	$-312    	;abs 0xd072

0000d1ac <__addsf3>:
    d1ac:	0b 12       	push	r11		
    d1ae:	0a 12       	push	r10		
    d1b0:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d1b4:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d1b8:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d1bc:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d1c0:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d1c4:	0b 41       	mov	r1,	r11	
    d1c6:	3b 52       	add	#8,	r11	;r2 As==11
    d1c8:	0e 4b       	mov	r11,	r14	
    d1ca:	0f 41       	mov	r1,	r15	
    d1cc:	b0 12 38 da 	call	#0xda38	
    d1d0:	0a 41       	mov	r1,	r10	
    d1d2:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d1d6:	0e 4a       	mov	r10,	r14	
    d1d8:	0f 41       	mov	r1,	r15	
    d1da:	2f 52       	add	#4,	r15	;r2 As==10
    d1dc:	b0 12 38 da 	call	#0xda38	
    d1e0:	0d 41       	mov	r1,	r13	
    d1e2:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d1e6:	0e 4a       	mov	r10,	r14	
    d1e8:	0f 4b       	mov	r11,	r15	
    d1ea:	b0 12 fe ce 	call	#0xcefe	
    d1ee:	b0 12 62 d8 	call	#0xd862	
    d1f2:	31 50 20 00 	add	#32,	r1	;#0x0020
    d1f6:	3a 41       	pop	r10		
    d1f8:	3b 41       	pop	r11		
    d1fa:	30 41       	ret			

0000d1fc <__subsf3>:
    d1fc:	0b 12       	push	r11		
    d1fe:	0a 12       	push	r10		
    d200:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d204:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d208:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d20c:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d210:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d214:	0b 41       	mov	r1,	r11	
    d216:	3b 52       	add	#8,	r11	;r2 As==11
    d218:	0e 4b       	mov	r11,	r14	
    d21a:	0f 41       	mov	r1,	r15	
    d21c:	b0 12 38 da 	call	#0xda38	
    d220:	0a 41       	mov	r1,	r10	
    d222:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d226:	0e 4a       	mov	r10,	r14	
    d228:	0f 41       	mov	r1,	r15	
    d22a:	2f 52       	add	#4,	r15	;r2 As==10
    d22c:	b0 12 38 da 	call	#0xda38	
    d230:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    d234:	0d 41       	mov	r1,	r13	
    d236:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d23a:	0e 4a       	mov	r10,	r14	
    d23c:	0f 4b       	mov	r11,	r15	
    d23e:	b0 12 fe ce 	call	#0xcefe	
    d242:	b0 12 62 d8 	call	#0xd862	
    d246:	31 50 20 00 	add	#32,	r1	;#0x0020
    d24a:	3a 41       	pop	r10		
    d24c:	3b 41       	pop	r11		
    d24e:	30 41       	ret			

0000d250 <__mulsf3>:
    d250:	0b 12       	push	r11		
    d252:	0a 12       	push	r10		
    d254:	09 12       	push	r9		
    d256:	08 12       	push	r8		
    d258:	07 12       	push	r7		
    d25a:	06 12       	push	r6		
    d25c:	05 12       	push	r5		
    d25e:	04 12       	push	r4		
    d260:	31 50 de ff 	add	#-34,	r1	;#0xffde
    d264:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d268:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d26c:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d270:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d274:	08 41       	mov	r1,	r8	
    d276:	38 52       	add	#8,	r8	;r2 As==11
    d278:	0e 48       	mov	r8,	r14	
    d27a:	0f 41       	mov	r1,	r15	
    d27c:	b0 12 38 da 	call	#0xda38	
    d280:	06 41       	mov	r1,	r6	
    d282:	36 50 10 00 	add	#16,	r6	;#0x0010
    d286:	0e 46       	mov	r6,	r14	
    d288:	0f 41       	mov	r1,	r15	
    d28a:	2f 52       	add	#4,	r15	;r2 As==10
    d28c:	b0 12 38 da 	call	#0xda38	
    d290:	5c 41 08 00 	mov.b	8(r1),	r12	;0x0008(r1)
    d294:	5d 43       	mov.b	#1,	r13	;r3 As==01
    d296:	4d 9c       	cmp.b	r12,	r13	
    d298:	a4 2c       	jc	$+330    	;abs 0xd3e2
    d29a:	5a 41 10 00 	mov.b	16(r1),	r10	;0x0010(r1)
    d29e:	4d 9a       	cmp.b	r10,	r13	
    d2a0:	c4 2c       	jc	$+394    	;abs 0xd42a
    d2a2:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d2a4:	9c 24       	jz	$+314    	;abs 0xd3de
    d2a6:	6a 92       	cmp.b	#4,	r10	;r2 As==10
    d2a8:	02 20       	jnz	$+6      	;abs 0xd2ae
    d2aa:	30 40 44 d4 	br	#0xd444	
    d2ae:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d2b0:	98 24       	jz	$+306    	;abs 0xd3e2
    d2b2:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d2b4:	ba 24       	jz	$+374    	;abs 0xd42a
    d2b6:	14 41 0c 00 	mov	12(r1),	r4	;0x000c(r1)
    d2ba:	91 41 0e 00 	mov	14(r1),	32(r1)	;0x000e(r1), 0x0020(r1)
    d2be:	20 00 
    d2c0:	1a 41 14 00 	mov	20(r1),	r10	;0x0014(r1)
    d2c4:	1b 41 16 00 	mov	22(r1),	r11	;0x0016(r1)
    d2c8:	05 43       	clr	r5		
    d2ca:	0c 43       	clr	r12		
    d2cc:	0d 43       	clr	r13		
    d2ce:	06 4c       	mov	r12,	r6	
    d2d0:	07 4d       	mov	r13,	r7	
    d2d2:	08 4c       	mov	r12,	r8	
    d2d4:	09 4d       	mov	r13,	r9	
    d2d6:	19 3c       	jmp	$+52     	;abs 0xd30a
    d2d8:	0e 43       	clr	r14		
    d2da:	0f 43       	clr	r15		
    d2dc:	0c 5e       	add	r14,	r12	
    d2de:	0d 6f       	addc	r15,	r13	
    d2e0:	06 56       	rla	r6		
    d2e2:	07 67       	rlc	r7		
    d2e4:	0b 93       	tst	r11		
    d2e6:	02 34       	jge	$+6      	;abs 0xd2ec
    d2e8:	16 d3       	bis	#1,	r6	;r3 As==01
    d2ea:	07 d3       	bis	#0,	r7	;r3 As==00
    d2ec:	15 53       	inc	r5		
    d2ee:	35 90 20 00 	cmp	#32,	r5	;#0x0020
    d2f2:	1a 24       	jz	$+54     	;abs 0xd328
    d2f4:	0a 5a       	rla	r10		
    d2f6:	0b 6b       	rlc	r11		
    d2f8:	0e 44       	mov	r4,	r14	
    d2fa:	1f 41 20 00 	mov	32(r1),	r15	;0x0020(r1)
    d2fe:	12 c3       	clrc			
    d300:	0f 10       	rrc	r15		
    d302:	0e 10       	rrc	r14		
    d304:	04 4e       	mov	r14,	r4	
    d306:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    d30a:	14 b3       	bit	#1,	r4	;r3 As==01
    d30c:	e9 27       	jz	$-44     	;abs 0xd2e0
    d30e:	08 5a       	add	r10,	r8	
    d310:	09 6b       	addc	r11,	r9	
    d312:	0c 56       	add	r6,	r12	
    d314:	0d 67       	addc	r7,	r13	
    d316:	1e 43       	mov	#1,	r14	;r3 As==01
    d318:	0f 43       	clr	r15		
    d31a:	09 9b       	cmp	r11,	r9	
    d31c:	df 2b       	jnc	$-64     	;abs 0xd2dc
    d31e:	09 9b       	cmp	r11,	r9	
    d320:	db 23       	jnz	$-72     	;abs 0xd2d8
    d322:	08 9a       	cmp	r10,	r8	
    d324:	db 2b       	jnc	$-72     	;abs 0xd2dc
    d326:	d8 3f       	jmp	$-78     	;abs 0xd2d8
    d328:	0a 4d       	mov	r13,	r10	
    d32a:	1f 41 12 00 	mov	18(r1),	r15	;0x0012(r1)
    d32e:	1f 51 0a 00 	add	10(r1),	r15	;0x000a(r1)
    d332:	0e 4f       	mov	r15,	r14	
    d334:	2e 53       	incd	r14		
    d336:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d33a:	5e 43       	mov.b	#1,	r14	;r3 As==01
    d33c:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d340:	09 00 
    d342:	57 24       	jz	$+176    	;abs 0xd3f2
    d344:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d348:	0a 93       	tst	r10		
    d34a:	13 34       	jge	$+40     	;abs 0xd372
    d34c:	3f 50 03 00 	add	#3,	r15	;#0x0003
    d350:	0a 4f       	mov	r15,	r10	
    d352:	1c b3       	bit	#1,	r12	;r3 As==01
    d354:	06 24       	jz	$+14     	;abs 0xd362
    d356:	12 c3       	clrc			
    d358:	09 10       	rrc	r9		
    d35a:	08 10       	rrc	r8		
    d35c:	08 d3       	bis	#0,	r8	;r3 As==00
    d35e:	39 d0 00 80 	bis	#-32768,r9	;#0x8000
    d362:	12 c3       	clrc			
    d364:	0d 10       	rrc	r13		
    d366:	0c 10       	rrc	r12		
    d368:	1f 53       	inc	r15		
    d36a:	0d 93       	tst	r13		
    d36c:	f1 3b       	jl	$-28     	;abs 0xd350
    d36e:	81 4a 1a 00 	mov	r10,	26(r1)	;0x001a(r1)
    d372:	3a 43       	mov	#-1,	r10	;r3 As==11
    d374:	3b 40 ff 3f 	mov	#16383,	r11	;#0x3fff
    d378:	0b 9d       	cmp	r13,	r11	
    d37a:	12 28       	jnc	$+38     	;abs 0xd3a0
    d37c:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    d380:	3f 53       	add	#-1,	r15	;r3 As==11
    d382:	0a 4b       	mov	r11,	r10	
    d384:	0e 4f       	mov	r15,	r14	
    d386:	0c 5c       	rla	r12		
    d388:	0d 6d       	rlc	r13		
    d38a:	09 93       	tst	r9		
    d38c:	02 34       	jge	$+6      	;abs 0xd392
    d38e:	1c d3       	bis	#1,	r12	;r3 As==01
    d390:	0d d3       	bis	#0,	r13	;r3 As==00
    d392:	08 58       	rla	r8		
    d394:	09 69       	rlc	r9		
    d396:	3f 53       	add	#-1,	r15	;r3 As==11
    d398:	0a 9d       	cmp	r13,	r10	
    d39a:	f4 2f       	jc	$-22     	;abs 0xd384
    d39c:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d3a0:	0e 4c       	mov	r12,	r14	
    d3a2:	0f 4d       	mov	r13,	r15	
    d3a4:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d3a8:	0f f3       	and	#0,	r15	;r3 As==00
    d3aa:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    d3ae:	27 24       	jz	$+80     	;abs 0xd3fe
    d3b0:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    d3b4:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
    d3b8:	f1 40 03 00 	mov.b	#3,	24(r1)	;#0x0003, 0x0018(r1)
    d3bc:	18 00 
    d3be:	0f 41       	mov	r1,	r15	
    d3c0:	3f 50 18 00 	add	#24,	r15	;#0x0018
    d3c4:	b0 12 62 d8 	call	#0xd862	
    d3c8:	31 50 22 00 	add	#34,	r1	;#0x0022
    d3cc:	34 41       	pop	r4		
    d3ce:	35 41       	pop	r5		
    d3d0:	36 41       	pop	r6		
    d3d2:	37 41       	pop	r7		
    d3d4:	38 41       	pop	r8		
    d3d6:	39 41       	pop	r9		
    d3d8:	3a 41       	pop	r10		
    d3da:	3b 41       	pop	r11		
    d3dc:	30 41       	ret			
    d3de:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d3e0:	33 24       	jz	$+104    	;abs 0xd448
    d3e2:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d3e6:	09 00 
    d3e8:	1e 24       	jz	$+62     	;abs 0xd426
    d3ea:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    d3ee:	0f 48       	mov	r8,	r15	
    d3f0:	e9 3f       	jmp	$-44     	;abs 0xd3c4
    d3f2:	4e 43       	clr.b	r14		
    d3f4:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d3f8:	0a 93       	tst	r10		
    d3fa:	bb 37       	jge	$-136    	;abs 0xd372
    d3fc:	a7 3f       	jmp	$-176    	;abs 0xd34c
    d3fe:	0f 93       	tst	r15		
    d400:	d7 23       	jnz	$-80     	;abs 0xd3b0
    d402:	0e 4c       	mov	r12,	r14	
    d404:	0f 4d       	mov	r13,	r15	
    d406:	3e f0 80 00 	and	#128,	r14	;#0x0080
    d40a:	0f f3       	and	#0,	r15	;r3 As==00
    d40c:	0e 93       	tst	r14		
    d40e:	d0 23       	jnz	$-94     	;abs 0xd3b0
    d410:	0f 93       	tst	r15		
    d412:	ce 23       	jnz	$-98     	;abs 0xd3b0
    d414:	08 93       	tst	r8		
    d416:	13 24       	jz	$+40     	;abs 0xd43e
    d418:	3c 50 40 00 	add	#64,	r12	;#0x0040
    d41c:	0d 63       	adc	r13		
    d41e:	3c f0 80 ff 	and	#-128,	r12	;#0xff80
    d422:	3d f3       	and	#-1,	r13	;r3 As==11
    d424:	c5 3f       	jmp	$-116    	;abs 0xd3b0
    d426:	4d 43       	clr.b	r13		
    d428:	e0 3f       	jmp	$-62     	;abs 0xd3ea
    d42a:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d42e:	09 00 
    d430:	04 24       	jz	$+10     	;abs 0xd43a
    d432:	c1 4d 11 00 	mov.b	r13,	17(r1)	;0x0011(r1)
    d436:	0f 46       	mov	r6,	r15	
    d438:	c5 3f       	jmp	$-116    	;abs 0xd3c4
    d43a:	4d 43       	clr.b	r13		
    d43c:	fa 3f       	jmp	$-10     	;abs 0xd432
    d43e:	09 93       	tst	r9		
    d440:	eb 23       	jnz	$-40     	;abs 0xd418
    d442:	b6 3f       	jmp	$-146    	;abs 0xd3b0
    d444:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d446:	f1 23       	jnz	$-28     	;abs 0xd42a
    d448:	3f 40 2a d7 	mov	#-10454,r15	;#0xd72a
    d44c:	bb 3f       	jmp	$-136    	;abs 0xd3c4

0000d44e <__divsf3>:
    d44e:	0b 12       	push	r11		
    d450:	0a 12       	push	r10		
    d452:	09 12       	push	r9		
    d454:	08 12       	push	r8		
    d456:	07 12       	push	r7		
    d458:	06 12       	push	r6		
    d45a:	05 12       	push	r5		
    d45c:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    d460:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d464:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d468:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d46c:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d470:	05 41       	mov	r1,	r5	
    d472:	35 52       	add	#8,	r5	;r2 As==11
    d474:	0e 45       	mov	r5,	r14	
    d476:	0f 41       	mov	r1,	r15	
    d478:	b0 12 38 da 	call	#0xda38	
    d47c:	09 41       	mov	r1,	r9	
    d47e:	39 50 10 00 	add	#16,	r9	;#0x0010
    d482:	0e 49       	mov	r9,	r14	
    d484:	0f 41       	mov	r1,	r15	
    d486:	2f 52       	add	#4,	r15	;r2 As==10
    d488:	b0 12 38 da 	call	#0xda38	
    d48c:	5d 41 08 00 	mov.b	8(r1),	r13	;0x0008(r1)
    d490:	5b 43       	mov.b	#1,	r11	;r3 As==01
    d492:	4b 9d       	cmp.b	r13,	r11	
    d494:	64 2c       	jc	$+202    	;abs 0xd55e
    d496:	5c 41 10 00 	mov.b	16(r1),	r12	;0x0010(r1)
    d49a:	4b 9c       	cmp.b	r12,	r11	
    d49c:	86 2c       	jc	$+270    	;abs 0xd5aa
    d49e:	d1 e1 11 00 	xor.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d4a2:	09 00 
    d4a4:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    d4a6:	5d 24       	jz	$+188    	;abs 0xd562
    d4a8:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    d4aa:	5b 24       	jz	$+184    	;abs 0xd562
    d4ac:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d4ae:	75 24       	jz	$+236    	;abs 0xd59a
    d4b0:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d4b2:	53 24       	jz	$+168    	;abs 0xd55a
    d4b4:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    d4b8:	1f 81 12 00 	sub	18(r1),	r15	;0x0012(r1)
    d4bc:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d4c0:	1d 41 0c 00 	mov	12(r1),	r13	;0x000c(r1)
    d4c4:	1e 41 0e 00 	mov	14(r1),	r14	;0x000e(r1)
    d4c8:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    d4cc:	18 41 16 00 	mov	22(r1),	r8	;0x0016(r1)
    d4d0:	0e 98       	cmp	r8,	r14	
    d4d2:	3e 2c       	jc	$+126    	;abs 0xd550
    d4d4:	0d 5d       	rla	r13		
    d4d6:	0e 6e       	rlc	r14		
    d4d8:	3f 53       	add	#-1,	r15	;r3 As==11
    d4da:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d4de:	36 40 1f 00 	mov	#31,	r6	;#0x001f
    d4e2:	0b 43       	clr	r11		
    d4e4:	3c 40 00 40 	mov	#16384,	r12	;#0x4000
    d4e8:	09 43       	clr	r9		
    d4ea:	0a 43       	clr	r10		
    d4ec:	0b 3c       	jmp	$+24     	;abs 0xd504
    d4ee:	09 db       	bis	r11,	r9	
    d4f0:	0a dc       	bis	r12,	r10	
    d4f2:	0d 87       	sub	r7,	r13	
    d4f4:	0e 78       	subc	r8,	r14	
    d4f6:	12 c3       	clrc			
    d4f8:	0c 10       	rrc	r12		
    d4fa:	0b 10       	rrc	r11		
    d4fc:	0d 5d       	rla	r13		
    d4fe:	0e 6e       	rlc	r14		
    d500:	36 53       	add	#-1,	r6	;r3 As==11
    d502:	0d 24       	jz	$+28     	;abs 0xd51e
    d504:	0e 98       	cmp	r8,	r14	
    d506:	f7 2b       	jnc	$-16     	;abs 0xd4f6
    d508:	0e 98       	cmp	r8,	r14	
    d50a:	f1 23       	jnz	$-28     	;abs 0xd4ee
    d50c:	0d 97       	cmp	r7,	r13	
    d50e:	ef 2f       	jc	$-32     	;abs 0xd4ee
    d510:	12 c3       	clrc			
    d512:	0c 10       	rrc	r12		
    d514:	0b 10       	rrc	r11		
    d516:	0d 5d       	rla	r13		
    d518:	0e 6e       	rlc	r14		
    d51a:	36 53       	add	#-1,	r6	;r3 As==11
    d51c:	f3 23       	jnz	$-24     	;abs 0xd504
    d51e:	0b 49       	mov	r9,	r11	
    d520:	0c 4a       	mov	r10,	r12	
    d522:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    d526:	0c f3       	and	#0,	r12	;r3 As==00
    d528:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    d52c:	1f 24       	jz	$+64     	;abs 0xd56c
    d52e:	81 49 0c 00 	mov	r9,	12(r1)	;0x000c(r1)
    d532:	81 4a 0e 00 	mov	r10,	14(r1)	;0x000e(r1)
    d536:	0f 45       	mov	r5,	r15	
    d538:	b0 12 62 d8 	call	#0xd862	
    d53c:	31 50 18 00 	add	#24,	r1	;#0x0018
    d540:	35 41       	pop	r5		
    d542:	36 41       	pop	r6		
    d544:	37 41       	pop	r7		
    d546:	38 41       	pop	r8		
    d548:	39 41       	pop	r9		
    d54a:	3a 41       	pop	r10		
    d54c:	3b 41       	pop	r11		
    d54e:	30 41       	ret			
    d550:	08 9e       	cmp	r14,	r8	
    d552:	c5 2b       	jnc	$-116    	;abs 0xd4de
    d554:	0d 97       	cmp	r7,	r13	
    d556:	c3 2f       	jc	$-120    	;abs 0xd4de
    d558:	bd 3f       	jmp	$-132    	;abs 0xd4d4
    d55a:	e1 42 08 00 	mov.b	#4,	8(r1)	;r2 As==10, 0x0008(r1)
    d55e:	0f 45       	mov	r5,	r15	
    d560:	eb 3f       	jmp	$-40     	;abs 0xd538
    d562:	4d 9c       	cmp.b	r12,	r13	
    d564:	fc 23       	jnz	$-6      	;abs 0xd55e
    d566:	3f 40 2a d7 	mov	#-10454,r15	;#0xd72a
    d56a:	e6 3f       	jmp	$-50     	;abs 0xd538
    d56c:	0c 93       	tst	r12		
    d56e:	df 23       	jnz	$-64     	;abs 0xd52e
    d570:	0b 49       	mov	r9,	r11	
    d572:	0c 4a       	mov	r10,	r12	
    d574:	3b f0 80 00 	and	#128,	r11	;#0x0080
    d578:	0c f3       	and	#0,	r12	;r3 As==00
    d57a:	0b 93       	tst	r11		
    d57c:	d8 23       	jnz	$-78     	;abs 0xd52e
    d57e:	0c 93       	tst	r12		
    d580:	d6 23       	jnz	$-82     	;abs 0xd52e
    d582:	0d 93       	tst	r13		
    d584:	07 24       	jz	$+16     	;abs 0xd594
    d586:	39 50 40 00 	add	#64,	r9	;#0x0040
    d58a:	0a 63       	adc	r10		
    d58c:	39 f0 80 ff 	and	#-128,	r9	;#0xff80
    d590:	3a f3       	and	#-1,	r10	;r3 As==11
    d592:	cd 3f       	jmp	$-100    	;abs 0xd52e
    d594:	0e 93       	tst	r14		
    d596:	f7 23       	jnz	$-16     	;abs 0xd586
    d598:	ca 3f       	jmp	$-106    	;abs 0xd52e
    d59a:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c(r1)
    d59e:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e(r1)
    d5a2:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a(r1)
    d5a6:	0f 45       	mov	r5,	r15	
    d5a8:	c7 3f       	jmp	$-112    	;abs 0xd538
    d5aa:	0f 49       	mov	r9,	r15	
    d5ac:	c5 3f       	jmp	$-116    	;abs 0xd538

0000d5ae <__gesf2>:
    d5ae:	0b 12       	push	r11		
    d5b0:	0a 12       	push	r10		
    d5b2:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    d5b6:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d5ba:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d5be:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d5c2:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d5c6:	0b 41       	mov	r1,	r11	
    d5c8:	3b 52       	add	#8,	r11	;r2 As==11
    d5ca:	0e 4b       	mov	r11,	r14	
    d5cc:	0f 41       	mov	r1,	r15	
    d5ce:	b0 12 38 da 	call	#0xda38	
    d5d2:	0a 41       	mov	r1,	r10	
    d5d4:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d5d8:	0e 4a       	mov	r10,	r14	
    d5da:	0f 41       	mov	r1,	r15	
    d5dc:	2f 52       	add	#4,	r15	;r2 As==10
    d5de:	b0 12 38 da 	call	#0xda38	
    d5e2:	5d 43       	mov.b	#1,	r13	;r3 As==01
    d5e4:	5d 91 08 00 	cmp.b	8(r1),	r13	;0x0008(r1)
    d5e8:	0c 2c       	jc	$+26     	;abs 0xd602
    d5ea:	5d 91 10 00 	cmp.b	16(r1),	r13	;0x0010(r1)
    d5ee:	09 2c       	jc	$+20     	;abs 0xd602
    d5f0:	0e 4a       	mov	r10,	r14	
    d5f2:	0f 4b       	mov	r11,	r15	
    d5f4:	b0 12 6a db 	call	#0xdb6a	
    d5f8:	31 50 18 00 	add	#24,	r1	;#0x0018
    d5fc:	3a 41       	pop	r10		
    d5fe:	3b 41       	pop	r11		
    d600:	30 41       	ret			
    d602:	3f 43       	mov	#-1,	r15	;r3 As==11
    d604:	f9 3f       	jmp	$-12     	;abs 0xd5f8

0000d606 <__floatsisf>:
    d606:	0b 12       	push	r11		
    d608:	0a 12       	push	r10		
    d60a:	31 82       	sub	#8,	r1	;r2 As==11
    d60c:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    d610:	00 00 
    d612:	0d 4f       	mov	r15,	r13	
    d614:	0d 5d       	rla	r13		
    d616:	0d 43       	clr	r13		
    d618:	0d 6d       	rlc	r13		
    d61a:	4c 4d       	mov.b	r13,	r12	
    d61c:	c1 4d 01 00 	mov.b	r13,	1(r1)	;0x0001(r1)
    d620:	0e 93       	tst	r14		
    d622:	32 24       	jz	$+102    	;abs 0xd688
    d624:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    d628:	02 00 
    d62a:	4c 93       	tst.b	r12		
    d62c:	24 20       	jnz	$+74     	;abs 0xd676
    d62e:	0a 4e       	mov	r14,	r10	
    d630:	0b 4f       	mov	r15,	r11	
    d632:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d636:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d63a:	0e 4a       	mov	r10,	r14	
    d63c:	0f 4b       	mov	r11,	r15	
    d63e:	b0 12 0a d8 	call	#0xd80a	
    d642:	3f 53       	add	#-1,	r15	;r3 As==11
    d644:	1f 93       	cmp	#1,	r15	;r3 As==01
    d646:	10 38       	jl	$+34     	;abs 0xd668
    d648:	0e 4f       	mov	r15,	r14	
    d64a:	0e 93       	tst	r14		
    d64c:	04 24       	jz	$+10     	;abs 0xd656
    d64e:	0a 5a       	rla	r10		
    d650:	0b 6b       	rlc	r11		
    d652:	1e 83       	dec	r14		
    d654:	fc 23       	jnz	$-6      	;abs 0xd64e
    d656:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d65a:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d65e:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    d662:	0e 8f       	sub	r15,	r14	
    d664:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    d668:	0f 41       	mov	r1,	r15	
    d66a:	b0 12 62 d8 	call	#0xd862	
    d66e:	31 52       	add	#8,	r1	;r2 As==11
    d670:	3a 41       	pop	r10		
    d672:	3b 41       	pop	r11		
    d674:	30 41       	ret			
    d676:	0e 93       	tst	r14		
    d678:	0c 24       	jz	$+26     	;abs 0xd692
    d67a:	0a 4e       	mov	r14,	r10	
    d67c:	0b 4f       	mov	r15,	r11	
    d67e:	3a e3       	inv	r10		
    d680:	3b e3       	inv	r11		
    d682:	1a 53       	inc	r10		
    d684:	0b 63       	adc	r11		
    d686:	d5 3f       	jmp	$-84     	;abs 0xd632
    d688:	0f 93       	tst	r15		
    d68a:	cc 23       	jnz	$-102    	;abs 0xd624
    d68c:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    d690:	eb 3f       	jmp	$-40     	;abs 0xd668
    d692:	3f 90 00 80 	cmp	#-32768,r15	;#0x8000
    d696:	f1 23       	jnz	$-28     	;abs 0xd67a
    d698:	0e 43       	clr	r14		
    d69a:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    d69e:	e7 3f       	jmp	$-48     	;abs 0xd66e

0000d6a0 <__fixsfsi>:
    d6a0:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    d6a4:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d6a8:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d6ac:	0e 41       	mov	r1,	r14	
    d6ae:	2e 52       	add	#4,	r14	;r2 As==10
    d6b0:	0f 41       	mov	r1,	r15	
    d6b2:	b0 12 38 da 	call	#0xda38	
    d6b6:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    d6ba:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d6bc:	2b 24       	jz	$+88     	;abs 0xd714
    d6be:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d6c0:	29 28       	jnc	$+84     	;abs 0xd714
    d6c2:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    d6c4:	08 24       	jz	$+18     	;abs 0xd6d6
    d6c6:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    d6ca:	0d 93       	tst	r13		
    d6cc:	23 38       	jl	$+72     	;abs 0xd714
    d6ce:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    d6d2:	0c 9d       	cmp	r13,	r12	
    d6d4:	09 34       	jge	$+20     	;abs 0xd6e8
    d6d6:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    d6da:	21 20       	jnz	$+68     	;abs 0xd71e
    d6dc:	3e 43       	mov	#-1,	r14	;r3 As==11
    d6de:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    d6e2:	31 50 0c 00 	add	#12,	r1	;#0x000c
    d6e6:	30 41       	ret			
    d6e8:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    d6ec:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    d6f0:	0c 8d       	sub	r13,	r12	
    d6f2:	0c 93       	tst	r12		
    d6f4:	05 24       	jz	$+12     	;abs 0xd700
    d6f6:	12 c3       	clrc			
    d6f8:	0f 10       	rrc	r15		
    d6fa:	0e 10       	rrc	r14		
    d6fc:	1c 83       	dec	r12		
    d6fe:	fb 23       	jnz	$-8      	;abs 0xd6f6
    d700:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    d704:	ee 27       	jz	$-34     	;abs 0xd6e2
    d706:	3e e3       	inv	r14		
    d708:	3f e3       	inv	r15		
    d70a:	1e 53       	inc	r14		
    d70c:	0f 63       	adc	r15		
    d70e:	31 50 0c 00 	add	#12,	r1	;#0x000c
    d712:	30 41       	ret			
    d714:	0e 43       	clr	r14		
    d716:	0f 43       	clr	r15		
    d718:	31 50 0c 00 	add	#12,	r1	;#0x000c
    d71c:	30 41       	ret			
    d71e:	0e 43       	clr	r14		
    d720:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    d724:	31 50 0c 00 	add	#12,	r1	;#0x000c
    d728:	30 41       	ret			

0000d72a <__thenan_sf>:
	...

0000d732 <__floatunsisf>:
    d732:	0b 12       	push	r11		
    d734:	0a 12       	push	r10		
    d736:	09 12       	push	r9		
    d738:	08 12       	push	r8		
    d73a:	07 12       	push	r7		
    d73c:	31 82       	sub	#8,	r1	;r2 As==11
    d73e:	0a 4e       	mov	r14,	r10	
    d740:	0b 4f       	mov	r15,	r11	
    d742:	c1 43 01 00 	mov.b	#0,	1(r1)	;r3 As==00, 0x0001(r1)
    d746:	0e 93       	tst	r14		
    d748:	2d 24       	jz	$+92     	;abs 0xd7a4
    d74a:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    d74e:	00 00 
    d750:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    d754:	02 00 
    d756:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d75a:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d75e:	0e 4a       	mov	r10,	r14	
    d760:	0f 4b       	mov	r11,	r15	
    d762:	b0 12 0a d8 	call	#0xd80a	
    d766:	0d 4f       	mov	r15,	r13	
    d768:	3d 53       	add	#-1,	r13	;r3 As==11
    d76a:	21 30       	jn	$+68     	;abs 0xd7ae
    d76c:	0d 93       	tst	r13		
    d76e:	10 24       	jz	$+34     	;abs 0xd790
    d770:	0f 4d       	mov	r13,	r15	
    d772:	0f 93       	tst	r15		
    d774:	04 24       	jz	$+10     	;abs 0xd77e
    d776:	0a 5a       	rla	r10		
    d778:	0b 6b       	rlc	r11		
    d77a:	1f 83       	dec	r15		
    d77c:	fc 23       	jnz	$-6      	;abs 0xd776
    d77e:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d782:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d786:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    d78a:	0f 8d       	sub	r13,	r15	
    d78c:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d790:	0f 41       	mov	r1,	r15	
    d792:	b0 12 62 d8 	call	#0xd862	
    d796:	31 52       	add	#8,	r1	;r2 As==11
    d798:	37 41       	pop	r7		
    d79a:	38 41       	pop	r8		
    d79c:	39 41       	pop	r9		
    d79e:	3a 41       	pop	r10		
    d7a0:	3b 41       	pop	r11		
    d7a2:	30 41       	ret			
    d7a4:	0b 93       	tst	r11		
    d7a6:	d1 23       	jnz	$-92     	;abs 0xd74a
    d7a8:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    d7ac:	f1 3f       	jmp	$-28     	;abs 0xd790
    d7ae:	0c 4d       	mov	r13,	r12	
    d7b0:	3c e3       	inv	r12		
    d7b2:	1c 53       	inc	r12		
    d7b4:	18 43       	mov	#1,	r8	;r3 As==01
    d7b6:	09 43       	clr	r9		
    d7b8:	07 4c       	mov	r12,	r7	
    d7ba:	0e 48       	mov	r8,	r14	
    d7bc:	0f 49       	mov	r9,	r15	
    d7be:	07 93       	tst	r7		
    d7c0:	04 24       	jz	$+10     	;abs 0xd7ca
    d7c2:	0e 5e       	rla	r14		
    d7c4:	0f 6f       	rlc	r15		
    d7c6:	17 83       	dec	r7		
    d7c8:	fc 23       	jnz	$-6      	;abs 0xd7c2
    d7ca:	3e 53       	add	#-1,	r14	;r3 As==11
    d7cc:	3f 63       	addc	#-1,	r15	;r3 As==11
    d7ce:	0e fa       	and	r10,	r14	
    d7d0:	0f fb       	and	r11,	r15	
    d7d2:	0e 93       	tst	r14		
    d7d4:	15 24       	jz	$+44     	;abs 0xd800
    d7d6:	0c 93       	tst	r12		
    d7d8:	05 24       	jz	$+12     	;abs 0xd7e4
    d7da:	12 c3       	clrc			
    d7dc:	0b 10       	rrc	r11		
    d7de:	0a 10       	rrc	r10		
    d7e0:	1c 83       	dec	r12		
    d7e2:	fb 23       	jnz	$-8      	;abs 0xd7da
    d7e4:	0e 48       	mov	r8,	r14	
    d7e6:	0f 49       	mov	r9,	r15	
    d7e8:	0e da       	bis	r10,	r14	
    d7ea:	0f db       	bis	r11,	r15	
    d7ec:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    d7f0:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    d7f4:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    d7f8:	0f 8d       	sub	r13,	r15	
    d7fa:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d7fe:	c8 3f       	jmp	$-110    	;abs 0xd790
    d800:	0f 93       	tst	r15		
    d802:	e9 23       	jnz	$-44     	;abs 0xd7d6
    d804:	08 43       	clr	r8		
    d806:	09 43       	clr	r9		
    d808:	e6 3f       	jmp	$-50     	;abs 0xd7d6

0000d80a <__clzsi2>:
    d80a:	0b 12       	push	r11		
    d80c:	0f 93       	tst	r15		
    d80e:	16 20       	jnz	$+46     	;abs 0xd83c
    d810:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    d814:	21 28       	jnc	$+68     	;abs 0xd858
    d816:	3b 40 18 00 	mov	#24,	r11	;#0x0018
    d81a:	0c 43       	clr	r12		
    d81c:	3d 42       	mov	#8,	r13	;r2 As==11
    d81e:	0d 93       	tst	r13		
    d820:	05 24       	jz	$+12     	;abs 0xd82c
    d822:	12 c3       	clrc			
    d824:	0f 10       	rrc	r15		
    d826:	0e 10       	rrc	r14		
    d828:	1d 83       	dec	r13		
    d82a:	fb 23       	jnz	$-8      	;abs 0xd822
    d82c:	0f 4e       	mov	r14,	r15	
    d82e:	3f 50 0c dc 	add	#-9204,	r15	;#0xdc0c
    d832:	6d 4f       	mov.b	@r15,	r13	
    d834:	0f 4b       	mov	r11,	r15	
    d836:	0f 8d       	sub	r13,	r15	
    d838:	3b 41       	pop	r11		
    d83a:	30 41       	ret			
    d83c:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    d840:	05 28       	jnc	$+12     	;abs 0xd84c
    d842:	3b 42       	mov	#8,	r11	;r2 As==11
    d844:	0c 43       	clr	r12		
    d846:	3d 40 18 00 	mov	#24,	r13	;#0x0018
    d84a:	e9 3f       	jmp	$-44     	;abs 0xd81e
    d84c:	3b 40 10 00 	mov	#16,	r11	;#0x0010
    d850:	0c 43       	clr	r12		
    d852:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    d856:	e3 3f       	jmp	$-56     	;abs 0xd81e
    d858:	3b 40 20 00 	mov	#32,	r11	;#0x0020
    d85c:	0c 43       	clr	r12		
    d85e:	0d 43       	clr	r13		
    d860:	de 3f       	jmp	$-66     	;abs 0xd81e

0000d862 <__pack_f>:
    d862:	0b 12       	push	r11		
    d864:	0a 12       	push	r10		
    d866:	09 12       	push	r9		
    d868:	08 12       	push	r8		
    d86a:	07 12       	push	r7		
    d86c:	06 12       	push	r6		
    d86e:	1d 4f 04 00 	mov	4(r15),	r13	;0x0004(r15)
    d872:	1e 4f 06 00 	mov	6(r15),	r14	;0x0006(r15)
    d876:	5a 4f 01 00 	mov.b	1(r15),	r10	;0x0001(r15)
    d87a:	6c 4f       	mov.b	@r15,	r12	
    d87c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d87e:	bc 28       	jnc	$+378    	;abs 0xd9f8
    d880:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d882:	b6 24       	jz	$+366    	;abs 0xd9f0
    d884:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d886:	32 24       	jz	$+102    	;abs 0xd8ec
    d888:	0d 93       	tst	r13		
    d88a:	2e 24       	jz	$+94     	;abs 0xd8e8
    d88c:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    d890:	3f 90 82 ff 	cmp	#-126,	r15	;#0xff82
    d894:	61 38       	jl	$+196    	;abs 0xd958
    d896:	3f 90 80 00 	cmp	#128,	r15	;#0x0080
    d89a:	aa 34       	jge	$+342    	;abs 0xd9f0
    d89c:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    d8a0:	0b 4d       	mov	r13,	r11	
    d8a2:	0c 4e       	mov	r14,	r12	
    d8a4:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    d8a8:	0c f3       	and	#0,	r12	;r3 As==00
    d8aa:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    d8ae:	47 24       	jz	$+144    	;abs 0xd93e
    d8b0:	3d 50 3f 00 	add	#63,	r13	;#0x003f
    d8b4:	0e 63       	adc	r14		
    d8b6:	0e 93       	tst	r14		
    d8b8:	04 34       	jge	$+10     	;abs 0xd8c2
    d8ba:	12 c3       	clrc			
    d8bc:	0e 10       	rrc	r14		
    d8be:	0d 10       	rrc	r13		
    d8c0:	1f 53       	inc	r15		
    d8c2:	12 c3       	clrc			
    d8c4:	0e 10       	rrc	r14		
    d8c6:	0d 10       	rrc	r13		
    d8c8:	0e 11       	rra	r14		
    d8ca:	0d 10       	rrc	r13		
    d8cc:	0e 11       	rra	r14		
    d8ce:	0d 10       	rrc	r13		
    d8d0:	0e 11       	rra	r14		
    d8d2:	0d 10       	rrc	r13		
    d8d4:	0e 11       	rra	r14		
    d8d6:	0d 10       	rrc	r13		
    d8d8:	0e 11       	rra	r14		
    d8da:	0d 10       	rrc	r13		
    d8dc:	0e 11       	rra	r14		
    d8de:	0d 10       	rrc	r13		
    d8e0:	3d f3       	and	#-1,	r13	;r3 As==11
    d8e2:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d8e6:	05 3c       	jmp	$+12     	;abs 0xd8f2
    d8e8:	0e 93       	tst	r14		
    d8ea:	d0 23       	jnz	$-94     	;abs 0xd88c
    d8ec:	4f 43       	clr.b	r15		
    d8ee:	0d 43       	clr	r13		
    d8f0:	0e 43       	clr	r14		
    d8f2:	0b 43       	clr	r11		
    d8f4:	0c 43       	clr	r12		
    d8f6:	0b 4d       	mov	r13,	r11	
    d8f8:	0d 4e       	mov	r14,	r13	
    d8fa:	3d f0 7f 00 	and	#127,	r13	;#0x007f
    d8fe:	0e 4c       	mov	r12,	r14	
    d900:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    d904:	0e dd       	bis	r13,	r14	
    d906:	4f 4f       	mov.b	r15,	r15	
    d908:	0f 5f       	rla	r15		
    d90a:	0f 5f       	rla	r15		
    d90c:	0f 5f       	rla	r15		
    d90e:	0f 5f       	rla	r15		
    d910:	0f 5f       	rla	r15		
    d912:	0f 5f       	rla	r15		
    d914:	0f 5f       	rla	r15		
    d916:	3e f0 7f 80 	and	#-32641,r14	;#0x807f
    d91a:	0e df       	bis	r15,	r14	
    d91c:	0f 4a       	mov	r10,	r15	
    d91e:	0f 11       	rra	r15		
    d920:	0f 43       	clr	r15		
    d922:	0f 10       	rrc	r15		
    d924:	3e f0 ff 7f 	and	#32767,	r14	;#0x7fff
    d928:	0c 4e       	mov	r14,	r12	
    d92a:	0c df       	bis	r15,	r12	
    d92c:	0e 4b       	mov	r11,	r14	
    d92e:	0f 4c       	mov	r12,	r15	
    d930:	36 41       	pop	r6		
    d932:	37 41       	pop	r7		
    d934:	38 41       	pop	r8		
    d936:	39 41       	pop	r9		
    d938:	3a 41       	pop	r10		
    d93a:	3b 41       	pop	r11		
    d93c:	30 41       	ret			
    d93e:	0c 93       	tst	r12		
    d940:	b7 23       	jnz	$-144    	;abs 0xd8b0
    d942:	0b 4d       	mov	r13,	r11	
    d944:	0c 4e       	mov	r14,	r12	
    d946:	3b f0 80 00 	and	#128,	r11	;#0x0080
    d94a:	0c f3       	and	#0,	r12	;r3 As==00
    d94c:	0b 93       	tst	r11		
    d94e:	4d 24       	jz	$+156    	;abs 0xd9ea
    d950:	3d 50 40 00 	add	#64,	r13	;#0x0040
    d954:	0e 63       	adc	r14		
    d956:	af 3f       	jmp	$-160    	;abs 0xd8b6
    d958:	3c 40 82 ff 	mov	#-126,	r12	;#0xff82
    d95c:	0c 8f       	sub	r15,	r12	
    d95e:	0f 4c       	mov	r12,	r15	
    d960:	3c 90 1a 00 	cmp	#26,	r12	;#0x001a
    d964:	51 34       	jge	$+164    	;abs 0xda08
    d966:	06 4d       	mov	r13,	r6	
    d968:	07 4e       	mov	r14,	r7	
    d96a:	0c 93       	tst	r12		
    d96c:	05 24       	jz	$+12     	;abs 0xd978
    d96e:	12 c3       	clrc			
    d970:	07 10       	rrc	r7		
    d972:	06 10       	rrc	r6		
    d974:	1c 83       	dec	r12		
    d976:	fb 23       	jnz	$-8      	;abs 0xd96e
    d978:	18 43       	mov	#1,	r8	;r3 As==01
    d97a:	09 43       	clr	r9		
    d97c:	0b 48       	mov	r8,	r11	
    d97e:	0c 49       	mov	r9,	r12	
    d980:	0f 93       	tst	r15		
    d982:	04 24       	jz	$+10     	;abs 0xd98c
    d984:	0b 5b       	rla	r11		
    d986:	0c 6c       	rlc	r12		
    d988:	1f 83       	dec	r15		
    d98a:	fc 23       	jnz	$-6      	;abs 0xd984
    d98c:	3b 53       	add	#-1,	r11	;r3 As==11
    d98e:	3c 63       	addc	#-1,	r12	;r3 As==11
    d990:	0b fd       	and	r13,	r11	
    d992:	0c fe       	and	r14,	r12	
    d994:	0b 93       	tst	r11		
    d996:	48 24       	jz	$+146    	;abs 0xda28
    d998:	0b 46       	mov	r6,	r11	
    d99a:	0c 47       	mov	r7,	r12	
    d99c:	0b d8       	bis	r8,	r11	
    d99e:	0c d9       	bis	r9,	r12	
    d9a0:	0e 4b       	mov	r11,	r14	
    d9a2:	0f 4c       	mov	r12,	r15	
    d9a4:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d9a8:	0f f3       	and	#0,	r15	;r3 As==00
    d9aa:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    d9ae:	2f 24       	jz	$+96     	;abs 0xda0e
    d9b0:	3b 50 3f 00 	add	#63,	r11	;#0x003f
    d9b4:	0c 63       	adc	r12		
    d9b6:	0d 4b       	mov	r11,	r13	
    d9b8:	0e 4c       	mov	r12,	r14	
    d9ba:	12 c3       	clrc			
    d9bc:	0e 10       	rrc	r14		
    d9be:	0d 10       	rrc	r13		
    d9c0:	0e 11       	rra	r14		
    d9c2:	0d 10       	rrc	r13		
    d9c4:	0e 11       	rra	r14		
    d9c6:	0d 10       	rrc	r13		
    d9c8:	0e 11       	rra	r14		
    d9ca:	0d 10       	rrc	r13		
    d9cc:	0e 11       	rra	r14		
    d9ce:	0d 10       	rrc	r13		
    d9d0:	0e 11       	rra	r14		
    d9d2:	0d 10       	rrc	r13		
    d9d4:	0e 11       	rra	r14		
    d9d6:	0d 10       	rrc	r13		
    d9d8:	3d f3       	and	#-1,	r13	;r3 As==11
    d9da:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d9de:	5f 43       	mov.b	#1,	r15	;r3 As==01
    d9e0:	3c 90 00 40 	cmp	#16384,	r12	;#0x4000
    d9e4:	86 2f       	jc	$-242    	;abs 0xd8f2
    d9e6:	4f 43       	clr.b	r15		
    d9e8:	84 3f       	jmp	$-246    	;abs 0xd8f2
    d9ea:	0c 93       	tst	r12		
    d9ec:	b1 23       	jnz	$-156    	;abs 0xd950
    d9ee:	63 3f       	jmp	$-312    	;abs 0xd8b6
    d9f0:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    d9f2:	0d 43       	clr	r13		
    d9f4:	0e 43       	clr	r14		
    d9f6:	7d 3f       	jmp	$-260    	;abs 0xd8f2
    d9f8:	0d d3       	bis	#0,	r13	;r3 As==00
    d9fa:	3e d0 10 00 	bis	#16,	r14	;#0x0010
    d9fe:	3d f3       	and	#-1,	r13	;r3 As==11
    da00:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    da04:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    da06:	75 3f       	jmp	$-276    	;abs 0xd8f2
    da08:	0b 43       	clr	r11		
    da0a:	0c 43       	clr	r12		
    da0c:	d1 3f       	jmp	$-92     	;abs 0xd9b0
    da0e:	0f 93       	tst	r15		
    da10:	cf 23       	jnz	$-96     	;abs 0xd9b0
    da12:	0e 4b       	mov	r11,	r14	
    da14:	0f 4c       	mov	r12,	r15	
    da16:	3e f0 80 00 	and	#128,	r14	;#0x0080
    da1a:	0f f3       	and	#0,	r15	;r3 As==00
    da1c:	0e 93       	tst	r14		
    da1e:	09 24       	jz	$+20     	;abs 0xda32
    da20:	3b 50 40 00 	add	#64,	r11	;#0x0040
    da24:	0c 63       	adc	r12		
    da26:	c7 3f       	jmp	$-112    	;abs 0xd9b6
    da28:	0c 93       	tst	r12		
    da2a:	b6 23       	jnz	$-146    	;abs 0xd998
    da2c:	08 43       	clr	r8		
    da2e:	09 43       	clr	r9		
    da30:	b3 3f       	jmp	$-152    	;abs 0xd998
    da32:	0f 93       	tst	r15		
    da34:	f5 23       	jnz	$-20     	;abs 0xda20
    da36:	bf 3f       	jmp	$-128    	;abs 0xd9b6

0000da38 <__unpack_f>:
    da38:	0b 12       	push	r11		
    da3a:	0a 12       	push	r10		
    da3c:	09 12       	push	r9		
    da3e:	0b 4e       	mov	r14,	r11	
    da40:	2d 4f       	mov	@r15,	r13	
    da42:	5e 4f 02 00 	mov.b	2(r15),	r14	;0x0002(r15)
    da46:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    da4a:	1c 4f 02 00 	mov	2(r15),	r12	;0x0002(r15)
    da4e:	12 c3       	clrc			
    da50:	0c 10       	rrc	r12		
    da52:	0c 11       	rra	r12		
    da54:	0c 11       	rra	r12		
    da56:	0c 11       	rra	r12		
    da58:	0c 11       	rra	r12		
    da5a:	0c 11       	rra	r12		
    da5c:	12 c3       	clrc			
    da5e:	0c 10       	rrc	r12		
    da60:	4c 4c       	mov.b	r12,	r12	
    da62:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    da66:	4f 5f       	rla.b	r15		
    da68:	4f 43       	clr.b	r15		
    da6a:	4f 6f       	rlc.b	r15		
    da6c:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
    da70:	0c 93       	tst	r12		
    da72:	34 20       	jnz	$+106    	;abs 0xdadc
    da74:	0d 93       	tst	r13		
    da76:	57 24       	jz	$+176    	;abs 0xdb26
    da78:	bb 40 82 ff 	mov	#-126,	2(r11)	;#0xff82, 0x0002(r11)
    da7c:	02 00 
    da7e:	0d 5d       	rla	r13		
    da80:	0e 6e       	rlc	r14		
    da82:	0d 5d       	rla	r13		
    da84:	0e 6e       	rlc	r14		
    da86:	0d 5d       	rla	r13		
    da88:	0e 6e       	rlc	r14		
    da8a:	0d 5d       	rla	r13		
    da8c:	0e 6e       	rlc	r14		
    da8e:	0d 5d       	rla	r13		
    da90:	0e 6e       	rlc	r14		
    da92:	0d 5d       	rla	r13		
    da94:	0e 6e       	rlc	r14		
    da96:	0d 5d       	rla	r13		
    da98:	0e 6e       	rlc	r14		
    da9a:	0a 4d       	mov	r13,	r10	
    da9c:	0f 4e       	mov	r14,	r15	
    da9e:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    daa2:	00 00 
    daa4:	3d 43       	mov	#-1,	r13	;r3 As==11
    daa6:	3e 40 ff 3f 	mov	#16383,	r14	;#0x3fff
    daaa:	0e 9f       	cmp	r15,	r14	
    daac:	0f 28       	jnc	$+32     	;abs 0xdacc
    daae:	3c 40 81 ff 	mov	#-127,	r12	;#0xff81
    dab2:	09 4e       	mov	r14,	r9	
    dab4:	0d 4a       	mov	r10,	r13	
    dab6:	0e 4f       	mov	r15,	r14	
    dab8:	0d 5d       	rla	r13		
    daba:	0e 6e       	rlc	r14		
    dabc:	0a 4d       	mov	r13,	r10	
    dabe:	0f 4e       	mov	r14,	r15	
    dac0:	0e 4c       	mov	r12,	r14	
    dac2:	3c 53       	add	#-1,	r12	;r3 As==11
    dac4:	09 9f       	cmp	r15,	r9	
    dac6:	f6 2f       	jc	$-18     	;abs 0xdab4
    dac8:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    dacc:	8b 4a 04 00 	mov	r10,	4(r11)	;0x0004(r11)
    dad0:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    dad4:	39 41       	pop	r9		
    dad6:	3a 41       	pop	r10		
    dad8:	3b 41       	pop	r11		
    dada:	30 41       	ret			
    dadc:	3c 90 ff 00 	cmp	#255,	r12	;#0x00ff
    dae0:	2a 24       	jz	$+86     	;abs 0xdb36
    dae2:	3c 50 81 ff 	add	#-127,	r12	;#0xff81
    dae6:	8b 4c 02 00 	mov	r12,	2(r11)	;0x0002(r11)
    daea:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    daee:	00 00 
    daf0:	0d 5d       	rla	r13		
    daf2:	0e 6e       	rlc	r14		
    daf4:	0d 5d       	rla	r13		
    daf6:	0e 6e       	rlc	r14		
    daf8:	0d 5d       	rla	r13		
    dafa:	0e 6e       	rlc	r14		
    dafc:	0d 5d       	rla	r13		
    dafe:	0e 6e       	rlc	r14		
    db00:	0d 5d       	rla	r13		
    db02:	0e 6e       	rlc	r14		
    db04:	0d 5d       	rla	r13		
    db06:	0e 6e       	rlc	r14		
    db08:	0d 5d       	rla	r13		
    db0a:	0e 6e       	rlc	r14		
    db0c:	09 4d       	mov	r13,	r9	
    db0e:	0a 4e       	mov	r14,	r10	
    db10:	09 d3       	bis	#0,	r9	;r3 As==00
    db12:	3a d0 00 40 	bis	#16384,	r10	;#0x4000
    db16:	8b 49 04 00 	mov	r9,	4(r11)	;0x0004(r11)
    db1a:	8b 4a 06 00 	mov	r10,	6(r11)	;0x0006(r11)
    db1e:	39 41       	pop	r9		
    db20:	3a 41       	pop	r10		
    db22:	3b 41       	pop	r11		
    db24:	30 41       	ret			
    db26:	0e 93       	tst	r14		
    db28:	a7 23       	jnz	$-176    	;abs 0xda78
    db2a:	eb 43 00 00 	mov.b	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    db2e:	39 41       	pop	r9		
    db30:	3a 41       	pop	r10		
    db32:	3b 41       	pop	r11		
    db34:	30 41       	ret			
    db36:	0d 93       	tst	r13		
    db38:	0e 24       	jz	$+30     	;abs 0xdb56
    db3a:	09 4d       	mov	r13,	r9	
    db3c:	0a 4e       	mov	r14,	r10	
    db3e:	09 f3       	and	#0,	r9	;r3 As==00
    db40:	3a f0 10 00 	and	#16,	r10	;#0x0010
    db44:	09 93       	tst	r9		
    db46:	0c 24       	jz	$+26     	;abs 0xdb60
    db48:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)
    db4c:	8b 4d 04 00 	mov	r13,	4(r11)	;0x0004(r11)
    db50:	8b 4e 06 00 	mov	r14,	6(r11)	;0x0006(r11)
    db54:	e4 3f       	jmp	$-54     	;abs 0xdb1e
    db56:	0e 93       	tst	r14		
    db58:	f0 23       	jnz	$-30     	;abs 0xdb3a
    db5a:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    db5e:	df 3f       	jmp	$-64     	;abs 0xdb1e
    db60:	0a 93       	tst	r10		
    db62:	f2 23       	jnz	$-26     	;abs 0xdb48
    db64:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    db68:	f1 3f       	jmp	$-28     	;abs 0xdb4c

0000db6a <__fpcmp_parts_f>:
    db6a:	0b 12       	push	r11		
    db6c:	6d 4f       	mov.b	@r15,	r13	
    db6e:	5b 43       	mov.b	#1,	r11	;r3 As==01
    db70:	4b 9d       	cmp.b	r13,	r11	
    db72:	12 2c       	jc	$+38     	;abs 0xdb98
    db74:	6c 4e       	mov.b	@r14,	r12	
    db76:	4b 9c       	cmp.b	r12,	r11	
    db78:	0f 2c       	jc	$+32     	;abs 0xdb98
    db7a:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    db7c:	3f 24       	jz	$+128    	;abs 0xdbfc
    db7e:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    db80:	11 24       	jz	$+36     	;abs 0xdba4
    db82:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    db84:	0d 24       	jz	$+28     	;abs 0xdba0
    db86:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    db88:	14 24       	jz	$+42     	;abs 0xdbb2
    db8a:	5d 4f 01 00 	mov.b	1(r15),	r13	;0x0001(r15)
    db8e:	5d 9e 01 00 	cmp.b	1(r14),	r13	;0x0001(r14)
    db92:	14 24       	jz	$+42     	;abs 0xdbbc
    db94:	4d 93       	tst.b	r13		
    db96:	09 20       	jnz	$+20     	;abs 0xdbaa
    db98:	1e 43       	mov	#1,	r14	;r3 As==01
    db9a:	0f 4e       	mov	r14,	r15	
    db9c:	3b 41       	pop	r11		
    db9e:	30 41       	ret			
    dba0:	4c 9d       	cmp.b	r13,	r12	
    dba2:	26 24       	jz	$+78     	;abs 0xdbf0
    dba4:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    dba8:	f7 23       	jnz	$-16     	;abs 0xdb98
    dbaa:	3e 43       	mov	#-1,	r14	;r3 As==11
    dbac:	0f 4e       	mov	r14,	r15	
    dbae:	3b 41       	pop	r11		
    dbb0:	30 41       	ret			
    dbb2:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    dbb6:	f0 27       	jz	$-30     	;abs 0xdb98
    dbb8:	3e 43       	mov	#-1,	r14	;r3 As==11
    dbba:	f8 3f       	jmp	$-14     	;abs 0xdbac
    dbbc:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    dbc0:	1c 4e 02 00 	mov	2(r14),	r12	;0x0002(r14)
    dbc4:	0c 9b       	cmp	r11,	r12	
    dbc6:	e6 3b       	jl	$-50     	;abs 0xdb94
    dbc8:	0b 9c       	cmp	r12,	r11	
    dbca:	14 38       	jl	$+42     	;abs 0xdbf4
    dbcc:	1b 4f 04 00 	mov	4(r15),	r11	;0x0004(r15)
    dbd0:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    dbd4:	1c 4e 04 00 	mov	4(r14),	r12	;0x0004(r14)
    dbd8:	1e 4e 06 00 	mov	6(r14),	r14	;0x0006(r14)
    dbdc:	0e 9f       	cmp	r15,	r14	
    dbde:	da 2b       	jnc	$-74     	;abs 0xdb94
    dbe0:	0f 9e       	cmp	r14,	r15	
    dbe2:	08 28       	jnc	$+18     	;abs 0xdbf4
    dbe4:	0c 9b       	cmp	r11,	r12	
    dbe6:	d6 2b       	jnc	$-82     	;abs 0xdb94
    dbe8:	0e 9f       	cmp	r15,	r14	
    dbea:	02 28       	jnc	$+6      	;abs 0xdbf0
    dbec:	0b 9c       	cmp	r12,	r11	
    dbee:	02 28       	jnc	$+6      	;abs 0xdbf4
    dbf0:	0e 43       	clr	r14		
    dbf2:	d3 3f       	jmp	$-88     	;abs 0xdb9a
    dbf4:	4d 93       	tst.b	r13		
    dbf6:	d0 23       	jnz	$-94     	;abs 0xdb98
    dbf8:	3e 43       	mov	#-1,	r14	;r3 As==11
    dbfa:	d8 3f       	jmp	$-78     	;abs 0xdbac
    dbfc:	4c 9d       	cmp.b	r13,	r12	
    dbfe:	d9 23       	jnz	$-76     	;abs 0xdbb2
    dc00:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    dc04:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    dc08:	0e 8f       	sub	r15,	r14	
    dc0a:	c7 3f       	jmp	$-112    	;abs 0xdb9a

0000dc0c <__clz_tab>:
    dc0c:	00 01 02 02 03 03 03 03 04 04 04 04 04 04 04 04     ................
    dc1c:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    dc2c:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    dc3c:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    dc4c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    dc5c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    dc6c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    dc7c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    dc8c:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dc9c:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dcac:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dcbc:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dccc:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dcdc:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dcec:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    dcfc:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................

0000dd0c <__udivmodhi4>:
    dd0c:	0e ee       	xor	r14,	r14	
    dd0e:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    dd12:	05 3c       	jmp	$+12     	;abs 0xdd1e
    dd14:	0d 10       	rrc	r13		
    dd16:	0e 6e       	rlc	r14		
    dd18:	0e 9a       	cmp	r10,	r14	
    dd1a:	01 28       	jnc	$+4      	;abs 0xdd1e
    dd1c:	0e 8a       	sub	r10,	r14	
    dd1e:	0c 6c       	rlc	r12		
    dd20:	0d 6d       	rlc	r13		
    dd22:	1b 83       	dec	r11		
    dd24:	f7 23       	jnz	$-16     	;abs 0xdd14
    dd26:	30 41       	ret			

0000dd28 <__divmodsi4>:
    dd28:	08 43       	clr	r8		
    dd2a:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    dd2e:	05 24       	jz	$+12     	;abs 0xdd3a
    dd30:	3d e3       	inv	r13		
    dd32:	3c e3       	inv	r12		
    dd34:	1c 53       	inc	r12		
    dd36:	0d 63       	adc	r13		
    dd38:	28 d2       	bis	#4,	r8	;r2 As==10
    dd3a:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    dd3e:	05 24       	jz	$+12     	;abs 0xdd4a
    dd40:	3b e3       	inv	r11		
    dd42:	3a e3       	inv	r10		
    dd44:	1a 53       	inc	r10		
    dd46:	0b 63       	adc	r11		
    dd48:	38 d2       	bis	#8,	r8	;r2 As==11
    dd4a:	b0 12 72 dd 	call	#0xdd72	
    dd4e:	08 10       	rrc	r8		
    dd50:	28 b2       	bit	#4,	r8	;r2 As==10
    dd52:	08 24       	jz	$+18     	;abs 0xdd64
    dd54:	3e e3       	inv	r14		
    dd56:	3f e3       	inv	r15		
    dd58:	1e 53       	inc	r14		
    dd5a:	0f 63       	adc	r15		
    dd5c:	3c e3       	inv	r12		
    dd5e:	3d e3       	inv	r13		
    dd60:	1c 53       	inc	r12		
    dd62:	0d 63       	adc	r13		
    dd64:	38 b2       	bit	#8,	r8	;r2 As==11
    dd66:	04 24       	jz	$+10     	;abs 0xdd70
    dd68:	3c e3       	inv	r12		
    dd6a:	3d e3       	inv	r13		
    dd6c:	1c 53       	inc	r12		
    dd6e:	0d 63       	adc	r13		
    dd70:	30 41       	ret			

0000dd72 <__udivmodsi4>:
    dd72:	0f ef       	xor	r15,	r15	
    dd74:	0e ee       	xor	r14,	r14	
    dd76:	39 40 21 00 	mov	#33,	r9	;#0x0021
    dd7a:	0a 3c       	jmp	$+22     	;abs 0xdd90
    dd7c:	08 10       	rrc	r8		
    dd7e:	0e 6e       	rlc	r14		
    dd80:	0f 6f       	rlc	r15		
    dd82:	0f 9b       	cmp	r11,	r15	
    dd84:	05 28       	jnc	$+12     	;abs 0xdd90
    dd86:	02 20       	jnz	$+6      	;abs 0xdd8c
    dd88:	0e 9a       	cmp	r10,	r14	
    dd8a:	02 28       	jnc	$+6      	;abs 0xdd90
    dd8c:	0e 8a       	sub	r10,	r14	
    dd8e:	0f 7b       	subc	r11,	r15	
    dd90:	0c 6c       	rlc	r12		
    dd92:	0d 6d       	rlc	r13		
    dd94:	08 68       	rlc	r8		
    dd96:	19 83       	dec	r9		
    dd98:	f1 23       	jnz	$-28     	;abs 0xdd7c
    dd9a:	30 41       	ret			

0000dd9c <_unexpected_>:
    dd9c:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	5c c0 5c c0 58 cc e8 cc 5c c0 5c c0 12 c1 e8 c0     \.\.X...\.\.....
    fff0:	5c c0 5c c0 5c c0 5c c0 5c c0 5c c0 5c c0 00 c0     \.\.\.\.\.\.\...
