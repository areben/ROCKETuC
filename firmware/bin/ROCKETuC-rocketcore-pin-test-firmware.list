
firmware.elf:     file format elf32-msp430


Disassembly of section .text:

0000c000 <__init_stack>:
    c000:	31 40 00 04 	mov	#1024,	r1	;#0x0400

0000c004 <__low_level_init>:
    c004:	15 42 20 01 	mov	&0x0120,r5	
    c008:	75 f3       	and.b	#-1,	r5	;r3 As==11
    c00a:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08

0000c00e <__do_copy_data>:
    c00e:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c012:	0f 93       	tst	r15		
    c014:	07 24       	jz	$+16     	;abs 0xc024
    c016:	82 45 20 01 	mov	r5,	&0x0120	
    c01a:	2f 83       	decd	r15		
    c01c:	9f 4f ae e1 	mov	-7762(r15),512(r15);0xe1ae(r15), 0x0200(r15)
    c020:	00 02 
    c022:	f9 23       	jnz	$-12     	;abs 0xc016

0000c024 <__do_clear_bss>:
    c024:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    c028:	0f 93       	tst	r15		
    c02a:	06 24       	jz	$+14     	;abs 0xc038
    c02c:	82 45 20 01 	mov	r5,	&0x0120	
    c030:	1f 83       	dec	r15		
    c032:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    c036:	fa 23       	jnz	$-10     	;abs 0xc02c

0000c038 <main>:
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
}

int main(void)
{
	clock_init();
    c038:	b0 12 b8 c4 	call	#0xc4b8	

	pin_reserve(PIN_1_1);
    c03c:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    c040:	b0 12 9e cc 	call	#0xcc9e	
	pin_reserve(PIN_1_2);
    c044:	7f 40 12 00 	mov.b	#18,	r15	;#0x0012
    c048:	b0 12 9e cc 	call	#0xcc9e	

	serial_init(9600);
    c04c:	3f 40 80 25 	mov	#9600,	r15	;#0x2580
    c050:	b0 12 de c8 	call	#0xc8de	

	cio_print("** ROCKETuC - librocketcore PIN test **\n\r");
    c054:	3f 40 f6 c5 	mov	#-14858,r15	;#0xc5f6
    c058:	b0 12 d2 c9 	call	#0xc9d2	

	dump_regs("initial");
    c05c:	3f 40 20 c6 	mov	#-14816,r15	;#0xc620
    c060:	b0 12 28 c5 	call	#0xc528	

	// invalid port
	if(pin_setup(0x30, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPORT) {
    c064:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c068:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c06c:	b0 12 ba cd 	call	#0xcdba	
    c070:	3f 90 fe ff 	cmp	#-2,	r15	;#0xfffe
    c074:	04 20       	jnz	$+10     	;abs 0xc07e
		cio_print("0x30 is an invalid port\n\r");
    c076:	3f 40 28 c6 	mov	#-14808,r15	;#0xc628
    c07a:	b0 12 d2 c9 	call	#0xc9d2	
	}
	
	// invalid pin
	if(pin_setup(0x2A, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c07e:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c082:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    c086:	b0 12 ba cd 	call	#0xcdba	
    c08a:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c08e:	04 20       	jnz	$+10     	;abs 0xc098
		cio_print("0x2A is an invalid pin\n\r");
    c090:	3f 40 42 c6 	mov	#-14782,r15	;#0xc642
    c094:	b0 12 d2 c9 	call	#0xc9d2	
	}

	// P1.1 + P1.2 are reserved for UART1
	if(pin_setup(PIN_1_1, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c098:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c09c:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    c0a0:	b0 12 ba cd 	call	#0xcdba	
    c0a4:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c0a8:	04 20       	jnz	$+10     	;abs 0xc0b2
		cio_print("0x11 is an invalid (reserved) pin\n\r");
    c0aa:	3f 40 5b c6 	mov	#-14757,r15	;#0xc65b
    c0ae:	b0 12 d2 c9 	call	#0xc9d2	
	}
	if(pin_setup(PIN_1_2, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c0b2:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c0b6:	7f 40 12 00 	mov.b	#18,	r15	;#0x0012
    c0ba:	b0 12 ba cd 	call	#0xcdba	
    c0be:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c0c2:	04 20       	jnz	$+10     	;abs 0xc0cc
		cio_print("0x12 is an invalid (reserved) pin\n\r");
    c0c4:	3f 40 7f c6 	mov	#-14721,r15	;#0xc67f
    c0c8:	b0 12 d2 c9 	call	#0xc9d2	
	// thus target duty cycle = 2.5% + delta % * 2.5
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
}

int main(void)
{
    c0cc:	0b 43       	clr	r11		

	// pins on port 2 do not support ADC
	int p;

	for(p = 0; p < 8; p++) { 
		if(pin_setup(PIN_2_0 + p, PIN_FUNCTION_ANALOG_IN) == PIN_STAT_ERR_UNSUPFUNC) {
    c0ce:	6e 42       	mov.b	#4,	r14	;r2 As==10
    c0d0:	4f 4b       	mov.b	r11,	r15	
    c0d2:	7f 50 20 00 	add.b	#32,	r15	;#0x0020
    c0d6:	b0 12 ba cd 	call	#0xcdba	
    c0da:	3f 93       	cmp	#-1,	r15	;r3 As==11
    c0dc:	06 20       	jnz	$+14     	;abs 0xc0ea
			cio_printf("0x2%i does not support ADC\n\r", p);
    c0de:	0b 12       	push	r11		
    c0e0:	30 12 a3 c6 	push	#-14685	;#0xc6a3
    c0e4:	b0 12 b8 ca 	call	#0xcab8	
    c0e8:	21 52       	add	#4,	r1	;r2 As==10
	}

	// pins on port 2 do not support ADC
	int p;

	for(p = 0; p < 8; p++) { 
    c0ea:	1b 53       	inc	r11		
    c0ec:	3b 92       	cmp	#8,	r11	;r2 As==11
    c0ee:	ef 23       	jnz	$-32     	;abs 0xc0ce
			cio_printf("0x2%i does not support ADC\n\r", p);
		}
	}
	
	// onyl one PIN at a time is allowed to be soft UART RX/TX
	cio_printf("Set UARTTX p1.4: %i\n\r",pin_setup(PIN_1_4, PIN_FUNCTION_UARTTX));
    c0f0:	7e 40 07 00 	mov.b	#7,	r14	;#0x0007
    c0f4:	7f 40 14 00 	mov.b	#20,	r15	;#0x0014
    c0f8:	b0 12 ba cd 	call	#0xcdba	
    c0fc:	0f 12       	push	r15		
    c0fe:	30 12 c0 c6 	push	#-14656	;#0xc6c0
    c102:	b0 12 b8 ca 	call	#0xcab8	
    c106:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("Set UARTTX p1.5: %i\n\r",pin_setup(PIN_1_5, PIN_FUNCTION_UARTTX));
    c108:	7e 40 07 00 	mov.b	#7,	r14	;#0x0007
    c10c:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c110:	b0 12 ba cd 	call	#0xcdba	
    c114:	0f 12       	push	r15		
    c116:	30 12 d6 c6 	push	#-14634	;#0xc6d6
    c11a:	b0 12 b8 ca 	call	#0xcab8	
    c11e:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("Set UARTRX p1.4: %i\n\r",pin_setup(PIN_1_4, PIN_FUNCTION_UARTRX));
    c120:	7e 40 06 00 	mov.b	#6,	r14	;#0x0006
    c124:	7f 40 14 00 	mov.b	#20,	r15	;#0x0014
    c128:	b0 12 ba cd 	call	#0xcdba	
    c12c:	0f 12       	push	r15		
    c12e:	30 12 ec c6 	push	#-14612	;#0xc6ec
    c132:	b0 12 b8 ca 	call	#0xcab8	
    c136:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("Set UARTRX p1.5: %i\n\r",pin_setup(PIN_1_5, PIN_FUNCTION_UARTRX));
    c138:	7e 40 06 00 	mov.b	#6,	r14	;#0x0006
    c13c:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c140:	b0 12 ba cd 	call	#0xcdba	
    c144:	0f 12       	push	r15		
    c146:	30 12 02 c7 	push	#-14590	;#0xc702
    c14a:	b0 12 b8 ca 	call	#0xcab8	
    c14e:	21 52       	add	#4,	r1	;r2 As==10


	// set P1.0 + P1.6 + P2.5 to output (the build in LEDs)
	pin_setup(PIN_1_0, PIN_FUNCTION_OUTPUT);
    c150:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c154:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c158:	b0 12 ba cd 	call	#0xcdba	
	pin_setup(PIN_1_6, PIN_FUNCTION_OUTPUT);
    c15c:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c160:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c164:	b0 12 ba cd 	call	#0xcdba	
	pin_setup(PIN_2_5, PIN_FUNCTION_OUTPUT);
    c168:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c16c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c170:	b0 12 ba cd 	call	#0xcdba	

	
	dump_regs("p1.0+p1.6+p2.5 output");
    c174:	3f 40 18 c7 	mov	#-14568,r15	;#0xc718
    c178:	b0 12 28 c5 	call	#0xc528	

	// set P1.0 + P1.6 + P2.5 to HIGH
	pin_set(PIN_1_0);
    c17c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c180:	b0 12 10 d0 	call	#0xd010	
	pin_set(PIN_1_6);
    c184:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c188:	b0 12 10 d0 	call	#0xd010	
	pin_set(PIN_2_5);
    c18c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c190:	b0 12 10 d0 	call	#0xd010	

	dump_regs("p1.0+p1.6+p2.5 set");
    c194:	3f 40 2e c7 	mov	#-14546,r15	;#0xc72e
    c198:	b0 12 28 c5 	call	#0xc528	

	// read P1.0 + P1.6 + p2.5 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c19c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c1a0:	b0 12 a8 d0 	call	#0xd0a8	
    c1a4:	0f 12       	push	r15		
    c1a6:	30 12 41 c7 	push	#-14527	;#0xc741
    c1aa:	b0 12 b8 ca 	call	#0xcab8	
    c1ae:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c1b0:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c1b4:	b0 12 a8 d0 	call	#0xd0a8	
    c1b8:	0f 12       	push	r15		
    c1ba:	30 12 4e c7 	push	#-14514	;#0xc74e
    c1be:	b0 12 b8 ca 	call	#0xcab8	
    c1c2:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c1c4:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c1c8:	b0 12 a8 d0 	call	#0xd0a8	
    c1cc:	0f 12       	push	r15		
    c1ce:	30 12 5b c7 	push	#-14501	;#0xc75b
    c1d2:	b0 12 b8 ca 	call	#0xcab8	
    c1d6:	21 52       	add	#4,	r1	;r2 As==10
	
	// clear P1.0 + p1.6 + p2.5 to LOW 
	pin_clear(PIN_1_0);
    c1d8:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c1dc:	b0 12 c4 cf 	call	#0xcfc4	
	pin_clear(PIN_1_6);
    c1e0:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c1e4:	b0 12 c4 cf 	call	#0xcfc4	
	pin_clear(PIN_2_5);
    c1e8:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c1ec:	b0 12 c4 cf 	call	#0xcfc4	

	dump_regs("p1.0+p1.6+p2.5 clear");
    c1f0:	3f 40 68 c7 	mov	#-14488,r15	;#0xc768
    c1f4:	b0 12 28 c5 	call	#0xc528	

	// read P1.0 + P1.6 + 2.5 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c1f8:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c1fc:	b0 12 a8 d0 	call	#0xd0a8	
    c200:	0f 12       	push	r15		
    c202:	30 12 41 c7 	push	#-14527	;#0xc741
    c206:	b0 12 b8 ca 	call	#0xcab8	
    c20a:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c20c:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c210:	b0 12 a8 d0 	call	#0xd0a8	
    c214:	0f 12       	push	r15		
    c216:	30 12 4e c7 	push	#-14514	;#0xc74e
    c21a:	b0 12 b8 ca 	call	#0xcab8	
    c21e:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c220:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c224:	b0 12 a8 d0 	call	#0xd0a8	
    c228:	0f 12       	push	r15		
    c22a:	30 12 5b c7 	push	#-14501	;#0xc75b
    c22e:	b0 12 b8 ca 	call	#0xcab8	
    c232:	21 52       	add	#4,	r1	;r2 As==10

	// toggle P1.0 + P1.6 + P2.5
	pin_toggle(PIN_1_0);
    c234:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c238:	b0 12 5c d0 	call	#0xd05c	
	pin_toggle(PIN_1_6);
    c23c:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c240:	b0 12 5c d0 	call	#0xd05c	
	pin_toggle(PIN_2_5);
    c244:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c248:	b0 12 5c d0 	call	#0xd05c	

	dump_regs("p1.0+p1.6+p2.5 toggle");
    c24c:	3f 40 7d c7 	mov	#-14467,r15	;#0xc77d
    c250:	b0 12 28 c5 	call	#0xc528	

	// read P1.0 + P1.6 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c254:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c258:	b0 12 a8 d0 	call	#0xd0a8	
    c25c:	0f 12       	push	r15		
    c25e:	30 12 41 c7 	push	#-14527	;#0xc741
    c262:	b0 12 b8 ca 	call	#0xcab8	
    c266:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c268:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c26c:	b0 12 a8 d0 	call	#0xd0a8	
    c270:	0f 12       	push	r15		
    c272:	30 12 4e c7 	push	#-14514	;#0xc74e
    c276:	b0 12 b8 ca 	call	#0xcab8	
    c27a:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c27c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c280:	b0 12 a8 d0 	call	#0xd0a8	
    c284:	0f 12       	push	r15		
    c286:	30 12 5b c7 	push	#-14501	;#0xc75b
    c28a:	b0 12 b8 ca 	call	#0xcab8	
    c28e:	21 52       	add	#4,	r1	;r2 As==10

	// toggle P1.0 + P1.6 + P2.5
	pin_toggle(PIN_1_0);
    c290:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c294:	b0 12 5c d0 	call	#0xd05c	
	pin_toggle(PIN_1_6);
    c298:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c29c:	b0 12 5c d0 	call	#0xd05c	
	pin_toggle(PIN_2_5);
    c2a0:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c2a4:	b0 12 5c d0 	call	#0xd05c	

	dump_regs("p1.0+p1.6+p2.5 toggle");
    c2a8:	3f 40 7d c7 	mov	#-14467,r15	;#0xc77d
    c2ac:	b0 12 28 c5 	call	#0xc528	

	// read P1.0 + P1.6 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c2b0:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c2b4:	b0 12 a8 d0 	call	#0xd0a8	
    c2b8:	0f 12       	push	r15		
    c2ba:	30 12 41 c7 	push	#-14527	;#0xc741
    c2be:	b0 12 b8 ca 	call	#0xcab8	
    c2c2:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c2c4:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c2c8:	b0 12 a8 d0 	call	#0xd0a8	
    c2cc:	0f 12       	push	r15		
    c2ce:	30 12 4e c7 	push	#-14514	;#0xc74e
    c2d2:	b0 12 b8 ca 	call	#0xcab8	
    c2d6:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c2d8:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c2dc:	b0 12 a8 d0 	call	#0xd0a8	
    c2e0:	0f 12       	push	r15		
    c2e2:	30 12 5b c7 	push	#-14501	;#0xc75b
    c2e6:	b0 12 b8 ca 	call	#0xcab8	
    c2ea:	21 52       	add	#4,	r1	;r2 As==10

	// set P1.3 to input float
	pin_setup(PIN_1_3, PIN_FUNCTION_INPUT_FLOAT);
    c2ec:	4e 43       	clr.b	r14		
    c2ee:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c2f2:	b0 12 ba cd 	call	#0xcdba	

	dump_regs("p1.3 input float");
    c2f6:	3f 40 93 c7 	mov	#-14445,r15	;#0xc793
    c2fa:	b0 12 28 c5 	call	#0xc528	

	cio_print("Press button on P1.3 to continue ...");
    c2fe:	3f 40 a4 c7 	mov	#-14428,r15	;#0xc7a4
    c302:	b0 12 d2 c9 	call	#0xc9d2	
    c306:	01 3c       	jmp	$+4      	;abs 0xc30a

	while(pin_digital_read(PIN_1_3)) __asm__("nop");
    c308:	03 43       	nop			
    c30a:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c30e:	b0 12 a8 d0 	call	#0xd0a8	
    c312:	0f 93       	tst	r15		
    c314:	f9 23       	jnz	$-12     	;abs 0xc308

	cio_print(" OK\n\r");
    c316:	3f 40 c9 c7 	mov	#-14391,r15	;#0xc7c9
    c31a:	b0 12 d2 c9 	call	#0xc9d2	
	
	// set P2.3 to input pull-down 
	pin_setup(PIN_2_3, PIN_FUNCTION_INPUT_PULLDOWN);
    c31e:	6e 43       	mov.b	#2,	r14	;r3 As==10
    c320:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c324:	b0 12 ba cd 	call	#0xcdba	

	dump_regs("p2.3 input pull-down");
    c328:	3f 40 cf c7 	mov	#-14385,r15	;#0xc7cf
    c32c:	b0 12 28 c5 	call	#0xc528	

	cio_print("Press button on P2.3 to continue ...");
    c330:	3f 40 e4 c7 	mov	#-14364,r15	;#0xc7e4
    c334:	b0 12 d2 c9 	call	#0xc9d2	
    c338:	01 3c       	jmp	$+4      	;abs 0xc33c

	while(!pin_digital_read(PIN_2_3)) __asm__("nop");
    c33a:	03 43       	nop			
    c33c:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c340:	b0 12 a8 d0 	call	#0xd0a8	
    c344:	0f 93       	tst	r15		
    c346:	f9 27       	jz	$-12     	;abs 0xc33a

	cio_print(" OK\n\r");
    c348:	3f 40 c9 c7 	mov	#-14391,r15	;#0xc7c9
    c34c:	b0 12 d2 c9 	call	#0xc9d2	
	
	// set P2.4 to input pull-down 
	pin_setup(PIN_2_4, PIN_FUNCTION_INPUT_PULLUP);
    c350:	5e 43       	mov.b	#1,	r14	;r3 As==01
    c352:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c356:	b0 12 ba cd 	call	#0xcdba	

	dump_regs("p2.4 input pull-up");
    c35a:	3f 40 09 c8 	mov	#-14327,r15	;#0xc809
    c35e:	b0 12 28 c5 	call	#0xc528	

	cio_print("Press button on P2.4 to continue ...");
    c362:	3f 40 1c c8 	mov	#-14308,r15	;#0xc81c
    c366:	b0 12 d2 c9 	call	#0xc9d2	
    c36a:	01 3c       	jmp	$+4      	;abs 0xc36e

	while(pin_digital_read(PIN_2_4)) __asm__("nop");
    c36c:	03 43       	nop			
    c36e:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c372:	b0 12 a8 d0 	call	#0xd0a8	
    c376:	09 4f       	mov	r15,	r9	
    c378:	0f 93       	tst	r15		
    c37a:	f8 23       	jnz	$-14     	;abs 0xc36c

	cio_print(" OK\n\r");
    c37c:	3f 40 c9 c7 	mov	#-14391,r15	;#0xc7c9
    c380:	b0 12 d2 c9 	call	#0xc9d2	
	
	pin_set(PIN_1_0);
    c384:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c388:	b0 12 10 d0 	call	#0xd010	
	pin_clear(PIN_1_6);
    c38c:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c390:	b0 12 c4 cf 	call	#0xcfc4	
	pin_clear(PIN_2_5);
    c394:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c398:	b0 12 c4 cf 	call	#0xcfc4	

	// set P1.5 to analog in
	int i = 0;

	cio_printf("setup 1.5 for analog in: %i\n\r", pin_setup(PIN_1_5, PIN_FUNCTION_ANALOG_IN));
    c39c:	6e 42       	mov.b	#4,	r14	;r2 As==10
    c39e:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c3a2:	b0 12 ba cd 	call	#0xcdba	
    c3a6:	0f 12       	push	r15		
    c3a8:	30 12 41 c8 	push	#-14271	;#0xc841
    c3ac:	b0 12 b8 ca 	call	#0xcab8	
    c3b0:	21 52       	add	#4,	r1	;r2 As==10
	dump_regs("p1.5 analog in");
    c3b2:	3f 40 5f c8 	mov	#-14241,r15	;#0xc85f
    c3b6:	b0 12 28 c5 	call	#0xc528	
	
	int adcin1 = pin_analog_read(PIN_1_5); 
    c3ba:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c3be:	b0 12 0a d1 	call	#0xd10a	
    c3c2:	0a 4f       	mov	r15,	r10	
	int adcin2 = 0; 
	cio_printf("Analog read p1.5: %x\n\r", adcin1);
    c3c4:	0f 12       	push	r15		
    c3c6:	30 12 6e c8 	push	#-14226	;#0xc86e
    c3ca:	b0 12 b8 ca 	call	#0xcab8	
    c3ce:	21 52       	add	#4,	r1	;r2 As==10

	// set P2.2 to PWM with period of 20ms and duty cycle of 7.5%
	cio_printf("setup 2.2 for PWM: %i\n\r", pin_setup(PIN_2_2, PIN_FUNCTION_PWM));
    c3d0:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c3d4:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c3d8:	b0 12 ba cd 	call	#0xcdba	
    c3dc:	0f 12       	push	r15		
    c3de:	30 12 85 c8 	push	#-14203	;#0xc885
    c3e2:	b0 12 b8 ca 	call	#0xcab8	
    c3e6:	21 52       	add	#4,	r1	;r2 As==10
	dump_regs("p2.2 PWM");
    c3e8:	3f 40 9d c8 	mov	#-14179,r15	;#0xc89d
    c3ec:	b0 12 28 c5 	call	#0xc528	

	// only one of the two possible pins on port two are allowed to be set to PWM
	cio_printf("setup 2.1 for PWM: %i\n\r", pin_setup(PIN_2_1, PIN_FUNCTION_PWM));
    c3f0:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c3f4:	7f 40 21 00 	mov.b	#33,	r15	;#0x0021
    c3f8:	b0 12 ba cd 	call	#0xcdba	
    c3fc:	0f 12       	push	r15		
    c3fe:	30 12 a6 c8 	push	#-14170	;#0xc8a6
    c402:	b0 12 b8 ca 	call	#0xcab8	
    c406:	21 52       	add	#4,	r1	;r2 As==10

	// period 
	pin_pwm_function(PIN_2_2, 20000);
    c408:	3e 40 20 4e 	mov	#20000,	r14	;#0x4e20
    c40c:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c410:	b0 12 68 d1 	call	#0xd168	
	pin_pwm_control(PIN_2_2, adc2dc(adcin1));
    c414:	0f 4a       	mov	r10,	r15	
    c416:	b0 12 ac c5 	call	#0xc5ac	
    c41a:	4e 4f       	mov.b	r15,	r14	
    c41c:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c420:	b0 12 d0 d1 	call	#0xd1d0	
		}

		adcin2 = pin_analog_read(PIN_1_5); 

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
    c424:	38 40 05 00 	mov	#5,	r8	;#0x0005
	// period 
	pin_pwm_function(PIN_2_2, 20000);
	pin_pwm_control(PIN_2_2, adc2dc(adcin1));

	while (1) {
		delay();
    c428:	b0 12 86 c5 	call	#0xc586	

		pin_toggle(PIN_1_0);
    c42c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c430:	b0 12 5c d0 	call	#0xd05c	
		pin_toggle(PIN_1_6);
    c434:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c438:	b0 12 5c d0 	call	#0xd05c	

		if(i++ % 2 == 0) {
    c43c:	0f 49       	mov	r9,	r15	
    c43e:	1f f3       	and	#1,	r15	;r3 As==01
    c440:	19 53       	inc	r9		
    c442:	0f 93       	tst	r15		
    c444:	04 20       	jnz	$+10     	;abs 0xc44e
			pin_toggle(PIN_2_5);
    c446:	7f 50 25 00 	add.b	#37,	r15	;#0x0025
    c44a:	b0 12 5c d0 	call	#0xd05c	
		}

		if(!pin_digital_read(PIN_1_3)) {
    c44e:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c452:	b0 12 a8 d0 	call	#0xd0a8	
    c456:	0f 93       	tst	r15		
    c458:	0c 20       	jnz	$+26     	;abs 0xc472
			pin_toggle(PIN_1_6);
    c45a:	7f 50 16 00 	add.b	#22,	r15	;#0x0016
    c45e:	b0 12 5c d0 	call	#0xd05c	
    c462:	01 3c       	jmp	$+4      	;abs 0xc466
			while(!pin_digital_read(PIN_1_3)) __asm__("nop");
    c464:	03 43       	nop			
    c466:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c46a:	b0 12 a8 d0 	call	#0xd0a8	
    c46e:	0f 93       	tst	r15		
    c470:	f9 27       	jz	$-12     	;abs 0xc464
		}

		adcin2 = pin_analog_read(PIN_1_5); 
    c472:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c476:	b0 12 0a d1 	call	#0xd10a	
    c47a:	0b 4f       	mov	r15,	r11	

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
    c47c:	0f 8a       	sub	r10,	r15	
    c47e:	08 9f       	cmp	r15,	r8	
    c480:	04 38       	jl	$+10     	;abs 0xc48a
    c482:	0f 4a       	mov	r10,	r15	
    c484:	0f 8b       	sub	r11,	r15	
    c486:	08 9f       	cmp	r15,	r8	
    c488:	cf 37       	jge	$-96     	;abs 0xc428
			adcin1 = adcin2;
			cio_printf("Analog read at p1.5: %x (%i)\n\r", adcin2, adcin2);
    c48a:	0b 12       	push	r11		
    c48c:	0b 12       	push	r11		
    c48e:	30 12 be c8 	push	#-14146	;#0xc8be
    c492:	b0 12 b8 ca 	call	#0xcab8	
    c496:	31 50 06 00 	add	#6,	r1	;#0x0006
			pin_pwm_control(PIN_2_2, adc2dc(adcin1));
    c49a:	0f 4b       	mov	r11,	r15	
    c49c:	b0 12 ac c5 	call	#0xc5ac	
    c4a0:	4e 4f       	mov.b	r15,	r14	
    c4a2:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c4a6:	b0 12 d0 d1 	call	#0xd1d0	

		adcin2 = pin_analog_read(PIN_1_5); 

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
			adcin1 = adcin2;
    c4aa:	0a 4b       	mov	r11,	r10	
    c4ac:	bd 3f       	jmp	$-132    	;abs 0xc428

0000c4ae <__stop_progExec__>:
    c4ae:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c4b2:	fd 3f       	jmp	$-4      	;abs 0xc4ae

0000c4b4 <__ctors_end>:
    c4b4:	30 40 ac e1 	br	#0xe1ac	

0000c4b8 <clock_init>:
#include "conio.h"
#include "pin.h"

void clock_init(void)
{
	WDTCTL = WDTPW + WDTHOLD;
    c4b8:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c4bc:	20 01 
    BCSCTL1 = CALBC1_1MHZ;
    c4be:	d2 42 ff 10 	mov.b	&0x10ff,&0x0057	
    c4c2:	57 00 
    DCOCTL  = CALDCO_1MHZ;
    c4c4:	d2 42 fe 10 	mov.b	&0x10fe,&0x0056	
    c4c8:	56 00 
}
    c4ca:	30 41       	ret			
    c4cc:	52 45 47 44 	mov.b	17479(r5),r2	;0x4447(r5)
    c4d0:	55 4d 50 28 	mov.b	10320(r13),r5	;0x2850(r13)
    c4d4:	25 73       	subc	#2,	r5	;r3 As==10
    c4d6:	29 3a       	jl	$-940    	;abs 0xc12a
    c4d8:	20 50       	add	@r0,	r0	
    c4da:	31 44       	mov	@r4+,	r1	
    c4dc:	49 52       	add.b	r2,	r9	
    c4de:	3d 25       	jz	$+636    	;abs 0xc75a
    c4e0:	78 3b       	jl	$-270    	;abs 0xc3d2
    c4e2:	20 50       	add	@r0,	r0	
    c4e4:	32 44       	mov	@r4+,	r2	
    c4e6:	49 52       	add.b	r2,	r9	
    c4e8:	3d 25       	jz	$+636    	;abs 0xc764
    c4ea:	78 3b       	jl	$-270    	;abs 0xc3dc
    c4ec:	20 50       	add	@r0,	r0	
    c4ee:	31 4f       	mov	@r15+,	r1	
    c4f0:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c4f4:	78 3b       	jl	$-270    	;abs 0xc3e6
    c4f6:	20 50       	add	@r0,	r0	
    c4f8:	32 4f       	mov	@r15+,	r2	
    c4fa:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c4fe:	78 3b       	jl	$-270    	;abs 0xc3f0
    c500:	20 50       	add	@r0,	r0	
    c502:	31 52       	add	#8,	r1	;r2 As==11
    c504:	45 4e       	mov.b	r14,	r5	
    c506:	3d 25       	jz	$+636    	;abs 0xc782
    c508:	78 3b       	jl	$-270    	;abs 0xc3fa
    c50a:	20 50       	add	@r0,	r0	
    c50c:	32 52       	add	#8,	r2	;r2 As==11
    c50e:	45 4e       	mov.b	r14,	r5	
    c510:	3d 25       	jz	$+636    	;abs 0xc78c
    c512:	78 3b       	jl	$-270    	;abs 0xc404
    c514:	20 50       	add	@r0,	r0	
    c516:	31 49       	mov	@r9+,	r1	
    c518:	4e 3d       	jmp	$+670    	;abs 0xc7b6
    c51a:	25 78       	subc	@r8,	r5	
    c51c:	2c 20       	jnz	$+90     	;abs 0xc576
    c51e:	50 32       	jn	$-862    	;abs 0xc1c0
    c520:	49 4e       	mov.b	r14,	r9	
    c522:	3d 25       	jz	$+636    	;abs 0xc79e
    c524:	78 0a       	.word	0x0a78;	????	
    c526:	0d 00       	.word	0x000d;	????	

0000c528 <dump_regs>:

void dump_regs(const char *msg) 
{
    c528:	0b 12       	push	r11		
    c52a:	0a 12       	push	r10		
    c52c:	09 12       	push	r9		
    c52e:	08 12       	push	r8		

	cio_printf("REGDUMP(%s): P1DIR=%x; P2DIR=%x; P1OUT=%x; P2OUT=%x; P1REN=%x; P2REN=%x; P1IN=%x, P2IN=%x\n\r",
    c530:	58 42 28 00 	mov.b	&0x0028,r8	
    c534:	59 42 20 00 	mov.b	&0x0020,r9	
    c538:	5a 42 2f 00 	mov.b	&0x002f,r10	
    c53c:	5b 42 27 00 	mov.b	&0x0027,r11	
    c540:	5c 42 29 00 	mov.b	&0x0029,r12	
    c544:	5d 42 21 00 	mov.b	&0x0021,r13	
    c548:	5e 42 2a 00 	mov.b	&0x002a,r14	
    c54c:	48 48       	mov.b	r8,	r8	
    c54e:	08 12       	push	r8		
    c550:	49 49       	mov.b	r9,	r9	
    c552:	09 12       	push	r9		
    c554:	4a 4a       	mov.b	r10,	r10	
    c556:	0a 12       	push	r10		
    c558:	4b 4b       	mov.b	r11,	r11	
    c55a:	0b 12       	push	r11		
    c55c:	4c 4c       	mov.b	r12,	r12	
    c55e:	0c 12       	push	r12		
    c560:	4d 4d       	mov.b	r13,	r13	
    c562:	0d 12       	push	r13		
    c564:	4e 4e       	mov.b	r14,	r14	
    c566:	0e 12       	push	r14		
    c568:	5e 42 22 00 	mov.b	&0x0022,r14	
    c56c:	0e 12       	push	r14		
    c56e:	0f 12       	push	r15		
    c570:	30 12 cc c4 	push	#-15156	;#0xc4cc
    c574:	b0 12 b8 ca 	call	#0xcab8	
    c578:	31 50 14 00 	add	#20,	r1	;#0x0014
				msg,
				P1DIR, P2DIR, P1OUT, P2OUT, P1REN, P2REN, P1IN, P2IN);
}
    c57c:	38 41       	pop	r8		
    c57e:	39 41       	pop	r9		
    c580:	3a 41       	pop	r10		
    c582:	3b 41       	pop	r11		
    c584:	30 41       	ret			

0000c586 <delay>:

void delay() 
{
    c586:	21 82       	sub	#4,	r1	;r2 As==10
	volatile unsigned long i = 10000;
    c588:	b1 40 10 27 	mov	#10000,	0(r1)	;#0x2710, 0x0000(r1)
    c58c:	00 00 
    c58e:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)

	do (i--);
    c592:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    c596:	b1 63 02 00 	addc	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
	while (i != 0);
    c59a:	2e 41       	mov	@r1,	r14	
    c59c:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    c5a0:	0e 93       	tst	r14		
    c5a2:	f7 23       	jnz	$-16     	;abs 0xc592
    c5a4:	0f 93       	tst	r15		
    c5a6:	f5 23       	jnz	$-20     	;abs 0xc592
}
    c5a8:	21 52       	add	#4,	r1	;r2 As==10
    c5aa:	30 41       	ret			

0000c5ac <adc2dc>:

unsigned char adc2dc(int adc) 
{
    c5ac:	0b 12       	push	r11		
    c5ae:	0a 12       	push	r10		
	// adjust PWM duty cycle based on ADC reading
	// max. ADC value is 1024. Servo needs to be btw. 2.5 and 12.5% duty cycle
	// thus, 1024 = 10%, 1024 / 10 = 1%, delta % = adcin1 / (1024 / 10) 
	// duty cycle 255 = 100%, 2.5 = 1%
	// thus target duty cycle = 2.5% + delta % * 2.5
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
    c5b0:	0c 4f       	mov	r15,	r12	
    c5b2:	3a 40 66 00 	mov	#102,	r10	;#0x0066
    c5b6:	b0 12 02 e1 	call	#0xe102	
    c5ba:	0e 4c       	mov	r12,	r14	
    c5bc:	0f 4c       	mov	r12,	r15	
    c5be:	8f 10       	swpb	r15		
    c5c0:	8f 11       	sxt	r15		
    c5c2:	8f 10       	swpb	r15		
    c5c4:	8f 11       	sxt	r15		
    c5c6:	b0 12 e0 d9 	call	#0xd9e0	
    c5ca:	0c 43       	clr	r12		
    c5cc:	3d 40 20 40 	mov	#16416,	r13	;#0x4020
    c5d0:	b0 12 2a d6 	call	#0xd62a	
    c5d4:	b0 12 96 d2 	call	#0xd296	
    c5d8:	4e 4e       	mov.b	r14,	r14	
    c5da:	0f 43       	clr	r15		
    c5dc:	b0 12 e0 d9 	call	#0xd9e0	
    c5e0:	0c 43       	clr	r12		
    c5e2:	3d 40 c8 40 	mov	#16584,	r13	;#0x40c8
    c5e6:	b0 12 86 d5 	call	#0xd586	
    c5ea:	b0 12 96 d2 	call	#0xd296	
}
    c5ee:	4f 4e       	mov.b	r14,	r15	
    c5f0:	3a 41       	pop	r10		
    c5f2:	3b 41       	pop	r11		
    c5f4:	30 41       	ret			
    c5f6:	2a 2a       	jnc	$-938    	;abs 0xc24c
    c5f8:	20 52       	add	#4,	r0	;r2 As==10
    c5fa:	4f 43       	clr.b	r15		
    c5fc:	4b 45       	mov.b	r5,	r11	
    c5fe:	54 75 43 20 	subc.b	8259(r5),r4	;0x2043(r5)
    c602:	2d 20       	jnz	$+92     	;abs 0xc65e
    c604:	6c 69       	addc.b	@r9,	r12	
    c606:	62 72       	subc.b	#4,	r2	;r2 As==10
    c608:	6f 63       	addc.b	#2,	r15	;r3 As==10
    c60a:	6b 65       	addc.b	@r5,	r11	
    c60c:	74 63       	addc.b	#-1,	r4	;r3 As==11
    c60e:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c610:	65 20       	jnz	$+204    	;abs 0xc6dc
    c612:	50 49 4e 20 	br	8270(r9)	;0x204e(r9)
    c616:	74 65       	addc.b	@r5+,	r4	
    c618:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    c61a:	20 2a       	jnc	$-958    	;abs 0xc25c
    c61c:	2a 0a       	.word	0x0a2a;	????	
    c61e:	0d 00       	.word	0x000d;	????	
    c620:	69 6e       	addc.b	@r14,	r9	
    c622:	69 74       	subc.b	@r4,	r9	
    c624:	69 61       	addc.b	@r1,	r9	
    c626:	6c 00       	.word	0x006c;	????	
    c628:	30 78       	subc	@r8+,	r0	
    c62a:	33 30       	jn	$+104    	;abs 0xc692
    c62c:	20 69       	addc	@r9,	r0	
    c62e:	73 20       	jnz	$+232    	;abs 0xc716
    c630:	61 6e       	addc.b	@r14,	r1	
    c632:	20 69       	addc	@r9,	r0	
    c634:	6e 76       	subc.b	@r6,	r14	
    c636:	61 6c       	addc.b	@r12,	r1	
    c638:	69 64       	addc.b	@r4,	r9	
    c63a:	20 70       	subc	@r0,	r0	
    c63c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c63e:	74 0a       	.word	0x0a74;	????	
    c640:	0d 00       	.word	0x000d;	????	
    c642:	30 78       	subc	@r8+,	r0	
    c644:	32 41       	pop	r2		
    c646:	20 69       	addc	@r9,	r0	
    c648:	73 20       	jnz	$+232    	;abs 0xc730
    c64a:	61 6e       	addc.b	@r14,	r1	
    c64c:	20 69       	addc	@r9,	r0	
    c64e:	6e 76       	subc.b	@r6,	r14	
    c650:	61 6c       	addc.b	@r12,	r1	
    c652:	69 64       	addc.b	@r4,	r9	
    c654:	20 70       	subc	@r0,	r0	
    c656:	69 6e       	addc.b	@r14,	r9	
    c658:	0a 0d       	.word	0x0d0a;	????	
    c65a:	00 30       	jn	$+2      	;abs 0xc65c
    c65c:	78 31       	jn	$+754    	;abs 0xc94e
    c65e:	31 20       	jnz	$+100    	;abs 0xc6c2
    c660:	69 73       	subc.b	#2,	r9	;r3 As==10
    c662:	20 61       	addc	@r1,	r0	
    c664:	6e 20       	jnz	$+222    	;abs 0xc742
    c666:	69 6e       	addc.b	@r14,	r9	
    c668:	76 61       	addc.b	@r1+,	r6	
    c66a:	6c 69       	addc.b	@r9,	r12	
    c66c:	64 20       	jnz	$+202    	;abs 0xc736
    c66e:	28 72       	subc	#4,	r8	;r2 As==10
    c670:	65 73       	subc.b	#2,	r5	;r3 As==10
    c672:	65 72       	subc.b	#4,	r5	;r2 As==10
    c674:	76 65       	addc.b	@r5+,	r6	
    c676:	64 29       	jnc	$+714    	;abs 0xc940
    c678:	20 70       	subc	@r0,	r0	
    c67a:	69 6e       	addc.b	@r14,	r9	
    c67c:	0a 0d       	.word	0x0d0a;	????	
    c67e:	00 30       	jn	$+2      	;abs 0xc680
    c680:	78 31       	jn	$+754    	;abs 0xc972
    c682:	32 20       	jnz	$+102    	;abs 0xc6e8
    c684:	69 73       	subc.b	#2,	r9	;r3 As==10
    c686:	20 61       	addc	@r1,	r0	
    c688:	6e 20       	jnz	$+222    	;abs 0xc766
    c68a:	69 6e       	addc.b	@r14,	r9	
    c68c:	76 61       	addc.b	@r1+,	r6	
    c68e:	6c 69       	addc.b	@r9,	r12	
    c690:	64 20       	jnz	$+202    	;abs 0xc75a
    c692:	28 72       	subc	#4,	r8	;r2 As==10
    c694:	65 73       	subc.b	#2,	r5	;r3 As==10
    c696:	65 72       	subc.b	#4,	r5	;r2 As==10
    c698:	76 65       	addc.b	@r5+,	r6	
    c69a:	64 29       	jnc	$+714    	;abs 0xc964
    c69c:	20 70       	subc	@r0,	r0	
    c69e:	69 6e       	addc.b	@r14,	r9	
    c6a0:	0a 0d       	.word	0x0d0a;	????	
    c6a2:	00 30       	jn	$+2      	;abs 0xc6a4
    c6a4:	78 32       	jn	$-782    	;abs 0xc396
    c6a6:	25 69       	addc	@r9,	r5	
    c6a8:	20 64       	addc	@r4,	r0	
    c6aa:	6f 65       	addc.b	@r5,	r15	
    c6ac:	73 20       	jnz	$+232    	;abs 0xc794
    c6ae:	6e 6f       	addc.b	@r15,	r14	
    c6b0:	74 20       	jnz	$+234    	;abs 0xc79a
    c6b2:	73 75       	.word	0x7573;	????	Illegal as 2-op instr
    c6b4:	70 70 6f 72 	subc.b	#29295,	r0	;#0x726f
    c6b8:	74 20       	jnz	$+234    	;abs 0xc7a2
    c6ba:	41 44       	mov.b	r4,	r1	
    c6bc:	43 0a       	.word	0x0a43;	????	
    c6be:	0d 00       	.word	0x000d;	????	
    c6c0:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    c6c2:	74 20       	jnz	$+234    	;abs 0xc7ac
    c6c4:	55 41 52 54 	mov.b	21586(r1),r5	;0x5452(r1)
    c6c8:	54 58 20 70 	add.b	28704(r8),r4	;0x7020(r8)
    c6cc:	31 2e       	jc	$-924    	;abs 0xc330
    c6ce:	34 3a       	jl	$-918    	;abs 0xc338
    c6d0:	20 25       	jz	$+578    	;abs 0xc912
    c6d2:	69 0a       	.word	0x0a69;	????	
    c6d4:	0d 00       	.word	0x000d;	????	
    c6d6:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    c6d8:	74 20       	jnz	$+234    	;abs 0xc7c2
    c6da:	55 41 52 54 	mov.b	21586(r1),r5	;0x5452(r1)
    c6de:	54 58 20 70 	add.b	28704(r8),r4	;0x7020(r8)
    c6e2:	31 2e       	jc	$-924    	;abs 0xc346
    c6e4:	35 3a       	jl	$-916    	;abs 0xc350
    c6e6:	20 25       	jz	$+578    	;abs 0xc928
    c6e8:	69 0a       	.word	0x0a69;	????	
    c6ea:	0d 00       	.word	0x000d;	????	
    c6ec:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    c6ee:	74 20       	jnz	$+234    	;abs 0xc7d8
    c6f0:	55 41 52 54 	mov.b	21586(r1),r5	;0x5452(r1)
    c6f4:	52 58 20 70 	add.b	28704(r8),r2	;0x7020(r8)
    c6f8:	31 2e       	jc	$-924    	;abs 0xc35c
    c6fa:	34 3a       	jl	$-918    	;abs 0xc364
    c6fc:	20 25       	jz	$+578    	;abs 0xc93e
    c6fe:	69 0a       	.word	0x0a69;	????	
    c700:	0d 00       	.word	0x000d;	????	
    c702:	53 65       	.word	0x6553;	????	Illegal as 2-op instr
    c704:	74 20       	jnz	$+234    	;abs 0xc7ee
    c706:	55 41 52 54 	mov.b	21586(r1),r5	;0x5452(r1)
    c70a:	52 58 20 70 	add.b	28704(r8),r2	;0x7020(r8)
    c70e:	31 2e       	jc	$-924    	;abs 0xc372
    c710:	35 3a       	jl	$-916    	;abs 0xc37c
    c712:	20 25       	jz	$+578    	;abs 0xc954
    c714:	69 0a       	.word	0x0a69;	????	
    c716:	0d 00       	.word	0x000d;	????	
    c718:	70 31       	jn	$+738    	;abs 0xc9fa
    c71a:	2e 30       	jn	$+94     	;abs 0xc778
    c71c:	2b 70       	subc	@r0,	r11	
    c71e:	31 2e       	jc	$-924    	;abs 0xc382
    c720:	36 2b       	jnc	$-402    	;abs 0xc58e
    c722:	70 32       	jn	$-798    	;abs 0xc404
    c724:	2e 35       	jge	$+606    	;abs 0xc982
    c726:	20 6f       	addc	@r15,	r0	
    c728:	75 74       	subc.b	@r4+,	r5	
    c72a:	70 75       	subc.b	@r5+,	r0	
    c72c:	74 00       	.word	0x0074;	????	
    c72e:	70 31       	jn	$+738    	;abs 0xca10
    c730:	2e 30       	jn	$+94     	;abs 0xc78e
    c732:	2b 70       	subc	@r0,	r11	
    c734:	31 2e       	jc	$-924    	;abs 0xc398
    c736:	36 2b       	jnc	$-402    	;abs 0xc5a4
    c738:	70 32       	jn	$-798    	;abs 0xc41a
    c73a:	2e 35       	jge	$+606    	;abs 0xc998
    c73c:	20 73       	subc	#2,	r0	;r3 As==10
    c73e:	65 74       	subc.b	@r4,	r5	
    c740:	00 50       	rla	r0		
    c742:	31 2e       	jc	$-924    	;abs 0xc3a6
    c744:	30 20       	jnz	$+98     	;abs 0xc7a6
    c746:	69 73       	subc.b	#2,	r9	;r3 As==10
    c748:	20 25       	jz	$+578    	;abs 0xc98a
    c74a:	78 0a       	.word	0x0a78;	????	
    c74c:	0d 00       	.word	0x000d;	????	
    c74e:	50 31       	jn	$+674    	;abs 0xc9f0
    c750:	2e 36       	jge	$-930    	;abs 0xc3ae
    c752:	20 69       	addc	@r9,	r0	
    c754:	73 20       	jnz	$+232    	;abs 0xc83c
    c756:	25 78       	subc	@r8,	r5	
    c758:	0a 0d       	.word	0x0d0a;	????	
    c75a:	00 50       	rla	r0		
    c75c:	32 2e       	jc	$-922    	;abs 0xc3c2
    c75e:	35 20       	jnz	$+108    	;abs 0xc7ca
    c760:	69 73       	subc.b	#2,	r9	;r3 As==10
    c762:	20 25       	jz	$+578    	;abs 0xc9a4
    c764:	78 0a       	.word	0x0a78;	????	
    c766:	0d 00       	.word	0x000d;	????	
    c768:	70 31       	jn	$+738    	;abs 0xca4a
    c76a:	2e 30       	jn	$+94     	;abs 0xc7c8
    c76c:	2b 70       	subc	@r0,	r11	
    c76e:	31 2e       	jc	$-924    	;abs 0xc3d2
    c770:	36 2b       	jnc	$-402    	;abs 0xc5de
    c772:	70 32       	jn	$-798    	;abs 0xc454
    c774:	2e 35       	jge	$+606    	;abs 0xc9d2
    c776:	20 63       	addc	#2,	r0	;r3 As==10
    c778:	6c 65       	addc.b	@r5,	r12	
    c77a:	61 72       	subc.b	#4,	r1	;r2 As==10
    c77c:	00 70       	subc	r0,	r0	
    c77e:	31 2e       	jc	$-924    	;abs 0xc3e2
    c780:	30 2b       	jnc	$-414    	;abs 0xc5e2
    c782:	70 31       	jn	$+738    	;abs 0xca64
    c784:	2e 36       	jge	$-930    	;abs 0xc3e2
    c786:	2b 70       	subc	@r0,	r11	
    c788:	32 2e       	jc	$-922    	;abs 0xc3ee
    c78a:	35 20       	jnz	$+108    	;abs 0xc7f6
    c78c:	74 6f       	addc.b	@r15+,	r4	
    c78e:	67 67       	addc.b	@r7,	r7	
    c790:	6c 65       	addc.b	@r5,	r12	
    c792:	00 70       	subc	r0,	r0	
    c794:	31 2e       	jc	$-924    	;abs 0xc3f8
    c796:	33 20       	jnz	$+104    	;abs 0xc7fe
    c798:	69 6e       	addc.b	@r14,	r9	
    c79a:	70 75       	subc.b	@r5+,	r0	
    c79c:	74 20       	jnz	$+234    	;abs 0xc886
    c79e:	66 6c       	addc.b	@r12,	r6	
    c7a0:	6f 61       	addc.b	@r1,	r15	
    c7a2:	74 00       	.word	0x0074;	????	
    c7a4:	50 72 65 73 	subc.b	&0x7365,r0	
    c7a8:	73 20       	jnz	$+232    	;abs 0xc890
    c7aa:	62 75       	subc.b	@r5,	r2	
    c7ac:	74 74       	subc.b	@r4+,	r4	
    c7ae:	6f 6e       	addc.b	@r14,	r15	
    c7b0:	20 6f       	addc	@r15,	r0	
    c7b2:	6e 20       	jnz	$+222    	;abs 0xc890
    c7b4:	50 31       	jn	$+674    	;abs 0xca56
    c7b6:	2e 33       	jn	$-418    	;abs 0xc614
    c7b8:	20 74       	subc	@r4,	r0	
    c7ba:	6f 20       	jnz	$+224    	;abs 0xc89a
    c7bc:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c7be:	6e 74       	subc.b	@r4,	r14	
    c7c0:	69 6e       	addc.b	@r14,	r9	
    c7c2:	75 65       	addc.b	@r5+,	r5	
    c7c4:	20 2e       	jc	$-958    	;abs 0xc406
    c7c6:	2e 2e       	jc	$-930    	;abs 0xc424
    c7c8:	00 20       	jnz	$+2      	;abs 0xc7ca
    c7ca:	4f 4b       	mov.b	r11,	r15	
    c7cc:	0a 0d       	.word	0x0d0a;	????	
    c7ce:	00 70       	subc	r0,	r0	
    c7d0:	32 2e       	jc	$-922    	;abs 0xc436
    c7d2:	33 20       	jnz	$+104    	;abs 0xc83a
    c7d4:	69 6e       	addc.b	@r14,	r9	
    c7d6:	70 75       	subc.b	@r5+,	r0	
    c7d8:	74 20       	jnz	$+234    	;abs 0xc8c2
    c7da:	70 75       	subc.b	@r5+,	r0	
    c7dc:	6c 6c       	addc.b	@r12,	r12	
    c7de:	2d 64       	addc	@r4,	r13	
    c7e0:	6f 77       	subc.b	@r7,	r15	
    c7e2:	6e 00       	.word	0x006e;	????	
    c7e4:	50 72 65 73 	subc.b	&0x7365,r0	
    c7e8:	73 20       	jnz	$+232    	;abs 0xc8d0
    c7ea:	62 75       	subc.b	@r5,	r2	
    c7ec:	74 74       	subc.b	@r4+,	r4	
    c7ee:	6f 6e       	addc.b	@r14,	r15	
    c7f0:	20 6f       	addc	@r15,	r0	
    c7f2:	6e 20       	jnz	$+222    	;abs 0xc8d0
    c7f4:	50 32       	jn	$-862    	;abs 0xc496
    c7f6:	2e 33       	jn	$-418    	;abs 0xc654
    c7f8:	20 74       	subc	@r4,	r0	
    c7fa:	6f 20       	jnz	$+224    	;abs 0xc8da
    c7fc:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c7fe:	6e 74       	subc.b	@r4,	r14	
    c800:	69 6e       	addc.b	@r14,	r9	
    c802:	75 65       	addc.b	@r5+,	r5	
    c804:	20 2e       	jc	$-958    	;abs 0xc446
    c806:	2e 2e       	jc	$-930    	;abs 0xc464
    c808:	00 70       	subc	r0,	r0	
    c80a:	32 2e       	jc	$-922    	;abs 0xc470
    c80c:	34 20       	jnz	$+106    	;abs 0xc876
    c80e:	69 6e       	addc.b	@r14,	r9	
    c810:	70 75       	subc.b	@r5+,	r0	
    c812:	74 20       	jnz	$+234    	;abs 0xc8fc
    c814:	70 75       	subc.b	@r5+,	r0	
    c816:	6c 6c       	addc.b	@r12,	r12	
    c818:	2d 75       	subc	@r5,	r13	
    c81a:	70 00       	.word	0x0070;	????	
    c81c:	50 72 65 73 	subc.b	&0x7365,r0	
    c820:	73 20       	jnz	$+232    	;abs 0xc908
    c822:	62 75       	subc.b	@r5,	r2	
    c824:	74 74       	subc.b	@r4+,	r4	
    c826:	6f 6e       	addc.b	@r14,	r15	
    c828:	20 6f       	addc	@r15,	r0	
    c82a:	6e 20       	jnz	$+222    	;abs 0xc908
    c82c:	50 32       	jn	$-862    	;abs 0xc4ce
    c82e:	2e 34       	jge	$+94     	;abs 0xc88c
    c830:	20 74       	subc	@r4,	r0	
    c832:	6f 20       	jnz	$+224    	;abs 0xc912
    c834:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c836:	6e 74       	subc.b	@r4,	r14	
    c838:	69 6e       	addc.b	@r14,	r9	
    c83a:	75 65       	addc.b	@r5+,	r5	
    c83c:	20 2e       	jc	$-958    	;abs 0xc47e
    c83e:	2e 2e       	jc	$-930    	;abs 0xc49c
    c840:	00 73       	sbc	r0		
    c842:	65 74       	subc.b	@r4,	r5	
    c844:	75 70 20 31 	subc.b	#12576,	r5	;#0x3120
    c848:	2e 35       	jge	$+606    	;abs 0xcaa6
    c84a:	20 66       	addc	@r6,	r0	
    c84c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c84e:	20 61       	addc	@r1,	r0	
    c850:	6e 61       	addc.b	@r1,	r14	
    c852:	6c 6f       	addc.b	@r15,	r12	
    c854:	67 20       	jnz	$+208    	;abs 0xc924
    c856:	69 6e       	addc.b	@r14,	r9	
    c858:	3a 20       	jnz	$+118    	;abs 0xc8ce
    c85a:	25 69       	addc	@r9,	r5	
    c85c:	0a 0d       	.word	0x0d0a;	????	
    c85e:	00 70       	subc	r0,	r0	
    c860:	31 2e       	jc	$-924    	;abs 0xc4c4
    c862:	35 20       	jnz	$+108    	;abs 0xc8ce
    c864:	61 6e       	addc.b	@r14,	r1	
    c866:	61 6c       	addc.b	@r12,	r1	
    c868:	6f 67       	addc.b	@r7,	r15	
    c86a:	20 69       	addc	@r9,	r0	
    c86c:	6e 00       	.word	0x006e;	????	
    c86e:	41 6e       	addc.b	r14,	r1	
    c870:	61 6c       	addc.b	@r12,	r1	
    c872:	6f 67       	addc.b	@r7,	r15	
    c874:	20 72       	subc	#4,	r0	;r2 As==10
    c876:	65 61       	addc.b	@r1,	r5	
    c878:	64 20       	jnz	$+202    	;abs 0xc942
    c87a:	70 31       	jn	$+738    	;abs 0xcb5c
    c87c:	2e 35       	jge	$+606    	;abs 0xcada
    c87e:	3a 20       	jnz	$+118    	;abs 0xc8f4
    c880:	25 78       	subc	@r8,	r5	
    c882:	0a 0d       	.word	0x0d0a;	????	
    c884:	00 73       	sbc	r0		
    c886:	65 74       	subc.b	@r4,	r5	
    c888:	75 70 20 32 	subc.b	#12832,	r5	;#0x3220
    c88c:	2e 32       	jn	$-930    	;abs 0xc4ea
    c88e:	20 66       	addc	@r6,	r0	
    c890:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c892:	20 50       	add	@r0,	r0	
    c894:	57 4d 3a 20 	mov.b	8250(r13),r7	;0x203a(r13)
    c898:	25 69       	addc	@r9,	r5	
    c89a:	0a 0d       	.word	0x0d0a;	????	
    c89c:	00 70       	subc	r0,	r0	
    c89e:	32 2e       	jc	$-922    	;abs 0xc504
    c8a0:	32 20       	jnz	$+102    	;abs 0xc906
    c8a2:	50 57 4d 00 	add.b	77(r7),	r0	;0x004d(r7)
    c8a6:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    c8a8:	74 75       	subc.b	@r5+,	r4	
    c8aa:	70 20       	jnz	$+226    	;abs 0xc98c
    c8ac:	32 2e       	jc	$-922    	;abs 0xc512
    c8ae:	31 20       	jnz	$+100    	;abs 0xc912
    c8b0:	66 6f       	addc.b	@r15,	r6	
    c8b2:	72 20       	jnz	$+230    	;abs 0xc998
    c8b4:	50 57 4d 3a 	add.b	14925(r7),r0	;0x3a4d(r7)
    c8b8:	20 25       	jz	$+578    	;abs 0xcafa
    c8ba:	69 0a       	.word	0x0a69;	????	
    c8bc:	0d 00       	.word	0x000d;	????	
    c8be:	41 6e       	addc.b	r14,	r1	
    c8c0:	61 6c       	addc.b	@r12,	r1	
    c8c2:	6f 67       	addc.b	@r7,	r15	
    c8c4:	20 72       	subc	#4,	r0	;r2 As==10
    c8c6:	65 61       	addc.b	@r1,	r5	
    c8c8:	64 20       	jnz	$+202    	;abs 0xc992
    c8ca:	61 74       	subc.b	@r4,	r1	
    c8cc:	20 70       	subc	@r0,	r0	
    c8ce:	31 2e       	jc	$-924    	;abs 0xc532
    c8d0:	35 3a       	jl	$-916    	;abs 0xc53c
    c8d2:	20 25       	jz	$+578    	;abs 0xcb14
    c8d4:	78 20       	jnz	$+242    	;abs 0xc9c6
    c8d6:	28 25       	jz	$+594    	;abs 0xcb28
    c8d8:	69 29       	jnc	$+724    	;abs 0xcbac
    c8da:	0a 0d       	.word	0x0d0a;	????	
	...

0000c8de <serial_init>:
 * TXD pin
 */
#define UART_TXD   		BIT2	

void serial_init(unsigned int baudrate)
{
    c8de:	0b 12       	push	r11		
    c8e0:	0a 12       	push	r10		
    c8e2:	09 12       	push	r9		
    c8e4:	08 12       	push	r8		
    c8e6:	07 12       	push	r7		
	P1SEL    |= UART_RXD + UART_TXD;                       
    c8e8:	f2 d0 06 00 	bis.b	#6,	&0x0026	;#0x0006
    c8ec:	26 00 
  	P1SEL2   |= UART_RXD + UART_TXD;                       
    c8ee:	f2 d0 06 00 	bis.b	#6,	&0x0041	;#0x0006
    c8f2:	41 00 
  	UCA0CTL1 |= UCSSEL_2;                   // SMCLK
    c8f4:	f2 d0 80 ff 	bis.b	#-128,	&0x0061	;#0xff80
    c8f8:	61 00 

	unsigned char br = (unsigned char)(1000000 / (long)baudrate);
    c8fa:	07 43       	clr	r7		
    c8fc:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    c900:	3d 40 0f 00 	mov	#15,	r13	;#0x000f
    c904:	0a 4f       	mov	r15,	r10	
    c906:	0b 47       	mov	r7,	r11	
    c908:	b0 12 38 e1 	call	#0xe138	

  	UCA0BR0  = br;                          // 1MHz / baudrate 
    c90c:	c2 4c 62 00 	mov.b	r12,	&0x0062	
  	UCA0BR1  = 0;                           // 
    c910:	c2 47 63 00 	mov.b	r7,	&0x0063	
  	UCA0MCTL = UCBRS0;                      // Modulation UCBRSx = 1
    c914:	e2 43 64 00 	mov.b	#2,	&0x0064	;r3 As==10
  	UCA0CTL1 &= ~UCSWRST;                   // Initialize USCI state machine
    c918:	f2 f0 fe ff 	and.b	#-2,	&0x0061	;#0xfffe
    c91c:	61 00 
}
    c91e:	37 41       	pop	r7		
    c920:	38 41       	pop	r8		
    c922:	39 41       	pop	r9		
    c924:	3a 41       	pop	r10		
    c926:	3b 41       	pop	r11		
    c928:	30 41       	ret			

0000c92a <serial_send>:

void serial_send(unsigned char data)
{
  	UCA0TXBUF = data;                 		
    c92a:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c92e:	30 41       	ret			

0000c930 <serial_send_blocking>:

void serial_send_blocking(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG));              // USCI_A0 TX buffer ready?
    c930:	5e 42 03 00 	mov.b	&0x0003,r14	
    c934:	2e f3       	and	#2,	r14	;r3 As==10
    c936:	fc 27       	jz	$-6      	;abs 0xc930
  	UCA0TXBUF = data;                  
    c938:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c93c:	30 41       	ret			

0000c93e <serial_recv>:

unsigned char serial_recv()
{
	return UCA0RXBUF;
}
    c93e:	5f 42 66 00 	mov.b	&0x0066,r15	
    c942:	30 41       	ret			

0000c944 <serial_recv_blocking>:

unsigned char serial_recv_blocking()
{
    while (!(IFG2&UCA0RXIFG));         		// USCI_A0 RX buffer ready?
    c944:	5f 42 03 00 	mov.b	&0x0003,r15	
    c948:	1f f3       	and	#1,	r15	;r3 As==01
    c94a:	fc 27       	jz	$-6      	;abs 0xc944
	return UCA0RXBUF;
}
    c94c:	5f 42 66 00 	mov.b	&0x0066,r15	
    c950:	30 41       	ret			

0000c952 <_xtoa>:
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
}

static void _xtoa(unsigned long x, const unsigned long *dp)
{
    c952:	0b 12       	push	r11		
    c954:	0a 12       	push	r10		
    c956:	09 12       	push	r9		
    c958:	08 12       	push	r8		
    c95a:	07 12       	push	r7		
    c95c:	0a 4e       	mov	r14,	r10	
    c95e:	0b 4f       	mov	r15,	r11	
    c960:	07 4d       	mov	r13,	r7	
     char c;
     unsigned long d;

     if(x) {
    c962:	0e 93       	tst	r14		
    c964:	04 20       	jnz	$+10     	;abs 0xc96e
    c966:	0b 93       	tst	r11		
    c968:	02 20       	jnz	$+6      	;abs 0xc96e
    c96a:	22 3c       	jmp	$+70     	;abs 0xc9b0
          while(x < *dp) ++dp;
    c96c:	27 52       	add	#4,	r7	;r2 As==10
    c96e:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c972:	fc 2b       	jnc	$-6      	;abs 0xc96c
    c974:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c978:	02 20       	jnz	$+6      	;abs 0xc97e
    c97a:	2a 97       	cmp	@r7,	r10	
    c97c:	f7 2b       	jnc	$-16     	;abs 0xc96c
          do {
               d = *dp++;
    c97e:	28 47       	mov	@r7,	r8	
    c980:	19 47 02 00 	mov	2(r7),	r9	;0x0002(r7)
    c984:	27 52       	add	#4,	r7	;r2 As==10
               c = '0';
    c986:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c98a:	03 3c       	jmp	$+8      	;abs 0xc992
               while(x >= d) ++c, x -= d;
    c98c:	5f 53       	inc.b	r15		
    c98e:	0a 88       	sub	r8,	r10	
    c990:	0b 79       	subc	r9,	r11	
    c992:	0b 99       	cmp	r9,	r11	
    c994:	04 28       	jnc	$+10     	;abs 0xc99e
    c996:	09 9b       	cmp	r11,	r9	
    c998:	f9 2b       	jnc	$-12     	;abs 0xc98c
    c99a:	0a 98       	cmp	r8,	r10	
    c99c:	f7 2f       	jc	$-16     	;abs 0xc98c
               cio_printc(c);
    c99e:	b0 12 22 cc 	call	#0xcc22	
          } while(!(d & 1));
    c9a2:	18 f3       	and	#1,	r8	;r3 As==01
    c9a4:	09 f3       	and	#0,	r9	;r3 As==00
    c9a6:	08 93       	tst	r8		
    c9a8:	07 20       	jnz	$+16     	;abs 0xc9b8
    c9aa:	09 93       	tst	r9		
    c9ac:	05 20       	jnz	$+12     	;abs 0xc9b8
    c9ae:	e7 3f       	jmp	$-48     	;abs 0xc97e
     } else
          cio_printc('0');
    c9b0:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c9b4:	b0 12 22 cc 	call	#0xcc22	
}
    c9b8:	37 41       	pop	r7		
    c9ba:	38 41       	pop	r8		
    c9bc:	39 41       	pop	r9		
    c9be:	3a 41       	pop	r10		
    c9c0:	3b 41       	pop	r11		
    c9c2:	30 41       	ret			

0000c9c4 <_puth>:
};

static void _puth(unsigned int n)
{
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
    c9c4:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    c9c8:	5f 4f 12 cc 	mov.b	-13294(r15),r15	;0xcc12(r15)
    c9cc:	b0 12 22 cc 	call	#0xcc22	
}
    c9d0:	30 41       	ret			

0000c9d2 <cio_print>:
#include <stdarg.h>

#include "conio.h"

void cio_print(char *line)
{
    c9d2:	0b 12       	push	r11		
    c9d4:	0b 4f       	mov	r15,	r11	
    c9d6:	02 3c       	jmp	$+6      	;abs 0xc9dc
     int   i = 0;

     while(line[i] != 0) {
          cio_printc(line[i++]);
    c9d8:	b0 12 22 cc 	call	#0xcc22	

void cio_print(char *line)
{
     int   i = 0;

     while(line[i] != 0) {
    c9dc:	6f 4b       	mov.b	@r11,	r15	
    c9de:	1b 53       	inc	r11		
    c9e0:	4f 93       	tst.b	r15		
    c9e2:	fa 23       	jnz	$-10     	;abs 0xc9d8
          cio_printc(line[i++]);
     }
}
    c9e4:	3b 41       	pop	r11		
    c9e6:	30 41       	ret			

0000c9e8 <cio_printi>:

void cio_printi(int n)
{
    c9e8:	0b 12       	push	r11		
    c9ea:	0a 12       	push	r10		
    c9ec:	09 12       	push	r9		
    c9ee:	08 12       	push	r8		
    c9f0:	07 12       	push	r7		
    c9f2:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
    c9f6:	0f 93       	tst	r15		
    c9f8:	07 24       	jz	$+16     	;abs 0xca08
    c9fa:	08 41       	mov	r1,	r8	
    c9fc:	38 50 1e 00 	add	#30,	r8	;#0x001e
    ca00:	39 40 0f 00 	mov	#15,	r9	;#0x000f
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca04:	07 43       	clr	r7		
    ca06:	18 3c       	jmp	$+50     	;abs 0xca38
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
          cio_printc('0');
    ca08:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    ca0c:	b0 12 22 cc 	call	#0xcc22	
    ca10:	23 3c       	jmp	$+72     	;abs 0xca58
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
    ca12:	0c 4f       	mov	r15,	r12	
    ca14:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    ca18:	b0 12 02 e1 	call	#0xe102	
    ca1c:	3e 50 30 00 	add	#48,	r14	;#0x0030
    ca20:	88 4e 00 00 	mov	r14,	0(r8)	;0x0000(r8)
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca24:	39 53       	add	#-1,	r9	;r3 As==11
    ca26:	28 83       	decd	r8		
    ca28:	09 93       	tst	r9		
    ca2a:	08 24       	jz	$+18     	;abs 0xca3c
          buffer[i] = (n%10)+'0';
          n /= 10;
    ca2c:	0c 4f       	mov	r15,	r12	
    ca2e:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    ca32:	b0 12 02 e1 	call	#0xe102	
    ca36:	0f 4c       	mov	r12,	r15	
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca38:	07 9f       	cmp	r15,	r7	
    ca3a:	eb 3b       	jl	$-40     	;abs 0xca12
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    ca3c:	0a 49       	mov	r9,	r10	
    ca3e:	1a 53       	inc	r10		
     while(line[i] != 0) {
          cio_printc(line[i++]);
     }
}

void cio_printi(int n)
    ca40:	0b 4a       	mov	r10,	r11	
    ca42:	0b 5b       	rla	r11		
    ca44:	0b 51       	add	r1,	r11	
    ca46:	05 3c       	jmp	$+12     	;abs 0xca52
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
          cio_printc(buffer[j]);
    ca48:	6f 4b       	mov.b	@r11,	r15	
    ca4a:	b0 12 22 cc 	call	#0xcc22	
     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    ca4e:	1a 53       	inc	r10		
    ca50:	2b 53       	incd	r11		
    ca52:	3a 90 10 00 	cmp	#16,	r10	;#0x0010
    ca56:	f8 23       	jnz	$-14     	;abs 0xca48
          cio_printc(buffer[j]);
     }
}
    ca58:	31 50 20 00 	add	#32,	r1	;#0x0020
    ca5c:	37 41       	pop	r7		
    ca5e:	38 41       	pop	r8		
    ca60:	39 41       	pop	r9		
    ca62:	3a 41       	pop	r10		
    ca64:	3b 41       	pop	r11		
    ca66:	30 41       	ret			

0000ca68 <cio_printb>:

void cio_printb(int n, int size)
{
    ca68:	0b 12       	push	r11		
    ca6a:	0a 12       	push	r10		
    ca6c:	09 12       	push	r9		
    ca6e:	08 12       	push	r8		
    ca70:	08 4f       	mov	r15,	r8	
    ca72:	09 4e       	mov	r14,	r9	

     int i;

     int mask = 1 << (size - 1);
    ca74:	1b 43       	mov	#1,	r11	;r3 As==01
    ca76:	0d 4e       	mov	r14,	r13	
    ca78:	3d 53       	add	#-1,	r13	;r3 As==11
    ca7a:	0d 93       	tst	r13		
    ca7c:	03 24       	jz	$+8      	;abs 0xca84
    ca7e:	0b 5b       	rla	r11		
    ca80:	1d 83       	dec	r13		
    ca82:	fd 23       	jnz	$-4      	;abs 0xca7e

     for(i = 0; i < size; i++) {
    ca84:	0a 43       	clr	r10		
    ca86:	11 3c       	jmp	$+36     	;abs 0xcaaa
          if((n & (mask >> i)) != 0) {
    ca88:	0f 4a       	mov	r10,	r15	
    ca8a:	0d 4b       	mov	r11,	r13	
    ca8c:	0f 93       	tst	r15		
    ca8e:	03 24       	jz	$+8      	;abs 0xca96
    ca90:	0d 11       	rra	r13		
    ca92:	1f 83       	dec	r15		
    ca94:	fd 23       	jnz	$-4      	;abs 0xca90
    ca96:	0d f8       	and	r8,	r13	
    ca98:	03 24       	jz	$+8      	;abs 0xcaa0
               cio_printc('1');
    ca9a:	7f 40 31 00 	mov.b	#49,	r15	;#0x0031
    ca9e:	02 3c       	jmp	$+6      	;abs 0xcaa4
          } else {
               cio_printc('0');
    caa0:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    caa4:	b0 12 22 cc 	call	#0xcc22	

     int i;

     int mask = 1 << (size - 1);

     for(i = 0; i < size; i++) {
    caa8:	1a 53       	inc	r10		
    caaa:	0a 99       	cmp	r9,	r10	
    caac:	ed 3b       	jl	$-36     	;abs 0xca88
          } else {
               cio_printc('0');
          }
     }

}
    caae:	38 41       	pop	r8		
    cab0:	39 41       	pop	r9		
    cab2:	3a 41       	pop	r10		
    cab4:	3b 41       	pop	r11		
    cab6:	30 41       	ret			

0000cab8 <cio_printf>:
     } else
          cio_printc('0');
}

void cio_printf(char *format, ...)
{
    cab8:	0b 12       	push	r11		
    caba:	0a 12       	push	r10		
    cabc:	09 12       	push	r9		
    cabe:	08 12       	push	r8		
    cac0:	07 12       	push	r7		
    cac2:	06 12       	push	r6		
    cac4:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
     char c;
     int i;
     long n;

     va_list a;
     va_start(a, format);
    cac8:	0a 41       	mov	r1,	r10	
    caca:	3a 50 10 00 	add	#16,	r10	;#0x0010

     while((c = *format++)) {
          if(c == '%') {
               switch(c = *format++) {
    cace:	77 40 6e 00 	mov.b	#110,	r7	;#0x006e
    cad2:	78 40 69 00 	mov.b	#105,	r8	;#0x0069
    cad6:	7f 3c       	jmp	$+256    	;abs 0xcbd6
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    cad8:	19 53       	inc	r9		
          if(c == '%') {
    cada:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    cade:	79 20       	jnz	$+244    	;abs 0xcbd2
               switch(c = *format++) {
    cae0:	6f 49       	mov.b	@r9,	r15	
    cae2:	19 53       	inc	r9		
    cae4:	7f 90 6e 00 	cmp.b	#110,	r15	;#0x006e
    cae8:	3c 24       	jz	$+122    	;abs 0xcb62
    caea:	47 9f       	cmp.b	r15,	r7	
    caec:	0f 38       	jl	$+32     	;abs 0xcb0c
    caee:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    caf2:	22 24       	jz	$+70     	;abs 0xcb38
    caf4:	48 9f       	cmp.b	r15,	r8	
    caf6:	06 38       	jl	$+14     	;abs 0xcb04
    caf8:	4f 93       	tst.b	r15		
    cafa:	70 24       	jz	$+226    	;abs 0xcbdc
    cafc:	7f 90 63 00 	cmp.b	#99,	r15	;#0x0063
    cb00:	68 20       	jnz	$+210    	;abs 0xcbd2
    cb02:	13 3c       	jmp	$+40     	;abs 0xcb2a
    cb04:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    cb08:	64 20       	jnz	$+202    	;abs 0xcbd2
    cb0a:	2b 3c       	jmp	$+88     	;abs 0xcb62
    cb0c:	7f 90 75 00 	cmp.b	#117,	r15	;#0x0075
    cb10:	13 24       	jz	$+40     	;abs 0xcb38
    cb12:	7f 90 78 00 	cmp.b	#120,	r15	;#0x0078
    cb16:	3f 24       	jz	$+128    	;abs 0xcb96
    cb18:	7f 90 73 00 	cmp.b	#115,	r15	;#0x0073
    cb1c:	5a 20       	jnz	$+182    	;abs 0xcbd2
               case 's':                       // String
                    cio_print(va_arg(a, char*));
    cb1e:	0b 4a       	mov	r10,	r11	
    cb20:	2b 53       	incd	r11		
    cb22:	2f 4a       	mov	@r10,	r15	
    cb24:	b0 12 d2 c9 	call	#0xc9d2	
    cb28:	05 3c       	jmp	$+12     	;abs 0xcb34
                    break;
               case 'c':                       // Char
                    cio_printc((char)va_arg(a, int));
    cb2a:	0b 4a       	mov	r10,	r11	
    cb2c:	2b 53       	incd	r11		
    cb2e:	6f 4a       	mov.b	@r10,	r15	
    cb30:	b0 12 22 cc 	call	#0xcc22	
    cb34:	0a 4b       	mov	r11,	r10	
    cb36:	4f 3c       	jmp	$+160    	;abs 0xcbd6
                    break;
               case 'i':                       // 16 bit Integer
               case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    cb38:	0b 4a       	mov	r10,	r11	
    cb3a:	2b 53       	incd	r11		
    cb3c:	2a 4a       	mov	@r10,	r10	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
    cb3e:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    cb42:	08 20       	jnz	$+18     	;abs 0xcb54
    cb44:	0a 93       	tst	r10		
    cb46:	06 34       	jge	$+14     	;abs 0xcb54
    cb48:	3a e3       	inv	r10		
    cb4a:	1a 53       	inc	r10		
    cb4c:	7f 50 c4 ff 	add.b	#-60,	r15	;#0xffc4
    cb50:	b0 12 22 cc 	call	#0xcc22	
                    _xtoa((unsigned)i, _dv + 5);
    cb54:	3d 40 fe cb 	mov	#-13314,r13	;#0xcbfe
    cb58:	0e 4a       	mov	r10,	r14	
    cb5a:	0f 43       	clr	r15		
    cb5c:	b0 12 52 c9 	call	#0xc952	
    cb60:	e9 3f       	jmp	$-44     	;abs 0xcb34
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    cb62:	06 4a       	mov	r10,	r6	
    cb64:	26 52       	add	#4,	r6	;r2 As==10
    cb66:	1b 4a 02 00 	mov	2(r10),	r11	;0x0002(r10)
    cb6a:	2a 4a       	mov	@r10,	r10	
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
    cb6c:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    cb70:	0a 20       	jnz	$+22     	;abs 0xcb86
    cb72:	0b 93       	tst	r11		
    cb74:	08 34       	jge	$+18     	;abs 0xcb86
    cb76:	3a e3       	inv	r10		
    cb78:	3b e3       	inv	r11		
    cb7a:	1a 53       	inc	r10		
    cb7c:	0b 63       	adc	r11		
    cb7e:	7f 50 c1 ff 	add.b	#-63,	r15	;#0xffc1
    cb82:	b0 12 22 cc 	call	#0xcc22	
                    _xtoa((unsigned long)n, _dv);
    cb86:	3d 40 ea cb 	mov	#-13334,r13	;#0xcbea
    cb8a:	0e 4a       	mov	r10,	r14	
    cb8c:	0f 4b       	mov	r11,	r15	
    cb8e:	b0 12 52 c9 	call	#0xc952	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
                    _xtoa((unsigned)i, _dv + 5);
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    cb92:	0a 46       	mov	r6,	r10	
    cb94:	20 3c       	jmp	$+66     	;abs 0xcbd6
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
                    _xtoa((unsigned long)n, _dv);
                    break;
               case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    cb96:	0b 4a       	mov	r10,	r11	
    cb98:	2b 53       	incd	r11		
    cb9a:	2a 4a       	mov	@r10,	r10	
                    _puth(i >> 12);
    cb9c:	0e 4a       	mov	r10,	r14	
    cb9e:	8e 10       	swpb	r14		
    cba0:	8e 11       	sxt	r14		
    cba2:	0e 11       	rra	r14		
    cba4:	0e 11       	rra	r14		
    cba6:	0e 11       	rra	r14		
    cba8:	0f 4e       	mov	r14,	r15	
    cbaa:	0f 11       	rra	r15		
    cbac:	b0 12 c4 c9 	call	#0xc9c4	
                    _puth(i >> 8);
    cbb0:	0f 4a       	mov	r10,	r15	
    cbb2:	8f 10       	swpb	r15		
    cbb4:	8f 11       	sxt	r15		
    cbb6:	b0 12 c4 c9 	call	#0xc9c4	
                    _puth(i >> 4);
    cbba:	0e 4a       	mov	r10,	r14	
    cbbc:	0e 11       	rra	r14		
    cbbe:	0e 11       	rra	r14		
    cbc0:	0e 11       	rra	r14		
    cbc2:	0f 4e       	mov	r14,	r15	
    cbc4:	0f 11       	rra	r15		
    cbc6:	b0 12 c4 c9 	call	#0xc9c4	
                    _puth(i);
    cbca:	0f 4a       	mov	r10,	r15	
    cbcc:	b0 12 c4 c9 	call	#0xc9c4	
    cbd0:	b1 3f       	jmp	$-156    	;abs 0xcb34
               default:
                    goto bad_fmt;
               }
          } else
bad_fmt:
               cio_printc(c);
    cbd2:	b0 12 22 cc 	call	#0xcc22	
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    cbd6:	6f 49       	mov.b	@r9,	r15	
    cbd8:	4f 93       	tst.b	r15		
    cbda:	7e 23       	jnz	$-258    	;abs 0xcad8
          } else
bad_fmt:
               cio_printc(c);
     }
     va_end(a);
}
    cbdc:	36 41       	pop	r6		
    cbde:	37 41       	pop	r7		
    cbe0:	38 41       	pop	r8		
    cbe2:	39 41       	pop	r9		
    cbe4:	3a 41       	pop	r10		
    cbe6:	3b 41       	pop	r11		
    cbe8:	30 41       	ret			

0000cbea <_dv>:
    cbea:	00 ca 9a 3b 00 e1 f5 05 80 96 98 00 40 42 0f 00     ...;........@B..
    cbfa:	a0 86 01 00 10 27 00 00 e8 03 00 00 64 00 00 00     .....'......d...
    cc0a:	0a 00 00 00 01 00 00 00                             ........

0000cc12 <hex.1251>:
    cc12:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

0000cc22 <cio_printc>:
#include "serial.h"
#include "conio.h"

void cio_printc(char c)
{
     serial_send_blocking(c);
    cc22:	b0 12 30 c9 	call	#0xc930	
}
    cc26:	30 41       	ret			

0000cc28 <cio_getc>:

char cio_getc()
{
	return serial_recv_blocking();
    cc28:	b0 12 44 c9 	call	#0xc944	
}
    cc2c:	30 41       	ret			

0000cc2e <pin2port>:
	PIN_FUNCTION_INPUT_FLOAT,			// P2.7
};

int pin2port(unsigned char pin) 
{
	int port = (0xF0 & pin) >> 4;
    cc2e:	12 c3       	clrc			
    cc30:	4f 10       	rrc.b	r15		
    cc32:	4f 11       	rra.b	r15		
    cc34:	4f 11       	rra.b	r15		
    cc36:	4f 11       	rra.b	r15		
    cc38:	4f 4f       	mov.b	r15,	r15	

	if(port >= 1 && port <= 2) { 
    cc3a:	0e 4f       	mov	r15,	r14	
    cc3c:	3e 53       	add	#-1,	r14	;r3 As==11
    cc3e:	2e 93       	cmp	#2,	r14	;r3 As==10
    cc40:	02 28       	jnc	$+6      	;abs 0xcc46
		return port;
	}

	return PIN_STAT_ERR_INVALPORT;
    cc42:	3f 40 fe ff 	mov	#-2,	r15	;#0xfffe
}
    cc46:	30 41       	ret			

0000cc48 <pin2bit>:
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;

	// RX/TX of uart1 are reserved, bits 0-7 are allowed 
	if(pin == PIN_1_1 || pin == PIN_1_2 || bit_num > 7) {
    cc48:	4e 4f       	mov.b	r15,	r14	
    cc4a:	7e 50 ef ff 	add.b	#-17,	r14	;#0xffef
    cc4e:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    cc50:	0c 28       	jnc	$+26     	;abs 0xcc6a
	return PIN_STAT_ERR_INVALPORT;
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
    cc52:	0e 4f       	mov	r15,	r14	
    cc54:	3e f0 0f 00 	and	#15,	r14	;#0x000f
	int bit 	=  0x01 << bit_num;

	// RX/TX of uart1 are reserved, bits 0-7 are allowed 
	if(pin == PIN_1_1 || pin == PIN_1_2 || bit_num > 7) {
    cc58:	3e 92       	cmp	#8,	r14	;r2 As==11
    cc5a:	0a 34       	jge	$+22     	;abs 0xcc70
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    cc5c:	1f 43       	mov	#1,	r15	;r3 As==01
    cc5e:	0e 93       	tst	r14		
    cc60:	03 24       	jz	$+8      	;abs 0xcc68
    cc62:	0f 5f       	rla	r15		
    cc64:	1e 83       	dec	r14		
    cc66:	fd 23       	jnz	$-4      	;abs 0xcc62
	// RX/TX of uart1 are reserved, bits 0-7 are allowed 
	if(pin == PIN_1_1 || pin == PIN_1_2 || bit_num > 7) {
		return PIN_STAT_ERR_INVALPIN;
	}

	return bit;
    cc68:	30 41       	ret			
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;

	// RX/TX of uart1 are reserved, bits 0-7 are allowed 
	if(pin == PIN_1_1 || pin == PIN_1_2 || bit_num > 7) {
		return PIN_STAT_ERR_INVALPIN;
    cc6a:	3f 40 fd ff 	mov	#-3,	r15	;#0xfffd
    cc6e:	30 41       	ret			
    cc70:	3f 40 fd ff 	mov	#-3,	r15	;#0xfffd
	}

	return bit;
}
    cc74:	30 41       	ret			

0000cc76 <pin_set_curr_func>:

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
    cc76:	4d 4f       	mov.b	r15,	r13	
    cc78:	12 c3       	clrc			
    cc7a:	4d 10       	rrc.b	r13		
    cc7c:	4d 11       	rra.b	r13		
    cc7e:	4d 11       	rra.b	r13		
    cc80:	4d 11       	rra.b	r13		
    cc82:	4d 4d       	mov.b	r13,	r13	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    cc84:	3d 53       	add	#-1,	r13	;r3 As==11
    cc86:	0d 5d       	rla	r13		
    cc88:	0d 5d       	rla	r13		
    cc8a:	0d 5d       	rla	r13		
}

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    cc8c:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    cc90:	0d 5f       	add	r15,	r13	

	if((unsigned int)idx > sizeof(pin_curr_func)) {
    cc92:	3d 90 11 00 	cmp	#17,	r13	;#0x0011
    cc96:	02 2c       	jc	$+6      	;abs 0xcc9c
		return;
	}

	pin_curr_func[idx] = func;
    cc98:	cd 4e 00 02 	mov.b	r14,	512(r13);0x0200(r13)
    cc9c:	30 41       	ret			

0000cc9e <pin_reserve>:
}

void pin_reserve(unsigned char pin) 
{
	pin_set_curr_func(pin, PIN_FUNCTION_RESERVED);	
    cc9e:	7e 40 fe ff 	mov.b	#-2,	r14	;#0xfffe
    cca2:	b0 12 76 cc 	call	#0xcc76	
}
    cca6:	30 41       	ret			

0000cca8 <pin_function>:

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
    cca8:	4e 4f       	mov.b	r15,	r14	
    ccaa:	12 c3       	clrc			
    ccac:	4e 10       	rrc.b	r14		
    ccae:	4e 11       	rra.b	r14		
    ccb0:	4e 11       	rra.b	r14		
    ccb2:	4e 11       	rra.b	r14		
    ccb4:	4e 4e       	mov.b	r14,	r14	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    ccb6:	3e 53       	add	#-1,	r14	;r3 As==11
    ccb8:	0e 5e       	rla	r14		
    ccba:	0e 5e       	rla	r14		
    ccbc:	0e 5e       	rla	r14		
}

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    ccbe:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    ccc2:	0e 5f       	add	r15,	r14	

	if((unsigned int)idx >= 16) {
    ccc4:	3e 90 10 00 	cmp	#16,	r14	;#0x0010
    ccc8:	03 2c       	jc	$+8      	;abs 0xccd0
		return PIN_FUNCTION_UNKNOWN;
	}

	return pin_curr_func[idx];
    ccca:	5f 4e 00 02 	mov.b	512(r14),r15	;0x0200(r14)
    ccce:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;

	if((unsigned int)idx >= 16) {
		return PIN_FUNCTION_UNKNOWN;
    ccd0:	7f 43       	mov.b	#-1,	r15	;r3 As==11
	}

	return pin_curr_func[idx];
}
    ccd2:	30 41       	ret			

0000ccd4 <pin_with_function>:

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    ccd4:	4f 93       	tst.b	r15		
    ccd6:	10 24       	jz	$+34     	;abs 0xccf8
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    ccd8:	0d 4f       	mov	r15,	r13	
    ccda:	3d f0 0f 00 	and	#15,	r13	;#0x000f
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    ccde:	1d 53       	inc	r13		
	return pin_curr_func[idx];
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
    cce0:	12 c3       	clrc			
    cce2:	4f 10       	rrc.b	r15		
    cce4:	4f 11       	rra.b	r15		
    cce6:	4f 11       	rra.b	r15		
    cce8:	4f 11       	rra.b	r15		
    ccea:	4f 4f       	mov.b	r15,	r15	
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    ccec:	3f 53       	add	#-1,	r15	;r3 As==11
    ccee:	0f 5f       	rla	r15		
    ccf0:	0f 5f       	rla	r15		
    ccf2:	0f 5f       	rla	r15		
    ccf4:	0d 5f       	add	r15,	r13	
    ccf6:	01 3c       	jmp	$+4      	;abs 0xccfa
    ccf8:	0d 43       	clr	r13		
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    ccfa:	1d 53       	inc	r13		
    ccfc:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    cd00:	11 3c       	jmp	$+36     	;abs 0xcd24
		if(pin_curr_func[i] == function) {
    cd02:	cd 9e 00 02 	cmp.b	r14,	512(r13);0x0200(r13)
    cd06:	0d 20       	jnz	$+28     	;abs 0xcd22
			return (((i / 8 + 1) << 4) + (i % 8));
    cd08:	0f 4d       	mov	r13,	r15	
    cd0a:	0f 11       	rra	r15		
    cd0c:	0f 11       	rra	r15		
    cd0e:	0f 11       	rra	r15		
    cd10:	5f 53       	inc.b	r15		
    cd12:	4f 5f       	rla.b	r15		
    cd14:	4f 5f       	rla.b	r15		
    cd16:	4f 5f       	rla.b	r15		
    cd18:	4f 5f       	rla.b	r15		
    cd1a:	3d f0 07 00 	and	#7,	r13	;#0x0007
    cd1e:	4f 5d       	add.b	r13,	r15	
    cd20:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    cd22:	1d 53       	inc	r13		
    cd24:	0f 9d       	cmp	r13,	r15	
    cd26:	ed 2f       	jc	$-36     	;abs 0xcd02
		if(pin_curr_func[i] == function) {
			return (((i / 8 + 1) << 4) + (i % 8));
		}
	}

	return 0;
    cd28:	4f 43       	clr.b	r15		
}
    cd2a:	30 41       	ret			

0000cd2c <pin_capabilities>:

int pin_capabilities(unsigned char pin) 
{
    cd2c:	4e 4f       	mov.b	r15,	r14	
	// PIN_CAP_OUTPUT
	// PIN_CAP_UARTRX
	// PIN_CAP_UARTTX
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    cd2e:	4d 4f       	mov.b	r15,	r13	
    cd30:	7d 50 f0 ff 	add.b	#-16,	r13	;#0xfff0

	// PIN_CAP_INPUT
	// PIN_CAP_OUTPUT
	// PIN_CAP_UARTRX
	// PIN_CAP_UARTTX
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    cd34:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    cd36:	19 28       	jnc	$+52     	;abs 0xcd6a
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    cd38:	7f 90 20 00 	cmp.b	#32,	r15	;#0x0020
    cd3c:	2d 24       	jz	$+92     	;abs 0xcd98
    cd3e:	7f 90 21 00 	cmp.b	#33,	r15	;#0x0021
    cd42:	22 24       	jz	$+70     	;abs 0xcd88
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
    cd44:	7f 90 22 00 	cmp.b	#34,	r15	;#0x0022
    cd48:	1f 24       	jz	$+64     	;abs 0xcd88
    cd4a:	7f 90 23 00 	cmp.b	#35,	r15	;#0x0023
    cd4e:	24 24       	jz	$+74     	;abs 0xcd98
    cd50:	7f 90 24 00 	cmp.b	#36,	r15	;#0x0024
    cd54:	21 24       	jz	$+68     	;abs 0xcd98
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    cd56:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    cd5a:	1e 24       	jz	$+62     	;abs 0xcd98
    cd5c:	7f 90 26 00 	cmp.b	#38,	r15	;#0x0026
    cd60:	1b 24       	jz	$+56     	;abs 0xcd98
    cd62:	7f 90 27 00 	cmp.b	#39,	r15	;#0x0027
    cd66:	1b 20       	jnz	$+56     	;abs 0xcd9e
    cd68:	17 3c       	jmp	$+48     	;abs 0xcd98
		caps |= PIN_CAP_INPUT + PIN_CAP_INPUT_RE + PIN_CAP_OUTPUT + 
				PIN_CAP_UARTTX + PIN_CAP_UARTRX;
	} 

	// PIN_CAP_PWM
	if( pin == PIN_1_2 || pin == PIN_1_6 || pin == PIN_2_1 || 
    cd6a:	7f 90 12 00 	cmp.b	#18,	r15	;#0x0012
    cd6e:	0c 24       	jz	$+26     	;abs 0xcd88
    cd70:	7f 90 16 00 	cmp.b	#22,	r15	;#0x0016
    cd74:	09 24       	jz	$+20     	;abs 0xcd88
    cd76:	3f 40 67 00 	mov	#103,	r15	;#0x0067
    cd7a:	7e 90 21 00 	cmp.b	#33,	r14	;#0x0021
    cd7e:	06 24       	jz	$+14     	;abs 0xcd8c
    cd80:	7e 90 22 00 	cmp.b	#34,	r14	;#0x0022
    cd84:	05 20       	jnz	$+12     	;abs 0xcd90
    cd86:	02 3c       	jmp	$+6      	;abs 0xcd8c
    cd88:	3f 40 67 00 	mov	#103,	r15	;#0x0067
		pin == PIN_2_2) {
	
		caps |= PIN_CAP_PWM;
    cd8c:	3f d0 10 00 	bis	#16,	r15	;#0x0010
	} 

	// PIN_CAP_ANALOG_IN
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    cd90:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    cd92:	01 2c       	jc	$+4      	;abs 0xcd96
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7) {
	
		caps |= PIN_CAP_ANALOG_IN;
    cd94:	3f d2       	bis	#8,	r15	;r2 As==11
	} 

	return caps;
}
    cd96:	30 41       	ret			
	// PIN_CAP_UARTTX
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    cd98:	3f 40 67 00 	mov	#103,	r15	;#0x0067
    cd9c:	f9 3f       	jmp	$-12     	;abs 0xcd90
	return 0;
}

int pin_capabilities(unsigned char pin) 
{
	int caps = 0;
    cd9e:	0f 43       	clr	r15		
    cda0:	ec 3f       	jmp	$-38     	;abs 0xcd7a

0000cda2 <pin_has_capabilities>:

	return caps;
}

int pin_has_capabilities(unsigned char pin, int capabilities) 
{
    cda2:	0b 12       	push	r11		
    cda4:	0b 4e       	mov	r14,	r11	
	return ((pin_capabilities(pin) & capabilities) == capabilities ? 1 : 0);
    cda6:	b0 12 2c cd 	call	#0xcd2c	
    cdaa:	0e 4f       	mov	r15,	r14	
    cdac:	0e fb       	and	r11,	r14	
    cdae:	1f 43       	mov	#1,	r15	;r3 As==01
    cdb0:	0e 9b       	cmp	r11,	r14	
    cdb2:	01 24       	jz	$+4      	;abs 0xcdb6
    cdb4:	0f 43       	clr	r15		
}
    cdb6:	3b 41       	pop	r11		
    cdb8:	30 41       	ret			

0000cdba <pin_setup>:

int pin_setup(unsigned char pin, unsigned char function)
{
    cdba:	0b 12       	push	r11		
    cdbc:	0a 12       	push	r10		
    cdbe:	09 12       	push	r9		
    cdc0:	08 12       	push	r8		
    cdc2:	49 4f       	mov.b	r15,	r9	
    cdc4:	48 4e       	mov.b	r14,	r8	
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    cdc6:	b0 12 2e cc 	call	#0xcc2e	
    cdca:	0b 4f       	mov	r15,	r11	
    cdcc:	0f 93       	tst	r15		
    cdce:	02 34       	jge	$+6      	;abs 0xcdd4
    cdd0:	30 40 b8 cf 	br	#0xcfb8	
	if((bit  = pin2bit(pin))  < 0) return bit;
    cdd4:	4f 49       	mov.b	r9,	r15	
    cdd6:	b0 12 48 cc 	call	#0xcc48	
    cdda:	0a 4f       	mov	r15,	r10	
    cddc:	0f 93       	tst	r15		
    cdde:	02 34       	jge	$+6      	;abs 0xcde4
    cde0:	30 40 ae cf 	br	#0xcfae	

	unsigned char f;

	f = pin_function(pin); 
    cde4:	4f 49       	mov.b	r9,	r15	
    cde6:	b0 12 a8 cc 	call	#0xcca8	
#ifdef PIN_DBG
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
    cdea:	4f 98       	cmp.b	r8,	r15	
    cdec:	02 20       	jnz	$+6      	;abs 0xcdf2
    cdee:	30 40 b2 cf 	br	#0xcfb2	
		return PIN_STAT_OK;
	}
	// PIN is reserved
	else if(f == PIN_FUNCTION_RESERVED) {
    cdf2:	7f 90 fe ff 	cmp.b	#-2,	r15	;#0xfffe
    cdf6:	02 20       	jnz	$+6      	;abs 0xcdfc
    cdf8:	30 40 b6 cf 	br	#0xcfb6	
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	switch(function) {
    cdfc:	78 92       	cmp.b	#8,	r8	;r2 As==11
    cdfe:	02 28       	jnc	$+6      	;abs 0xce04
    ce00:	30 40 b6 cf 	br	#0xcfb6	
    ce04:	4f 48       	mov.b	r8,	r15	
    ce06:	0f 5f       	rla	r15		
    ce08:	10 4f 0c ce 	br	-12788(r15)	;0xce0c(r15)
    ce0c:	1c ce 40 ce 	bic	-12736(r14),r12	;0xce40(r14)
    ce10:	70 ce       	bic.b	@r14+,	r0	
    ce12:	b0 ce ec ce 	bic	@r14+,	0xceec	;PC rel. 0x09d02
    ce16:	0e cf       	bic	r15,	r14	
    ce18:	72 cf       	bic.b	@r15+,	r2	
    ce1a:	86 cf 1e 43 	bic	r15,	17182(r6);0x431e(r6)
	case PIN_FUNCTION_INPUT_FLOAT:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT)) {
    ce1e:	4f 49       	mov.b	r9,	r15	
    ce20:	b0 12 a2 cd 	call	#0xcda2	
    ce24:	0f 93       	tst	r15		
    ce26:	c7 24       	jz	$+400    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ce28:	1b 93       	cmp	#1,	r11	;r3 As==01
    ce2a:	04 20       	jnz	$+10     	;abs 0xce34
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce2c:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    ce2e:	c2 fa 22 00 	and.b	r10,	&0x0022	
    ce32:	4b 3c       	jmp	$+152    	;abs 0xceca
			P1REN &= ~bit; 	                // disable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    ce34:	2b 93       	cmp	#2,	r11	;r3 As==10
    ce36:	b6 20       	jnz	$+366    	;abs 0xcfa4
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce38:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    ce3a:	c2 fa 2a 00 	and.b	r10,	&0x002a	
    ce3e:	51 3c       	jmp	$+164    	;abs 0xcee2
			P2REN &= ~bit; 	                // disable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLUP:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    ce40:	2e 43       	mov	#2,	r14	;r3 As==10
    ce42:	4f 49       	mov.b	r9,	r15	
    ce44:	b0 12 a2 cd 	call	#0xcda2	
    ce48:	0f 93       	tst	r15		
    ce4a:	b5 24       	jz	$+364    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ce4c:	1b 93       	cmp	#1,	r11	;r3 As==01
    ce4e:	07 20       	jnz	$+16     	;abs 0xce5e
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce50:	4f 4a       	mov.b	r10,	r15	
    ce52:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ce54:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT |=  bit;					// setting out to HIGH enables pull-up                     
    ce58:	c2 da 21 00 	bis.b	r10,	&0x0021	
    ce5c:	17 3c       	jmp	$+48     	;abs 0xce8c
			P1REN |=  bit; 	                // enable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    ce5e:	2b 93       	cmp	#2,	r11	;r3 As==10
    ce60:	a1 20       	jnz	$+324    	;abs 0xcfa4
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce62:	4f 4a       	mov.b	r10,	r15	
    ce64:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ce66:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT |=  bit;					// setting out to HIGH enables pull-up                     
    ce6a:	c2 da 29 00 	bis.b	r10,	&0x0029	
    ce6e:	1b 3c       	jmp	$+56     	;abs 0xcea6
			P2REN |=  bit; 	                // enable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLDOWN:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    ce70:	2e 43       	mov	#2,	r14	;r3 As==10
    ce72:	4f 49       	mov.b	r9,	r15	
    ce74:	b0 12 a2 cd 	call	#0xcda2	
    ce78:	0f 93       	tst	r15		
    ce7a:	9d 24       	jz	$+316    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ce7c:	1b 93       	cmp	#1,	r11	;r3 As==01
    ce7e:	0b 20       	jnz	$+24     	;abs 0xce96
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce80:	4f 4a       	mov.b	r10,	r15	
    ce82:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ce84:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT &= ~bit;					// setting out to LOW enables pull-down                     
    ce88:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN |=  bit; 	                // enable pull-up/down 
    ce8c:	c2 da 27 00 	bis.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    ce90:	c2 ff 26 00 	and.b	r15,	&0x0026	
    ce94:	87 3c       	jmp	$+272    	;abs 0xcfa4
		}
		else if(port == 2) {
    ce96:	2b 93       	cmp	#2,	r11	;r3 As==10
    ce98:	85 20       	jnz	$+268    	;abs 0xcfa4
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce9a:	4f 4a       	mov.b	r10,	r15	
    ce9c:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ce9e:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT &= ~bit;					// setting out to LOW enables pull-down                     
    cea2:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN |=  bit; 	                // enable pull-up/down 
    cea6:	c2 da 2f 00 	bis.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    ceaa:	c2 ff 2e 00 	and.b	r15,	&0x002e	
    ceae:	7a 3c       	jmp	$+246    	;abs 0xcfa4
		}
		break;
	case PIN_FUNCTION_OUTPUT:
		if(!pin_has_capabilities(pin, PIN_CAP_OUTPUT)) { 
    ceb0:	2e 42       	mov	#4,	r14	;r2 As==10
    ceb2:	4f 49       	mov.b	r9,	r15	
    ceb4:	b0 12 a2 cd 	call	#0xcda2	
    ceb8:	0f 93       	tst	r15		
    ceba:	7d 24       	jz	$+252    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    cebc:	1b 93       	cmp	#1,	r11	;r3 As==01
    cebe:	0a 20       	jnz	$+22     	;abs 0xced4
			P1DIR |=  bit;					// set direction to out                 
    cec0:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    cec4:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cec6:	c2 fa 21 00 	and.b	r10,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    ceca:	c2 fa 27 00 	and.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    cece:	c2 fa 26 00 	and.b	r10,	&0x0026	
    ced2:	68 3c       	jmp	$+210    	;abs 0xcfa4
		}
		else if(port == 2) {
    ced4:	2b 93       	cmp	#2,	r11	;r3 As==10
    ced6:	66 20       	jnz	$+206    	;abs 0xcfa4
			P2DIR |=  bit;					// set direction to out                 
    ced8:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    cedc:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cede:	c2 fa 29 00 	and.b	r10,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    cee2:	c2 fa 2f 00 	and.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    cee6:	c2 fa 2e 00 	and.b	r10,	&0x002e	
    ceea:	5c 3c       	jmp	$+186    	;abs 0xcfa4
		}
		break;
	case PIN_FUNCTION_ANALOG_IN:
		if(!pin_has_capabilities(pin, PIN_CAP_ANALOG_IN)) { 
    ceec:	3e 42       	mov	#8,	r14	;r2 As==11
    ceee:	4f 49       	mov.b	r9,	r15	
    cef0:	b0 12 a2 cd 	call	#0xcda2	
    cef4:	0f 93       	tst	r15		
    cef6:	5f 24       	jz	$+192    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		P1DIR &= ~bit;						// make sure to clear OUT flag for the pin                 
    cef8:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cefa:	c2 fa 22 00 	and.b	r10,	&0x0022	
		P1REN &= ~bit; 	                	// disable pull-up/down 
    cefe:	c2 fa 27 00 	and.b	r10,	&0x0027	
  		P1SEL &= ~bit;                  	// remove option
    cf02:	c2 fa 26 00 	and.b	r10,	&0x0026	

		// VCC as +VRef, VSS as -VRef, 16 x ADC10CLKs
   		ADC10CTL0 = SREF_0 + ADC10SHT_2 + REFON + ADC10ON;
    cf06:	b2 40 30 10 	mov	#4144,	&0x01b0	;#0x1030
    cf0a:	b0 01 
    cf0c:	4b 3c       	jmp	$+152    	;abs 0xcfa4

		break;
	case PIN_FUNCTION_PWM:
		if(!pin_has_capabilities(pin, PIN_CAP_PWM)) { 
    cf0e:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    cf12:	4f 49       	mov.b	r9,	r15	
    cf14:	b0 12 a2 cd 	call	#0xcda2	
    cf18:	0f 93       	tst	r15		
    cf1a:	4d 24       	jz	$+156    	;abs 0xcfb6
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		if(port == 1) {
    cf1c:	1b 93       	cmp	#1,	r11	;r3 As==01
    cf1e:	14 20       	jnz	$+42     	;abs 0xcf48
			// only one pin on port 1 is able to perform PWM
			if(pin_with_function(PIN_1_0, function) < PIN_2_0) { 
    cf20:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    cf24:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    cf28:	b0 12 d4 cc 	call	#0xccd4	
    cf2c:	7f 90 20 00 	cmp.b	#32,	r15	;#0x0020
    cf30:	42 28       	jnc	$+134    	;abs 0xcfb6
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P1DIR |=  bit;					// set direction to out                 
    cf32:	4f 4a       	mov.b	r10,	r15	
    cf34:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    cf38:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cf3a:	c2 fa 21 00 	and.b	r10,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    cf3e:	c2 fa 27 00 	and.b	r10,	&0x0027	
  			P1SEL |=  bit;                  // select TA option
    cf42:	c2 df 26 00 	bis.b	r15,	&0x0026	
    cf46:	2e 3c       	jmp	$+94     	;abs 0xcfa4
		}
		else if(port == 2) {
    cf48:	2b 93       	cmp	#2,	r11	;r3 As==10
    cf4a:	2c 20       	jnz	$+90     	;abs 0xcfa4
			// only one pin on port 2 is able to perform PWM
			if(pin_with_function(PIN_2_0, function)) { 
    cf4c:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    cf50:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    cf54:	b0 12 d4 cc 	call	#0xccd4	
    cf58:	4f 93       	tst.b	r15		
    cf5a:	2d 20       	jnz	$+92     	;abs 0xcfb6
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P2DIR |=  bit;					// set direction to out                 
    cf5c:	4f 4a       	mov.b	r10,	r15	
    cf5e:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    cf62:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cf64:	c2 fa 29 00 	and.b	r10,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    cf68:	c2 fa 2f 00 	and.b	r10,	&0x002f	
  			P2SEL |=  bit;                  // select TA option
    cf6c:	c2 df 2e 00 	bis.b	r15,	&0x002e	
    cf70:	19 3c       	jmp	$+52     	;abs 0xcfa4
		}
		break;
	case PIN_FUNCTION_UARTRX:
		if(!pin_has_capabilities(pin, PIN_CAP_UARTRX) ||
    cf72:	3e 40 20 00 	mov	#32,	r14	;#0x0020
    cf76:	4f 49       	mov.b	r9,	r15	
    cf78:	b0 12 a2 cd 	call	#0xcda2	
    cf7c:	0f 93       	tst	r15		
    cf7e:	1b 24       	jz	$+56     	;abs 0xcfb6
			pin_with_function(PIN_1_0, function)) { 
    cf80:	7e 40 06 00 	mov.b	#6,	r14	;#0x0006
    cf84:	09 3c       	jmp	$+20     	;abs 0xcf98
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		// TODO	
		break;
	case PIN_FUNCTION_UARTTX:
		if(!pin_has_capabilities(pin, PIN_CAP_UARTTX) ||
    cf86:	3e 40 40 00 	mov	#64,	r14	;#0x0040
    cf8a:	4f 49       	mov.b	r9,	r15	
    cf8c:	b0 12 a2 cd 	call	#0xcda2	
    cf90:	0f 93       	tst	r15		
    cf92:	11 24       	jz	$+36     	;abs 0xcfb6
			pin_with_function(PIN_1_0, function)) { 
    cf94:	7e 40 07 00 	mov.b	#7,	r14	;#0x0007
    cf98:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    cf9c:	b0 12 d4 cc 	call	#0xccd4	
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		// TODO	
		break;
	case PIN_FUNCTION_UARTTX:
		if(!pin_has_capabilities(pin, PIN_CAP_UARTTX) ||
    cfa0:	4f 93       	tst.b	r15		
    cfa2:	09 20       	jnz	$+20     	;abs 0xcfb6
		break;
	default:
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	pin_set_curr_func(pin, function);
    cfa4:	4e 48       	mov.b	r8,	r14	
    cfa6:	4f 49       	mov.b	r9,	r15	
    cfa8:	b0 12 76 cc 	call	#0xcc76	
    cfac:	02 3c       	jmp	$+6      	;abs 0xcfb2
{
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    cfae:	0b 4f       	mov	r15,	r11	
    cfb0:	03 3c       	jmp	$+8      	;abs 0xcfb8
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
		return PIN_STAT_OK;
    cfb2:	0b 43       	clr	r11		
    cfb4:	01 3c       	jmp	$+4      	;abs 0xcfb8
		// TODO	
		break;
	case PIN_FUNCTION_UARTTX:
		if(!pin_has_capabilities(pin, PIN_CAP_UARTTX) ||
			pin_with_function(PIN_1_0, function)) { 
			return PIN_STAT_ERR_UNSUPFUNC;
    cfb6:	3b 43       	mov	#-1,	r11	;r3 As==11
	}

	pin_set_curr_func(pin, function);

	return PIN_STAT_OK;
}
    cfb8:	0f 4b       	mov	r11,	r15	
    cfba:	38 41       	pop	r8		
    cfbc:	39 41       	pop	r9		
    cfbe:	3a 41       	pop	r10		
    cfc0:	3b 41       	pop	r11		
    cfc2:	30 41       	ret			

0000cfc4 <pin_clear>:

int pin_clear(unsigned char pin)
{
    cfc4:	0b 12       	push	r11		
    cfc6:	0a 12       	push	r10		
    cfc8:	4a 4f       	mov.b	r15,	r10	
	unsigned char pf = pin_function(pin);
    cfca:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    cfce:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    cfd2:	15 20       	jnz	$+44     	;abs 0xcffe
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    cfd4:	4f 4a       	mov.b	r10,	r15	
    cfd6:	b0 12 2e cc 	call	#0xcc2e	
    cfda:	0b 4f       	mov	r15,	r11	
    cfdc:	0f 93       	tst	r15		
    cfde:	14 38       	jl	$+42     	;abs 0xd008
	if((bit  = pin2bit(pin))  < 0) return bit;
    cfe0:	4f 4a       	mov.b	r10,	r15	
    cfe2:	b0 12 48 cc 	call	#0xcc48	
    cfe6:	0f 93       	tst	r15		
    cfe8:	0c 38       	jl	$+26     	;abs 0xd002

	if(port == 1) {
    cfea:	1b 93       	cmp	#1,	r11	;r3 As==01
    cfec:	03 20       	jnz	$+8      	;abs 0xcff4
  		P1OUT &= ~bit;					// set to LOW                   
    cfee:	c2 cf 21 00 	bic.b	r15,	&0x0021	
    cff2:	09 3c       	jmp	$+20     	;abs 0xd006
	}
	else if(port == 2) {
    cff4:	2b 93       	cmp	#2,	r11	;r3 As==10
    cff6:	07 20       	jnz	$+16     	;abs 0xd006
  		P2OUT &= ~bit;					// set to LOW                    
    cff8:	c2 cf 29 00 	bic.b	r15,	&0x0029	
    cffc:	04 3c       	jmp	$+10     	;abs 0xd006
int pin_clear(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    cffe:	3b 43       	mov	#-1,	r11	;r3 As==11
    d000:	03 3c       	jmp	$+8      	;abs 0xd008

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d002:	0b 4f       	mov	r15,	r11	
    d004:	01 3c       	jmp	$+4      	;abs 0xd008
	}
	else if(port == 2) {
  		P2OUT &= ~bit;					// set to LOW                    
	}

	return PIN_STAT_OK;
    d006:	0b 43       	clr	r11		
}
    d008:	0f 4b       	mov	r11,	r15	
    d00a:	3a 41       	pop	r10		
    d00c:	3b 41       	pop	r11		
    d00e:	30 41       	ret			

0000d010 <pin_set>:

int pin_set(unsigned char pin)
{
    d010:	0b 12       	push	r11		
    d012:	0a 12       	push	r10		
    d014:	4a 4f       	mov.b	r15,	r10	
	unsigned char pf = pin_function(pin);
    d016:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    d01a:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d01e:	15 20       	jnz	$+44     	;abs 0xd04a
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d020:	4f 4a       	mov.b	r10,	r15	
    d022:	b0 12 2e cc 	call	#0xcc2e	
    d026:	0b 4f       	mov	r15,	r11	
    d028:	0f 93       	tst	r15		
    d02a:	14 38       	jl	$+42     	;abs 0xd054
	if((bit  = pin2bit(pin))  < 0) return bit;
    d02c:	4f 4a       	mov.b	r10,	r15	
    d02e:	b0 12 48 cc 	call	#0xcc48	
    d032:	0f 93       	tst	r15		
    d034:	0c 38       	jl	$+26     	;abs 0xd04e

	if(port == 1) {
    d036:	1b 93       	cmp	#1,	r11	;r3 As==01
    d038:	03 20       	jnz	$+8      	;abs 0xd040
  		P1OUT |= bit;					// set to HIGH 
    d03a:	c2 df 21 00 	bis.b	r15,	&0x0021	
    d03e:	09 3c       	jmp	$+20     	;abs 0xd052
	}
	else if(port == 2) {
    d040:	2b 93       	cmp	#2,	r11	;r3 As==10
    d042:	07 20       	jnz	$+16     	;abs 0xd052
  		P2OUT |= bit;					// set to HIGH               
    d044:	c2 df 29 00 	bis.b	r15,	&0x0029	
    d048:	04 3c       	jmp	$+10     	;abs 0xd052
int pin_set(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d04a:	3b 43       	mov	#-1,	r11	;r3 As==11
    d04c:	03 3c       	jmp	$+8      	;abs 0xd054

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d04e:	0b 4f       	mov	r15,	r11	
    d050:	01 3c       	jmp	$+4      	;abs 0xd054
	}
	else if(port == 2) {
  		P2OUT |= bit;					// set to HIGH               
	}

	return PIN_STAT_OK;
    d052:	0b 43       	clr	r11		
}
    d054:	0f 4b       	mov	r11,	r15	
    d056:	3a 41       	pop	r10		
    d058:	3b 41       	pop	r11		
    d05a:	30 41       	ret			

0000d05c <pin_toggle>:

int pin_toggle(unsigned char pin)
{
    d05c:	0b 12       	push	r11		
    d05e:	0a 12       	push	r10		
    d060:	4a 4f       	mov.b	r15,	r10	
	unsigned char pf = pin_function(pin);
    d062:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
    d066:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d06a:	15 20       	jnz	$+44     	;abs 0xd096
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d06c:	4f 4a       	mov.b	r10,	r15	
    d06e:	b0 12 2e cc 	call	#0xcc2e	
    d072:	0b 4f       	mov	r15,	r11	
    d074:	0f 93       	tst	r15		
    d076:	14 38       	jl	$+42     	;abs 0xd0a0
	if((bit  = pin2bit(pin))  < 0) return bit;
    d078:	4f 4a       	mov.b	r10,	r15	
    d07a:	b0 12 48 cc 	call	#0xcc48	
    d07e:	0f 93       	tst	r15		
    d080:	0c 38       	jl	$+26     	;abs 0xd09a

	if(port == 1) {
    d082:	1b 93       	cmp	#1,	r11	;r3 As==01
    d084:	03 20       	jnz	$+8      	;abs 0xd08c
  		P1OUT ^= bit;					// toggle 
    d086:	c2 ef 21 00 	xor.b	r15,	&0x0021	
    d08a:	09 3c       	jmp	$+20     	;abs 0xd09e
	}
	else if(port == 2) {
    d08c:	2b 93       	cmp	#2,	r11	;r3 As==10
    d08e:	07 20       	jnz	$+16     	;abs 0xd09e
  		P2OUT ^= bit;					// toggle           
    d090:	c2 ef 29 00 	xor.b	r15,	&0x0029	
    d094:	04 3c       	jmp	$+10     	;abs 0xd09e
int pin_toggle(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d096:	3b 43       	mov	#-1,	r11	;r3 As==11
    d098:	03 3c       	jmp	$+8      	;abs 0xd0a0

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d09a:	0b 4f       	mov	r15,	r11	
    d09c:	01 3c       	jmp	$+4      	;abs 0xd0a0
	}
	else if(port == 2) {
  		P2OUT ^= bit;					// toggle           
	}

	return PIN_STAT_OK;
    d09e:	0b 43       	clr	r11		
}
    d0a0:	0f 4b       	mov	r11,	r15	
    d0a2:	3a 41       	pop	r10		
    d0a4:	3b 41       	pop	r11		
    d0a6:	30 41       	ret			

0000d0a8 <pin_digital_read>:

int pin_digital_read(unsigned char pin)
{
    d0a8:	0b 12       	push	r11		
    d0aa:	0a 12       	push	r10		
    d0ac:	4a 4f       	mov.b	r15,	r10	
	unsigned char pf = pin_function(pin);
    d0ae:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
    d0b2:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d0b6:	09 24       	jz	$+20     	;abs 0xd0ca
    d0b8:	4f 93       	tst.b	r15		
    d0ba:	07 24       	jz	$+16     	;abs 0xd0ca
    d0bc:	5f 93       	cmp.b	#1,	r15	;r3 As==01
    d0be:	05 24       	jz	$+12     	;abs 0xd0ca
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
    d0c0:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d0c2:	03 24       	jz	$+8      	;abs 0xd0ca
	   && pf != PIN_FUNCTION_PWM) { 
    d0c4:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d0c8:	19 20       	jnz	$+52     	;abs 0xd0fc
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d0ca:	4f 4a       	mov.b	r10,	r15	
    d0cc:	b0 12 2e cc 	call	#0xcc2e	
    d0d0:	0b 4f       	mov	r15,	r11	
    d0d2:	0f 93       	tst	r15		
    d0d4:	16 38       	jl	$+46     	;abs 0xd102
	if((bit  = pin2bit(pin))  < 0) return bit;
    d0d6:	4f 4a       	mov.b	r10,	r15	
    d0d8:	b0 12 48 cc 	call	#0xcc48	
    d0dc:	0f 93       	tst	r15		
    d0de:	10 38       	jl	$+34     	;abs 0xd100

	if(port == 1) {
    d0e0:	1b 93       	cmp	#1,	r11	;r3 As==01
    d0e2:	04 20       	jnz	$+10     	;abs 0xd0ec
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
    d0e4:	5e 42 20 00 	mov.b	&0x0020,r14	
    d0e8:	0e ff       	and	r15,	r14	
    d0ea:	04 3c       	jmp	$+10     	;abs 0xd0f4
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
    d0ec:	5e 42 28 00 	mov.b	&0x0028,r14	
    d0f0:	0e ff       	and	r15,	r14	
    d0f2:	1b 43       	mov	#1,	r11	;r3 As==01
    d0f4:	0e 9f       	cmp	r15,	r14	
    d0f6:	05 24       	jz	$+12     	;abs 0xd102
    d0f8:	0b 43       	clr	r11		
    d0fa:	03 3c       	jmp	$+8      	;abs 0xd102
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
	   && pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d0fc:	3b 43       	mov	#-1,	r11	;r3 As==11
    d0fe:	01 3c       	jmp	$+4      	;abs 0xd102

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d100:	0b 4f       	mov	r15,	r11	
	if(port == 1) {
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
}
    d102:	0f 4b       	mov	r11,	r15	
    d104:	3a 41       	pop	r10		
    d106:	3b 41       	pop	r11		
    d108:	30 41       	ret			

0000d10a <pin_analog_read>:

int pin_analog_read(unsigned char pin)
{
    d10a:	0b 12       	push	r11		
    d10c:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    d10e:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
    d112:	7f 50 fd ff 	add.b	#-3,	r15	;#0xfffd
    d116:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d118:	1b 2c       	jc	$+56     	;abs 0xd150
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	int s;

	if((s = pin2port(pin)) < 0) return s;
    d11a:	4f 4b       	mov.b	r11,	r15	
    d11c:	b0 12 2e cc 	call	#0xcc2e	
    d120:	0f 93       	tst	r15		
    d122:	17 38       	jl	$+48     	;abs 0xd152
	if((s = pin2bit(pin))  < 0) return s;
    d124:	4f 4b       	mov.b	r11,	r15	
    d126:	b0 12 48 cc 	call	#0xcc48	
    d12a:	0f 93       	tst	r15		
    d12c:	12 38       	jl	$+38     	;abs 0xd152

	// configure channel
   	ADC10CTL1 = 0xF000 & (pin << 12); 
    d12e:	4f 4b       	mov.b	r11,	r15	
    d130:	8f 10       	swpb	r15		
    d132:	0f 5f       	rla	r15		
    d134:	0f 5f       	rla	r15		
    d136:	0f 5f       	rla	r15		
    d138:	0f 5f       	rla	r15		
    d13a:	82 4f b2 01 	mov	r15,	&0x01b2	

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    d13e:	b2 d0 03 00 	bis	#3,	&0x01b0	;#0x0003
    d142:	b0 01 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY
    d144:	92 b3 b2 01 	bit	#1,	&0x01b2	;r3 As==01
    d148:	fd 23       	jnz	$-4      	;abs 0xd144

	return ADC10MEM;
    d14a:	1f 42 b4 01 	mov	&0x01b4,r15	
    d14e:	01 3c       	jmp	$+4      	;abs 0xd152
int pin_analog_read(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d150:	3f 43       	mov	#-1,	r15	;r3 As==11

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY

	return ADC10MEM;
}
    d152:	3b 41       	pop	r11		
    d154:	30 41       	ret			

0000d156 <pin_pulselength_read>:

int pin_pulselength_read(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
    d156:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && 
    d15a:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d15e:	02 28       	jnc	$+6      	;abs 0xd164
	   pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d160:	3f 43       	mov	#-1,	r15	;r3 As==11
    d162:	30 41       	ret			
	}

	// TODO
	return 0;
    d164:	0f 43       	clr	r15		
}
    d166:	30 41       	ret			

0000d168 <pin_pwm_function>:

int pin_pwm_function(unsigned char pin, int period)
{
    d168:	0b 12       	push	r11		
    d16a:	0a 12       	push	r10		
    d16c:	09 12       	push	r9		
    d16e:	4a 4f       	mov.b	r15,	r10	
    d170:	09 4e       	mov	r14,	r9	
	unsigned char pf = pin_function(pin);
    d172:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_PWM) { 
    d176:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d17a:	22 20       	jnz	$+70     	;abs 0xd1c0
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d17c:	4f 4a       	mov.b	r10,	r15	
    d17e:	b0 12 2e cc 	call	#0xcc2e	
    d182:	0b 4f       	mov	r15,	r11	
    d184:	0f 93       	tst	r15		
    d186:	1f 38       	jl	$+64     	;abs 0xd1c6
	if((bit  = pin2bit(pin))  < 0) return bit;
    d188:	4f 4a       	mov.b	r10,	r15	
    d18a:	b0 12 48 cc 	call	#0xcc48	
    d18e:	0f 93       	tst	r15		
    d190:	19 38       	jl	$+52     	;abs 0xd1c4
    d192:	0e 49       	mov	r9,	r14	
    d194:	3e 53       	add	#-1,	r14	;r3 As==11

	if(port == 1) {
    d196:	1b 93       	cmp	#1,	r11	;r3 As==01
    d198:	09 20       	jnz	$+20     	;abs 0xd1ac
  		TA0CCR0  = period - 1;					// Set period 
    d19a:	82 4e 72 01 	mov	r14,	&0x0172	
		TA0CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    d19e:	b2 40 e0 00 	mov	#224,	&0x0164	;#0x00e0
    d1a2:	64 01 
		TA0CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    d1a4:	b2 40 10 02 	mov	#528,	&0x0160	;#0x0210
    d1a8:	60 01 
    d1aa:	08 3c       	jmp	$+18     	;abs 0xd1bc
	}
	else {
  		TA1CCR0  = period - 1;					// Set period 
    d1ac:	82 4e 92 01 	mov	r14,	&0x0192	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    d1b0:	b2 40 e0 00 	mov	#224,	&0x0184	;#0x00e0
    d1b4:	84 01 
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    d1b6:	b2 40 10 02 	mov	#528,	&0x0180	;#0x0210
    d1ba:	80 01 
	}

	return PIN_STAT_OK;
    d1bc:	0b 43       	clr	r11		
    d1be:	03 3c       	jmp	$+8      	;abs 0xd1c6
int pin_pwm_function(unsigned char pin, int period)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d1c0:	3b 43       	mov	#-1,	r11	;r3 As==11
    d1c2:	01 3c       	jmp	$+4      	;abs 0xd1c6

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d1c4:	0b 4f       	mov	r15,	r11	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
	}

	return PIN_STAT_OK;
}
    d1c6:	0f 4b       	mov	r11,	r15	
    d1c8:	39 41       	pop	r9		
    d1ca:	3a 41       	pop	r10		
    d1cc:	3b 41       	pop	r11		
    d1ce:	30 41       	ret			

0000d1d0 <pin_pwm_control>:

int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
    d1d0:	0b 12       	push	r11		
    d1d2:	0a 12       	push	r10		
    d1d4:	09 12       	push	r9		
    d1d6:	4a 4f       	mov.b	r15,	r10	
    d1d8:	49 4e       	mov.b	r14,	r9	
	unsigned char pf = pin_function(pin);
    d1da:	b0 12 a8 cc 	call	#0xcca8	
 
	if(pf != PIN_FUNCTION_PWM) { 
    d1de:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d1e2:	51 20       	jnz	$+164    	;abs 0xd286
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d1e4:	4f 4a       	mov.b	r10,	r15	
    d1e6:	b0 12 2e cc 	call	#0xcc2e	
    d1ea:	0b 4f       	mov	r15,	r11	
    d1ec:	0f 93       	tst	r15		
    d1ee:	4e 38       	jl	$+158    	;abs 0xd28c
	if((bit  = pin2bit(pin))  < 0) return bit;
    d1f0:	4f 4a       	mov.b	r10,	r15	
    d1f2:	b0 12 48 cc 	call	#0xcc48	
    d1f6:	0f 93       	tst	r15		
    d1f8:	48 38       	jl	$+146    	;abs 0xd28a
    d1fa:	49 49       	mov.b	r9,	r9	

	if(port == 1) {
    d1fc:	1b 93       	cmp	#1,	r11	;r3 As==01
    d1fe:	21 20       	jnz	$+68     	;abs 0xd242
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA0CCR1 = (TA0CCR0 / 100) * (duty_cycle / 2.55); 
    d200:	1c 42 72 01 	mov	&0x0172,r12	
    d204:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    d208:	b0 12 e6 e0 	call	#0xe0e6	
    d20c:	0e 4c       	mov	r12,	r14	
    d20e:	0f 43       	clr	r15		
    d210:	b0 12 0c db 	call	#0xdb0c	
    d214:	0a 4e       	mov	r14,	r10	
    d216:	0b 4f       	mov	r15,	r11	
    d218:	0e 49       	mov	r9,	r14	
    d21a:	0f 43       	clr	r15		
    d21c:	b0 12 e0 d9 	call	#0xd9e0	
    d220:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    d224:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    d228:	b0 12 28 d8 	call	#0xd828	
    d22c:	0c 4e       	mov	r14,	r12	
    d22e:	0d 4f       	mov	r15,	r13	
    d230:	0e 4a       	mov	r10,	r14	
    d232:	0f 4b       	mov	r11,	r15	
    d234:	b0 12 2a d6 	call	#0xd62a	
    d238:	b0 12 96 d2 	call	#0xd296	
    d23c:	82 4e 74 01 	mov	r14,	&0x0174	
    d240:	20 3c       	jmp	$+66     	;abs 0xd282
	}
	else {
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
    d242:	1c 42 92 01 	mov	&0x0192,r12	
    d246:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    d24a:	b0 12 e6 e0 	call	#0xe0e6	
    d24e:	0e 4c       	mov	r12,	r14	
    d250:	0f 43       	clr	r15		
    d252:	b0 12 0c db 	call	#0xdb0c	
    d256:	0a 4e       	mov	r14,	r10	
    d258:	0b 4f       	mov	r15,	r11	
    d25a:	0e 49       	mov	r9,	r14	
    d25c:	0f 43       	clr	r15		
    d25e:	b0 12 e0 d9 	call	#0xd9e0	
    d262:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    d266:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    d26a:	b0 12 28 d8 	call	#0xd828	
    d26e:	0c 4e       	mov	r14,	r12	
    d270:	0d 4f       	mov	r15,	r13	
    d272:	0e 4a       	mov	r10,	r14	
    d274:	0f 4b       	mov	r11,	r15	
    d276:	b0 12 2a d6 	call	#0xd62a	
    d27a:	b0 12 96 d2 	call	#0xd296	
    d27e:	82 4e 94 01 	mov	r14,	&0x0194	
	}

	return PIN_STAT_OK;
    d282:	0b 43       	clr	r11		
    d284:	03 3c       	jmp	$+8      	;abs 0xd28c
int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d286:	3b 43       	mov	#-1,	r11	;r3 As==11
    d288:	01 3c       	jmp	$+4      	;abs 0xd28c

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d28a:	0b 4f       	mov	r15,	r11	
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
	}

	return PIN_STAT_OK;
}
    d28c:	0f 4b       	mov	r11,	r15	
    d28e:	39 41       	pop	r9		
    d290:	3a 41       	pop	r10		
    d292:	3b 41       	pop	r11		
    d294:	30 41       	ret			

0000d296 <__fixunssfsi>:
    d296:	0b 12       	push	r11		
    d298:	0a 12       	push	r10		
    d29a:	0a 4e       	mov	r14,	r10	
    d29c:	0b 4f       	mov	r15,	r11	
    d29e:	0c 43       	clr	r12		
    d2a0:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    d2a4:	b0 12 88 d9 	call	#0xd988	
    d2a8:	0f 93       	tst	r15		
    d2aa:	07 34       	jge	$+16     	;abs 0xd2ba
    d2ac:	0e 4a       	mov	r10,	r14	
    d2ae:	0f 4b       	mov	r11,	r15	
    d2b0:	b0 12 7a da 	call	#0xda7a	
    d2b4:	3a 41       	pop	r10		
    d2b6:	3b 41       	pop	r11		
    d2b8:	30 41       	ret			
    d2ba:	0c 43       	clr	r12		
    d2bc:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    d2c0:	0e 4a       	mov	r10,	r14	
    d2c2:	0f 4b       	mov	r11,	r15	
    d2c4:	b0 12 d6 d5 	call	#0xd5d6	
    d2c8:	b0 12 7a da 	call	#0xda7a	
    d2cc:	0e 53       	add	#0,	r14	;r3 As==00
    d2ce:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    d2d2:	3a 41       	pop	r10		
    d2d4:	3b 41       	pop	r11		
    d2d6:	30 41       	ret			

0000d2d8 <_fpadd_parts>:
    d2d8:	0b 12       	push	r11		
    d2da:	0a 12       	push	r10		
    d2dc:	09 12       	push	r9		
    d2de:	08 12       	push	r8		
    d2e0:	07 12       	push	r7		
    d2e2:	06 12       	push	r6		
    d2e4:	05 12       	push	r5		
    d2e6:	04 12       	push	r4		
    d2e8:	31 82       	sub	#8,	r1	;r2 As==11
    d2ea:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d2ee:	06 4d       	mov	r13,	r6	
    d2f0:	6b 4f       	mov.b	@r15,	r11	
    d2f2:	59 43       	mov.b	#1,	r9	;r3 As==01
    d2f4:	49 9b       	cmp.b	r11,	r9	
    d2f6:	aa 2c       	jc	$+342    	;abs 0xd44c
    d2f8:	6c 4e       	mov.b	@r14,	r12	
    d2fa:	49 9c       	cmp.b	r12,	r9	
    d2fc:	02 28       	jnc	$+6      	;abs 0xd302
    d2fe:	30 40 12 d5 	br	#0xd512	
    d302:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    d304:	02 20       	jnz	$+6      	;abs 0xd30a
    d306:	30 40 74 d5 	br	#0xd574	
    d30a:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d30c:	02 20       	jnz	$+6      	;abs 0xd312
    d30e:	30 40 12 d5 	br	#0xd512	
    d312:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d314:	c4 24       	jz	$+394    	;abs 0xd49e
    d316:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    d318:	02 20       	jnz	$+6      	;abs 0xd31e
    d31a:	30 40 12 d5 	br	#0xd512	
    d31e:	91 4f 02 00 	mov	2(r15),	2(r1)	;0x0002(r15), 0x0002(r1)
    d322:	02 00 
    d324:	2c 41       	mov	@r1,	r12	
    d326:	1b 4c 02 00 	mov	2(r12),	r11	;0x0002(r12)
    d32a:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    d32e:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    d332:	17 4c 04 00 	mov	4(r12),	r7	;0x0004(r12)
    d336:	18 4c 06 00 	mov	6(r12),	r8	;0x0006(r12)
    d33a:	1c 41 02 00 	mov	2(r1),	r12	;0x0002(r1)
    d33e:	0c 8b       	sub	r11,	r12	
    d340:	09 4c       	mov	r12,	r9	
    d342:	d9 30       	jn	$+436    	;abs 0xd4f6
    d344:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    d348:	8b 34       	jge	$+280    	;abs 0xd460
    d34a:	1c 93       	cmp	#1,	r12	;r3 As==01
    d34c:	02 34       	jge	$+6      	;abs 0xd352
    d34e:	30 40 16 d5 	br	#0xd516	
    d352:	0e 49       	mov	r9,	r14	
    d354:	0a 47       	mov	r7,	r10	
    d356:	0b 48       	mov	r8,	r11	
    d358:	0e 93       	tst	r14		
    d35a:	05 24       	jz	$+12     	;abs 0xd366
    d35c:	12 c3       	clrc			
    d35e:	0b 10       	rrc	r11		
    d360:	0a 10       	rrc	r10		
    d362:	1e 83       	dec	r14		
    d364:	fb 23       	jnz	$-8      	;abs 0xd35c
    d366:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d36a:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d36e:	1c 43       	mov	#1,	r12	;r3 As==01
    d370:	0d 43       	clr	r13		
    d372:	0e 49       	mov	r9,	r14	
    d374:	09 4c       	mov	r12,	r9	
    d376:	0a 4d       	mov	r13,	r10	
    d378:	0e 93       	tst	r14		
    d37a:	04 24       	jz	$+10     	;abs 0xd384
    d37c:	09 59       	rla	r9		
    d37e:	0a 6a       	rlc	r10		
    d380:	1e 83       	dec	r14		
    d382:	fc 23       	jnz	$-6      	;abs 0xd37c
    d384:	39 53       	add	#-1,	r9	;r3 As==11
    d386:	3a 63       	addc	#-1,	r10	;r3 As==11
    d388:	09 f7       	and	r7,	r9	
    d38a:	0a f8       	and	r8,	r10	
    d38c:	09 93       	tst	r9		
    d38e:	b9 24       	jz	$+372    	;abs 0xd502
    d390:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    d394:	18 41 06 00 	mov	6(r1),	r8	;0x0006(r1)
    d398:	07 dc       	bis	r12,	r7	
    d39a:	08 dd       	bis	r13,	r8	
    d39c:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    d3a0:	2c 41       	mov	@r1,	r12	
    d3a2:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    d3a6:	67 24       	jz	$+208    	;abs 0xd476
    d3a8:	4f 93       	tst.b	r15		
    d3aa:	9b 24       	jz	$+312    	;abs 0xd4e2
    d3ac:	0c 47       	mov	r7,	r12	
    d3ae:	0d 48       	mov	r8,	r13	
    d3b0:	0c 84       	sub	r4,	r12	
    d3b2:	0d 75       	subc	r5,	r13	
    d3b4:	0d 93       	tst	r13		
    d3b6:	89 34       	jge	$+276    	;abs 0xd4ca
    d3b8:	d6 43 01 00 	mov.b	#1,	1(r6)	;r3 As==01, 0x0001(r6)
    d3bc:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d3c0:	02 00 
    d3c2:	0e 4c       	mov	r12,	r14	
    d3c4:	0f 4d       	mov	r13,	r15	
    d3c6:	3e e3       	inv	r14		
    d3c8:	3f e3       	inv	r15		
    d3ca:	1e 53       	inc	r14		
    d3cc:	0f 63       	adc	r15		
    d3ce:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d3d2:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d3d6:	0c 4e       	mov	r14,	r12	
    d3d8:	0d 4f       	mov	r15,	r13	
    d3da:	3c 53       	add	#-1,	r12	;r3 As==11
    d3dc:	3d 63       	addc	#-1,	r13	;r3 As==11
    d3de:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d3e2:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d3e6:	0a 9d       	cmp	r13,	r10	
    d3e8:	1a 28       	jnc	$+54     	;abs 0xd41e
    d3ea:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d3ee:	8e 24       	jz	$+286    	;abs 0xd50c
    d3f0:	1b 46 02 00 	mov	2(r6),	r11	;0x0002(r6)
    d3f4:	3b 53       	add	#-1,	r11	;r3 As==11
    d3f6:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d3fa:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d3fe:	0e 5e       	rla	r14		
    d400:	0f 6f       	rlc	r15		
    d402:	08 4b       	mov	r11,	r8	
    d404:	3b 53       	add	#-1,	r11	;r3 As==11
    d406:	0c 4e       	mov	r14,	r12	
    d408:	0d 4f       	mov	r15,	r13	
    d40a:	3c 53       	add	#-1,	r12	;r3 As==11
    d40c:	3d 63       	addc	#-1,	r13	;r3 As==11
    d40e:	0a 9d       	cmp	r13,	r10	
    d410:	40 2c       	jc	$+130    	;abs 0xd492
    d412:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d416:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d41a:	86 48 02 00 	mov	r8,	2(r6)	;0x0002(r6)
    d41e:	f6 40 03 00 	mov.b	#3,	0(r6)	;#0x0003, 0x0000(r6)
    d422:	00 00 
    d424:	0f 93       	tst	r15		
    d426:	11 34       	jge	$+36     	;abs 0xd44a
    d428:	0c 4e       	mov	r14,	r12	
    d42a:	0d 4f       	mov	r15,	r13	
    d42c:	1c f3       	and	#1,	r12	;r3 As==01
    d42e:	0d f3       	and	#0,	r13	;r3 As==00
    d430:	12 c3       	clrc			
    d432:	0f 10       	rrc	r15		
    d434:	0e 10       	rrc	r14		
    d436:	0a 4c       	mov	r12,	r10	
    d438:	0b 4d       	mov	r13,	r11	
    d43a:	0a de       	bis	r14,	r10	
    d43c:	0b df       	bis	r15,	r11	
    d43e:	86 4a 04 00 	mov	r10,	4(r6)	;0x0004(r6)
    d442:	86 4b 06 00 	mov	r11,	6(r6)	;0x0006(r6)
    d446:	96 53 02 00 	inc	2(r6)		;0x0002(r6)
    d44a:	0f 46       	mov	r6,	r15	
    d44c:	31 52       	add	#8,	r1	;r2 As==11
    d44e:	34 41       	pop	r4		
    d450:	35 41       	pop	r5		
    d452:	36 41       	pop	r6		
    d454:	37 41       	pop	r7		
    d456:	38 41       	pop	r8		
    d458:	39 41       	pop	r9		
    d45a:	3a 41       	pop	r10		
    d45c:	3b 41       	pop	r11		
    d45e:	30 41       	ret			
    d460:	1b 91 02 00 	cmp	2(r1),	r11	;0x0002(r1)
    d464:	43 34       	jge	$+136    	;abs 0xd4ec
    d466:	07 43       	clr	r7		
    d468:	08 43       	clr	r8		
    d46a:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    d46e:	2c 41       	mov	@r1,	r12	
    d470:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    d474:	99 23       	jnz	$-204    	;abs 0xd3a8
    d476:	c6 4f 01 00 	mov.b	r15,	1(r6)	;0x0001(r6)
    d47a:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d47e:	02 00 
    d480:	0e 47       	mov	r7,	r14	
    d482:	0f 48       	mov	r8,	r15	
    d484:	0e 54       	add	r4,	r14	
    d486:	0f 65       	addc	r5,	r15	
    d488:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d48c:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d490:	c6 3f       	jmp	$-114    	;abs 0xd41e
    d492:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d496:	b3 2b       	jnc	$-152    	;abs 0xd3fe
    d498:	09 9c       	cmp	r12,	r9	
    d49a:	b1 2f       	jc	$-156    	;abs 0xd3fe
    d49c:	ba 3f       	jmp	$-138    	;abs 0xd412
    d49e:	4b 9c       	cmp.b	r12,	r11	
    d4a0:	d5 23       	jnz	$-84     	;abs 0xd44c
    d4a2:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    d4a6:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    d4aa:	02 00 
    d4ac:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    d4b0:	04 00 
    d4b2:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    d4b6:	06 00 
    d4b8:	2b 41       	mov	@r1,	r11	
    d4ba:	5a 4b 01 00 	mov.b	1(r11),	r10	;0x0001(r11)
    d4be:	5a ff 01 00 	and.b	1(r15),	r10	;0x0001(r15)
    d4c2:	cd 4a 01 00 	mov.b	r10,	1(r13)	;0x0001(r13)
    d4c6:	0f 4d       	mov	r13,	r15	
    d4c8:	c1 3f       	jmp	$-124    	;abs 0xd44c
    d4ca:	c6 43 01 00 	mov.b	#0,	1(r6)	;r3 As==00, 0x0001(r6)
    d4ce:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d4d2:	02 00 
    d4d4:	0e 4c       	mov	r12,	r14	
    d4d6:	0f 4d       	mov	r13,	r15	
    d4d8:	86 4c 04 00 	mov	r12,	4(r6)	;0x0004(r6)
    d4dc:	86 4d 06 00 	mov	r13,	6(r6)	;0x0006(r6)
    d4e0:	7a 3f       	jmp	$-266    	;abs 0xd3d6
    d4e2:	0c 44       	mov	r4,	r12	
    d4e4:	0d 45       	mov	r5,	r13	
    d4e6:	0c 87       	sub	r7,	r12	
    d4e8:	0d 78       	subc	r8,	r13	
    d4ea:	64 3f       	jmp	$-310    	;abs 0xd3b4
    d4ec:	81 4b 02 00 	mov	r11,	2(r1)	;0x0002(r1)
    d4f0:	04 43       	clr	r4		
    d4f2:	05 43       	clr	r5		
    d4f4:	53 3f       	jmp	$-344    	;abs 0xd39c
    d4f6:	39 e3       	inv	r9		
    d4f8:	19 53       	inc	r9		
    d4fa:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    d4fe:	b0 37       	jge	$-158    	;abs 0xd460
    d500:	24 3f       	jmp	$-438    	;abs 0xd34a
    d502:	0a 93       	tst	r10		
    d504:	45 23       	jnz	$-372    	;abs 0xd390
    d506:	0c 43       	clr	r12		
    d508:	0d 43       	clr	r13		
    d50a:	42 3f       	jmp	$-378    	;abs 0xd390
    d50c:	09 9c       	cmp	r12,	r9	
    d50e:	87 2b       	jnc	$-240    	;abs 0xd41e
    d510:	6f 3f       	jmp	$-288    	;abs 0xd3f0
    d512:	2f 41       	mov	@r1,	r15	
    d514:	9b 3f       	jmp	$-200    	;abs 0xd44c
    d516:	0c 93       	tst	r12		
    d518:	41 27       	jz	$-380    	;abs 0xd39c
    d51a:	81 59 02 00 	add	r9,	2(r1)	;0x0002(r1)
    d51e:	0e 49       	mov	r9,	r14	
    d520:	0b 44       	mov	r4,	r11	
    d522:	0c 45       	mov	r5,	r12	
    d524:	0e 93       	tst	r14		
    d526:	05 24       	jz	$+12     	;abs 0xd532
    d528:	12 c3       	clrc			
    d52a:	0c 10       	rrc	r12		
    d52c:	0b 10       	rrc	r11		
    d52e:	1e 83       	dec	r14		
    d530:	fb 23       	jnz	$-8      	;abs 0xd528
    d532:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    d536:	81 4c 06 00 	mov	r12,	6(r1)	;0x0006(r1)
    d53a:	1d 43       	mov	#1,	r13	;r3 As==01
    d53c:	0e 43       	clr	r14		
    d53e:	0b 4d       	mov	r13,	r11	
    d540:	0c 4e       	mov	r14,	r12	
    d542:	09 93       	tst	r9		
    d544:	04 24       	jz	$+10     	;abs 0xd54e
    d546:	0b 5b       	rla	r11		
    d548:	0c 6c       	rlc	r12		
    d54a:	19 83       	dec	r9		
    d54c:	fc 23       	jnz	$-6      	;abs 0xd546
    d54e:	3b 53       	add	#-1,	r11	;r3 As==11
    d550:	3c 63       	addc	#-1,	r12	;r3 As==11
    d552:	0b f4       	and	r4,	r11	
    d554:	0c f5       	and	r5,	r12	
    d556:	0b 93       	tst	r11		
    d558:	08 24       	jz	$+18     	;abs 0xd56a
    d55a:	14 41 04 00 	mov	4(r1),	r4	;0x0004(r1)
    d55e:	15 41 06 00 	mov	6(r1),	r5	;0x0006(r1)
    d562:	04 dd       	bis	r13,	r4	
    d564:	05 de       	bis	r14,	r5	
    d566:	30 40 9c d3 	br	#0xd39c	
    d56a:	0c 93       	tst	r12		
    d56c:	f6 23       	jnz	$-18     	;abs 0xd55a
    d56e:	0d 43       	clr	r13		
    d570:	0e 43       	clr	r14		
    d572:	f3 3f       	jmp	$-24     	;abs 0xd55a
    d574:	4c 9b       	cmp.b	r11,	r12	
    d576:	6a 23       	jnz	$-298    	;abs 0xd44c
    d578:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    d57c:	01 00 
    d57e:	66 27       	jz	$-306    	;abs 0xd44c
    d580:	3f 40 04 db 	mov	#-9468,	r15	;#0xdb04
    d584:	63 3f       	jmp	$-312    	;abs 0xd44c

0000d586 <__addsf3>:
    d586:	0b 12       	push	r11		
    d588:	0a 12       	push	r10		
    d58a:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d58e:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d592:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d596:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d59a:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d59e:	0b 41       	mov	r1,	r11	
    d5a0:	3b 52       	add	#8,	r11	;r2 As==11
    d5a2:	0e 4b       	mov	r11,	r14	
    d5a4:	0f 41       	mov	r1,	r15	
    d5a6:	b0 12 12 de 	call	#0xde12	
    d5aa:	0a 41       	mov	r1,	r10	
    d5ac:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d5b0:	0e 4a       	mov	r10,	r14	
    d5b2:	0f 41       	mov	r1,	r15	
    d5b4:	2f 52       	add	#4,	r15	;r2 As==10
    d5b6:	b0 12 12 de 	call	#0xde12	
    d5ba:	0d 41       	mov	r1,	r13	
    d5bc:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d5c0:	0e 4a       	mov	r10,	r14	
    d5c2:	0f 4b       	mov	r11,	r15	
    d5c4:	b0 12 d8 d2 	call	#0xd2d8	
    d5c8:	b0 12 3c dc 	call	#0xdc3c	
    d5cc:	31 50 20 00 	add	#32,	r1	;#0x0020
    d5d0:	3a 41       	pop	r10		
    d5d2:	3b 41       	pop	r11		
    d5d4:	30 41       	ret			

0000d5d6 <__subsf3>:
    d5d6:	0b 12       	push	r11		
    d5d8:	0a 12       	push	r10		
    d5da:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d5de:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d5e2:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d5e6:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d5ea:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d5ee:	0b 41       	mov	r1,	r11	
    d5f0:	3b 52       	add	#8,	r11	;r2 As==11
    d5f2:	0e 4b       	mov	r11,	r14	
    d5f4:	0f 41       	mov	r1,	r15	
    d5f6:	b0 12 12 de 	call	#0xde12	
    d5fa:	0a 41       	mov	r1,	r10	
    d5fc:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d600:	0e 4a       	mov	r10,	r14	
    d602:	0f 41       	mov	r1,	r15	
    d604:	2f 52       	add	#4,	r15	;r2 As==10
    d606:	b0 12 12 de 	call	#0xde12	
    d60a:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    d60e:	0d 41       	mov	r1,	r13	
    d610:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d614:	0e 4a       	mov	r10,	r14	
    d616:	0f 4b       	mov	r11,	r15	
    d618:	b0 12 d8 d2 	call	#0xd2d8	
    d61c:	b0 12 3c dc 	call	#0xdc3c	
    d620:	31 50 20 00 	add	#32,	r1	;#0x0020
    d624:	3a 41       	pop	r10		
    d626:	3b 41       	pop	r11		
    d628:	30 41       	ret			

0000d62a <__mulsf3>:
    d62a:	0b 12       	push	r11		
    d62c:	0a 12       	push	r10		
    d62e:	09 12       	push	r9		
    d630:	08 12       	push	r8		
    d632:	07 12       	push	r7		
    d634:	06 12       	push	r6		
    d636:	05 12       	push	r5		
    d638:	04 12       	push	r4		
    d63a:	31 50 de ff 	add	#-34,	r1	;#0xffde
    d63e:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d642:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d646:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d64a:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d64e:	08 41       	mov	r1,	r8	
    d650:	38 52       	add	#8,	r8	;r2 As==11
    d652:	0e 48       	mov	r8,	r14	
    d654:	0f 41       	mov	r1,	r15	
    d656:	b0 12 12 de 	call	#0xde12	
    d65a:	06 41       	mov	r1,	r6	
    d65c:	36 50 10 00 	add	#16,	r6	;#0x0010
    d660:	0e 46       	mov	r6,	r14	
    d662:	0f 41       	mov	r1,	r15	
    d664:	2f 52       	add	#4,	r15	;r2 As==10
    d666:	b0 12 12 de 	call	#0xde12	
    d66a:	5c 41 08 00 	mov.b	8(r1),	r12	;0x0008(r1)
    d66e:	5d 43       	mov.b	#1,	r13	;r3 As==01
    d670:	4d 9c       	cmp.b	r12,	r13	
    d672:	a4 2c       	jc	$+330    	;abs 0xd7bc
    d674:	5a 41 10 00 	mov.b	16(r1),	r10	;0x0010(r1)
    d678:	4d 9a       	cmp.b	r10,	r13	
    d67a:	c4 2c       	jc	$+394    	;abs 0xd804
    d67c:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d67e:	9c 24       	jz	$+314    	;abs 0xd7b8
    d680:	6a 92       	cmp.b	#4,	r10	;r2 As==10
    d682:	02 20       	jnz	$+6      	;abs 0xd688
    d684:	30 40 1e d8 	br	#0xd81e	
    d688:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d68a:	98 24       	jz	$+306    	;abs 0xd7bc
    d68c:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d68e:	ba 24       	jz	$+374    	;abs 0xd804
    d690:	14 41 0c 00 	mov	12(r1),	r4	;0x000c(r1)
    d694:	91 41 0e 00 	mov	14(r1),	32(r1)	;0x000e(r1), 0x0020(r1)
    d698:	20 00 
    d69a:	1a 41 14 00 	mov	20(r1),	r10	;0x0014(r1)
    d69e:	1b 41 16 00 	mov	22(r1),	r11	;0x0016(r1)
    d6a2:	05 43       	clr	r5		
    d6a4:	0c 43       	clr	r12		
    d6a6:	0d 43       	clr	r13		
    d6a8:	06 4c       	mov	r12,	r6	
    d6aa:	07 4d       	mov	r13,	r7	
    d6ac:	08 4c       	mov	r12,	r8	
    d6ae:	09 4d       	mov	r13,	r9	
    d6b0:	19 3c       	jmp	$+52     	;abs 0xd6e4
    d6b2:	0e 43       	clr	r14		
    d6b4:	0f 43       	clr	r15		
    d6b6:	0c 5e       	add	r14,	r12	
    d6b8:	0d 6f       	addc	r15,	r13	
    d6ba:	06 56       	rla	r6		
    d6bc:	07 67       	rlc	r7		
    d6be:	0b 93       	tst	r11		
    d6c0:	02 34       	jge	$+6      	;abs 0xd6c6
    d6c2:	16 d3       	bis	#1,	r6	;r3 As==01
    d6c4:	07 d3       	bis	#0,	r7	;r3 As==00
    d6c6:	15 53       	inc	r5		
    d6c8:	35 90 20 00 	cmp	#32,	r5	;#0x0020
    d6cc:	1a 24       	jz	$+54     	;abs 0xd702
    d6ce:	0a 5a       	rla	r10		
    d6d0:	0b 6b       	rlc	r11		
    d6d2:	0e 44       	mov	r4,	r14	
    d6d4:	1f 41 20 00 	mov	32(r1),	r15	;0x0020(r1)
    d6d8:	12 c3       	clrc			
    d6da:	0f 10       	rrc	r15		
    d6dc:	0e 10       	rrc	r14		
    d6de:	04 4e       	mov	r14,	r4	
    d6e0:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    d6e4:	14 b3       	bit	#1,	r4	;r3 As==01
    d6e6:	e9 27       	jz	$-44     	;abs 0xd6ba
    d6e8:	08 5a       	add	r10,	r8	
    d6ea:	09 6b       	addc	r11,	r9	
    d6ec:	0c 56       	add	r6,	r12	
    d6ee:	0d 67       	addc	r7,	r13	
    d6f0:	1e 43       	mov	#1,	r14	;r3 As==01
    d6f2:	0f 43       	clr	r15		
    d6f4:	09 9b       	cmp	r11,	r9	
    d6f6:	df 2b       	jnc	$-64     	;abs 0xd6b6
    d6f8:	09 9b       	cmp	r11,	r9	
    d6fa:	db 23       	jnz	$-72     	;abs 0xd6b2
    d6fc:	08 9a       	cmp	r10,	r8	
    d6fe:	db 2b       	jnc	$-72     	;abs 0xd6b6
    d700:	d8 3f       	jmp	$-78     	;abs 0xd6b2
    d702:	0a 4d       	mov	r13,	r10	
    d704:	1f 41 12 00 	mov	18(r1),	r15	;0x0012(r1)
    d708:	1f 51 0a 00 	add	10(r1),	r15	;0x000a(r1)
    d70c:	0e 4f       	mov	r15,	r14	
    d70e:	2e 53       	incd	r14		
    d710:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d714:	5e 43       	mov.b	#1,	r14	;r3 As==01
    d716:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d71a:	09 00 
    d71c:	57 24       	jz	$+176    	;abs 0xd7cc
    d71e:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d722:	0a 93       	tst	r10		
    d724:	13 34       	jge	$+40     	;abs 0xd74c
    d726:	3f 50 03 00 	add	#3,	r15	;#0x0003
    d72a:	0a 4f       	mov	r15,	r10	
    d72c:	1c b3       	bit	#1,	r12	;r3 As==01
    d72e:	06 24       	jz	$+14     	;abs 0xd73c
    d730:	12 c3       	clrc			
    d732:	09 10       	rrc	r9		
    d734:	08 10       	rrc	r8		
    d736:	08 d3       	bis	#0,	r8	;r3 As==00
    d738:	39 d0 00 80 	bis	#-32768,r9	;#0x8000
    d73c:	12 c3       	clrc			
    d73e:	0d 10       	rrc	r13		
    d740:	0c 10       	rrc	r12		
    d742:	1f 53       	inc	r15		
    d744:	0d 93       	tst	r13		
    d746:	f1 3b       	jl	$-28     	;abs 0xd72a
    d748:	81 4a 1a 00 	mov	r10,	26(r1)	;0x001a(r1)
    d74c:	3a 43       	mov	#-1,	r10	;r3 As==11
    d74e:	3b 40 ff 3f 	mov	#16383,	r11	;#0x3fff
    d752:	0b 9d       	cmp	r13,	r11	
    d754:	12 28       	jnc	$+38     	;abs 0xd77a
    d756:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    d75a:	3f 53       	add	#-1,	r15	;r3 As==11
    d75c:	0a 4b       	mov	r11,	r10	
    d75e:	0e 4f       	mov	r15,	r14	
    d760:	0c 5c       	rla	r12		
    d762:	0d 6d       	rlc	r13		
    d764:	09 93       	tst	r9		
    d766:	02 34       	jge	$+6      	;abs 0xd76c
    d768:	1c d3       	bis	#1,	r12	;r3 As==01
    d76a:	0d d3       	bis	#0,	r13	;r3 As==00
    d76c:	08 58       	rla	r8		
    d76e:	09 69       	rlc	r9		
    d770:	3f 53       	add	#-1,	r15	;r3 As==11
    d772:	0a 9d       	cmp	r13,	r10	
    d774:	f4 2f       	jc	$-22     	;abs 0xd75e
    d776:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d77a:	0e 4c       	mov	r12,	r14	
    d77c:	0f 4d       	mov	r13,	r15	
    d77e:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d782:	0f f3       	and	#0,	r15	;r3 As==00
    d784:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    d788:	27 24       	jz	$+80     	;abs 0xd7d8
    d78a:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    d78e:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
    d792:	f1 40 03 00 	mov.b	#3,	24(r1)	;#0x0003, 0x0018(r1)
    d796:	18 00 
    d798:	0f 41       	mov	r1,	r15	
    d79a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    d79e:	b0 12 3c dc 	call	#0xdc3c	
    d7a2:	31 50 22 00 	add	#34,	r1	;#0x0022
    d7a6:	34 41       	pop	r4		
    d7a8:	35 41       	pop	r5		
    d7aa:	36 41       	pop	r6		
    d7ac:	37 41       	pop	r7		
    d7ae:	38 41       	pop	r8		
    d7b0:	39 41       	pop	r9		
    d7b2:	3a 41       	pop	r10		
    d7b4:	3b 41       	pop	r11		
    d7b6:	30 41       	ret			
    d7b8:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d7ba:	33 24       	jz	$+104    	;abs 0xd822
    d7bc:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d7c0:	09 00 
    d7c2:	1e 24       	jz	$+62     	;abs 0xd800
    d7c4:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    d7c8:	0f 48       	mov	r8,	r15	
    d7ca:	e9 3f       	jmp	$-44     	;abs 0xd79e
    d7cc:	4e 43       	clr.b	r14		
    d7ce:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d7d2:	0a 93       	tst	r10		
    d7d4:	bb 37       	jge	$-136    	;abs 0xd74c
    d7d6:	a7 3f       	jmp	$-176    	;abs 0xd726
    d7d8:	0f 93       	tst	r15		
    d7da:	d7 23       	jnz	$-80     	;abs 0xd78a
    d7dc:	0e 4c       	mov	r12,	r14	
    d7de:	0f 4d       	mov	r13,	r15	
    d7e0:	3e f0 80 00 	and	#128,	r14	;#0x0080
    d7e4:	0f f3       	and	#0,	r15	;r3 As==00
    d7e6:	0e 93       	tst	r14		
    d7e8:	d0 23       	jnz	$-94     	;abs 0xd78a
    d7ea:	0f 93       	tst	r15		
    d7ec:	ce 23       	jnz	$-98     	;abs 0xd78a
    d7ee:	08 93       	tst	r8		
    d7f0:	13 24       	jz	$+40     	;abs 0xd818
    d7f2:	3c 50 40 00 	add	#64,	r12	;#0x0040
    d7f6:	0d 63       	adc	r13		
    d7f8:	3c f0 80 ff 	and	#-128,	r12	;#0xff80
    d7fc:	3d f3       	and	#-1,	r13	;r3 As==11
    d7fe:	c5 3f       	jmp	$-116    	;abs 0xd78a
    d800:	4d 43       	clr.b	r13		
    d802:	e0 3f       	jmp	$-62     	;abs 0xd7c4
    d804:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d808:	09 00 
    d80a:	04 24       	jz	$+10     	;abs 0xd814
    d80c:	c1 4d 11 00 	mov.b	r13,	17(r1)	;0x0011(r1)
    d810:	0f 46       	mov	r6,	r15	
    d812:	c5 3f       	jmp	$-116    	;abs 0xd79e
    d814:	4d 43       	clr.b	r13		
    d816:	fa 3f       	jmp	$-10     	;abs 0xd80c
    d818:	09 93       	tst	r9		
    d81a:	eb 23       	jnz	$-40     	;abs 0xd7f2
    d81c:	b6 3f       	jmp	$-146    	;abs 0xd78a
    d81e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d820:	f1 23       	jnz	$-28     	;abs 0xd804
    d822:	3f 40 04 db 	mov	#-9468,	r15	;#0xdb04
    d826:	bb 3f       	jmp	$-136    	;abs 0xd79e

0000d828 <__divsf3>:
    d828:	0b 12       	push	r11		
    d82a:	0a 12       	push	r10		
    d82c:	09 12       	push	r9		
    d82e:	08 12       	push	r8		
    d830:	07 12       	push	r7		
    d832:	06 12       	push	r6		
    d834:	05 12       	push	r5		
    d836:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    d83a:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d83e:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d842:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d846:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d84a:	05 41       	mov	r1,	r5	
    d84c:	35 52       	add	#8,	r5	;r2 As==11
    d84e:	0e 45       	mov	r5,	r14	
    d850:	0f 41       	mov	r1,	r15	
    d852:	b0 12 12 de 	call	#0xde12	
    d856:	09 41       	mov	r1,	r9	
    d858:	39 50 10 00 	add	#16,	r9	;#0x0010
    d85c:	0e 49       	mov	r9,	r14	
    d85e:	0f 41       	mov	r1,	r15	
    d860:	2f 52       	add	#4,	r15	;r2 As==10
    d862:	b0 12 12 de 	call	#0xde12	
    d866:	5d 41 08 00 	mov.b	8(r1),	r13	;0x0008(r1)
    d86a:	5b 43       	mov.b	#1,	r11	;r3 As==01
    d86c:	4b 9d       	cmp.b	r13,	r11	
    d86e:	64 2c       	jc	$+202    	;abs 0xd938
    d870:	5c 41 10 00 	mov.b	16(r1),	r12	;0x0010(r1)
    d874:	4b 9c       	cmp.b	r12,	r11	
    d876:	86 2c       	jc	$+270    	;abs 0xd984
    d878:	d1 e1 11 00 	xor.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d87c:	09 00 
    d87e:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    d880:	5d 24       	jz	$+188    	;abs 0xd93c
    d882:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    d884:	5b 24       	jz	$+184    	;abs 0xd93c
    d886:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d888:	75 24       	jz	$+236    	;abs 0xd974
    d88a:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d88c:	53 24       	jz	$+168    	;abs 0xd934
    d88e:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    d892:	1f 81 12 00 	sub	18(r1),	r15	;0x0012(r1)
    d896:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d89a:	1d 41 0c 00 	mov	12(r1),	r13	;0x000c(r1)
    d89e:	1e 41 0e 00 	mov	14(r1),	r14	;0x000e(r1)
    d8a2:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    d8a6:	18 41 16 00 	mov	22(r1),	r8	;0x0016(r1)
    d8aa:	0e 98       	cmp	r8,	r14	
    d8ac:	3e 2c       	jc	$+126    	;abs 0xd92a
    d8ae:	0d 5d       	rla	r13		
    d8b0:	0e 6e       	rlc	r14		
    d8b2:	3f 53       	add	#-1,	r15	;r3 As==11
    d8b4:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d8b8:	36 40 1f 00 	mov	#31,	r6	;#0x001f
    d8bc:	0b 43       	clr	r11		
    d8be:	3c 40 00 40 	mov	#16384,	r12	;#0x4000
    d8c2:	09 43       	clr	r9		
    d8c4:	0a 43       	clr	r10		
    d8c6:	0b 3c       	jmp	$+24     	;abs 0xd8de
    d8c8:	09 db       	bis	r11,	r9	
    d8ca:	0a dc       	bis	r12,	r10	
    d8cc:	0d 87       	sub	r7,	r13	
    d8ce:	0e 78       	subc	r8,	r14	
    d8d0:	12 c3       	clrc			
    d8d2:	0c 10       	rrc	r12		
    d8d4:	0b 10       	rrc	r11		
    d8d6:	0d 5d       	rla	r13		
    d8d8:	0e 6e       	rlc	r14		
    d8da:	36 53       	add	#-1,	r6	;r3 As==11
    d8dc:	0d 24       	jz	$+28     	;abs 0xd8f8
    d8de:	0e 98       	cmp	r8,	r14	
    d8e0:	f7 2b       	jnc	$-16     	;abs 0xd8d0
    d8e2:	0e 98       	cmp	r8,	r14	
    d8e4:	f1 23       	jnz	$-28     	;abs 0xd8c8
    d8e6:	0d 97       	cmp	r7,	r13	
    d8e8:	ef 2f       	jc	$-32     	;abs 0xd8c8
    d8ea:	12 c3       	clrc			
    d8ec:	0c 10       	rrc	r12		
    d8ee:	0b 10       	rrc	r11		
    d8f0:	0d 5d       	rla	r13		
    d8f2:	0e 6e       	rlc	r14		
    d8f4:	36 53       	add	#-1,	r6	;r3 As==11
    d8f6:	f3 23       	jnz	$-24     	;abs 0xd8de
    d8f8:	0b 49       	mov	r9,	r11	
    d8fa:	0c 4a       	mov	r10,	r12	
    d8fc:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    d900:	0c f3       	and	#0,	r12	;r3 As==00
    d902:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    d906:	1f 24       	jz	$+64     	;abs 0xd946
    d908:	81 49 0c 00 	mov	r9,	12(r1)	;0x000c(r1)
    d90c:	81 4a 0e 00 	mov	r10,	14(r1)	;0x000e(r1)
    d910:	0f 45       	mov	r5,	r15	
    d912:	b0 12 3c dc 	call	#0xdc3c	
    d916:	31 50 18 00 	add	#24,	r1	;#0x0018
    d91a:	35 41       	pop	r5		
    d91c:	36 41       	pop	r6		
    d91e:	37 41       	pop	r7		
    d920:	38 41       	pop	r8		
    d922:	39 41       	pop	r9		
    d924:	3a 41       	pop	r10		
    d926:	3b 41       	pop	r11		
    d928:	30 41       	ret			
    d92a:	08 9e       	cmp	r14,	r8	
    d92c:	c5 2b       	jnc	$-116    	;abs 0xd8b8
    d92e:	0d 97       	cmp	r7,	r13	
    d930:	c3 2f       	jc	$-120    	;abs 0xd8b8
    d932:	bd 3f       	jmp	$-132    	;abs 0xd8ae
    d934:	e1 42 08 00 	mov.b	#4,	8(r1)	;r2 As==10, 0x0008(r1)
    d938:	0f 45       	mov	r5,	r15	
    d93a:	eb 3f       	jmp	$-40     	;abs 0xd912
    d93c:	4d 9c       	cmp.b	r12,	r13	
    d93e:	fc 23       	jnz	$-6      	;abs 0xd938
    d940:	3f 40 04 db 	mov	#-9468,	r15	;#0xdb04
    d944:	e6 3f       	jmp	$-50     	;abs 0xd912
    d946:	0c 93       	tst	r12		
    d948:	df 23       	jnz	$-64     	;abs 0xd908
    d94a:	0b 49       	mov	r9,	r11	
    d94c:	0c 4a       	mov	r10,	r12	
    d94e:	3b f0 80 00 	and	#128,	r11	;#0x0080
    d952:	0c f3       	and	#0,	r12	;r3 As==00
    d954:	0b 93       	tst	r11		
    d956:	d8 23       	jnz	$-78     	;abs 0xd908
    d958:	0c 93       	tst	r12		
    d95a:	d6 23       	jnz	$-82     	;abs 0xd908
    d95c:	0d 93       	tst	r13		
    d95e:	07 24       	jz	$+16     	;abs 0xd96e
    d960:	39 50 40 00 	add	#64,	r9	;#0x0040
    d964:	0a 63       	adc	r10		
    d966:	39 f0 80 ff 	and	#-128,	r9	;#0xff80
    d96a:	3a f3       	and	#-1,	r10	;r3 As==11
    d96c:	cd 3f       	jmp	$-100    	;abs 0xd908
    d96e:	0e 93       	tst	r14		
    d970:	f7 23       	jnz	$-16     	;abs 0xd960
    d972:	ca 3f       	jmp	$-106    	;abs 0xd908
    d974:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c(r1)
    d978:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e(r1)
    d97c:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a(r1)
    d980:	0f 45       	mov	r5,	r15	
    d982:	c7 3f       	jmp	$-112    	;abs 0xd912
    d984:	0f 49       	mov	r9,	r15	
    d986:	c5 3f       	jmp	$-116    	;abs 0xd912

0000d988 <__gesf2>:
    d988:	0b 12       	push	r11		
    d98a:	0a 12       	push	r10		
    d98c:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    d990:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d994:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d998:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d99c:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d9a0:	0b 41       	mov	r1,	r11	
    d9a2:	3b 52       	add	#8,	r11	;r2 As==11
    d9a4:	0e 4b       	mov	r11,	r14	
    d9a6:	0f 41       	mov	r1,	r15	
    d9a8:	b0 12 12 de 	call	#0xde12	
    d9ac:	0a 41       	mov	r1,	r10	
    d9ae:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d9b2:	0e 4a       	mov	r10,	r14	
    d9b4:	0f 41       	mov	r1,	r15	
    d9b6:	2f 52       	add	#4,	r15	;r2 As==10
    d9b8:	b0 12 12 de 	call	#0xde12	
    d9bc:	5d 43       	mov.b	#1,	r13	;r3 As==01
    d9be:	5d 91 08 00 	cmp.b	8(r1),	r13	;0x0008(r1)
    d9c2:	0c 2c       	jc	$+26     	;abs 0xd9dc
    d9c4:	5d 91 10 00 	cmp.b	16(r1),	r13	;0x0010(r1)
    d9c8:	09 2c       	jc	$+20     	;abs 0xd9dc
    d9ca:	0e 4a       	mov	r10,	r14	
    d9cc:	0f 4b       	mov	r11,	r15	
    d9ce:	b0 12 44 df 	call	#0xdf44	
    d9d2:	31 50 18 00 	add	#24,	r1	;#0x0018
    d9d6:	3a 41       	pop	r10		
    d9d8:	3b 41       	pop	r11		
    d9da:	30 41       	ret			
    d9dc:	3f 43       	mov	#-1,	r15	;r3 As==11
    d9de:	f9 3f       	jmp	$-12     	;abs 0xd9d2

0000d9e0 <__floatsisf>:
    d9e0:	0b 12       	push	r11		
    d9e2:	0a 12       	push	r10		
    d9e4:	31 82       	sub	#8,	r1	;r2 As==11
    d9e6:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    d9ea:	00 00 
    d9ec:	0d 4f       	mov	r15,	r13	
    d9ee:	0d 5d       	rla	r13		
    d9f0:	0d 43       	clr	r13		
    d9f2:	0d 6d       	rlc	r13		
    d9f4:	4c 4d       	mov.b	r13,	r12	
    d9f6:	c1 4d 01 00 	mov.b	r13,	1(r1)	;0x0001(r1)
    d9fa:	0e 93       	tst	r14		
    d9fc:	32 24       	jz	$+102    	;abs 0xda62
    d9fe:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    da02:	02 00 
    da04:	4c 93       	tst.b	r12		
    da06:	24 20       	jnz	$+74     	;abs 0xda50
    da08:	0a 4e       	mov	r14,	r10	
    da0a:	0b 4f       	mov	r15,	r11	
    da0c:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    da10:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    da14:	0e 4a       	mov	r10,	r14	
    da16:	0f 4b       	mov	r11,	r15	
    da18:	b0 12 e4 db 	call	#0xdbe4	
    da1c:	3f 53       	add	#-1,	r15	;r3 As==11
    da1e:	1f 93       	cmp	#1,	r15	;r3 As==01
    da20:	10 38       	jl	$+34     	;abs 0xda42
    da22:	0e 4f       	mov	r15,	r14	
    da24:	0e 93       	tst	r14		
    da26:	04 24       	jz	$+10     	;abs 0xda30
    da28:	0a 5a       	rla	r10		
    da2a:	0b 6b       	rlc	r11		
    da2c:	1e 83       	dec	r14		
    da2e:	fc 23       	jnz	$-6      	;abs 0xda28
    da30:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    da34:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    da38:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    da3c:	0e 8f       	sub	r15,	r14	
    da3e:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    da42:	0f 41       	mov	r1,	r15	
    da44:	b0 12 3c dc 	call	#0xdc3c	
    da48:	31 52       	add	#8,	r1	;r2 As==11
    da4a:	3a 41       	pop	r10		
    da4c:	3b 41       	pop	r11		
    da4e:	30 41       	ret			
    da50:	0e 93       	tst	r14		
    da52:	0c 24       	jz	$+26     	;abs 0xda6c
    da54:	0a 4e       	mov	r14,	r10	
    da56:	0b 4f       	mov	r15,	r11	
    da58:	3a e3       	inv	r10		
    da5a:	3b e3       	inv	r11		
    da5c:	1a 53       	inc	r10		
    da5e:	0b 63       	adc	r11		
    da60:	d5 3f       	jmp	$-84     	;abs 0xda0c
    da62:	0f 93       	tst	r15		
    da64:	cc 23       	jnz	$-102    	;abs 0xd9fe
    da66:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    da6a:	eb 3f       	jmp	$-40     	;abs 0xda42
    da6c:	3f 90 00 80 	cmp	#-32768,r15	;#0x8000
    da70:	f1 23       	jnz	$-28     	;abs 0xda54
    da72:	0e 43       	clr	r14		
    da74:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    da78:	e7 3f       	jmp	$-48     	;abs 0xda48

0000da7a <__fixsfsi>:
    da7a:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    da7e:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    da82:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    da86:	0e 41       	mov	r1,	r14	
    da88:	2e 52       	add	#4,	r14	;r2 As==10
    da8a:	0f 41       	mov	r1,	r15	
    da8c:	b0 12 12 de 	call	#0xde12	
    da90:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    da94:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    da96:	2b 24       	jz	$+88     	;abs 0xdaee
    da98:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    da9a:	29 28       	jnc	$+84     	;abs 0xdaee
    da9c:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    da9e:	08 24       	jz	$+18     	;abs 0xdab0
    daa0:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    daa4:	0d 93       	tst	r13		
    daa6:	23 38       	jl	$+72     	;abs 0xdaee
    daa8:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    daac:	0c 9d       	cmp	r13,	r12	
    daae:	09 34       	jge	$+20     	;abs 0xdac2
    dab0:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    dab4:	21 20       	jnz	$+68     	;abs 0xdaf8
    dab6:	3e 43       	mov	#-1,	r14	;r3 As==11
    dab8:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    dabc:	31 50 0c 00 	add	#12,	r1	;#0x000c
    dac0:	30 41       	ret			
    dac2:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    dac6:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    daca:	0c 8d       	sub	r13,	r12	
    dacc:	0c 93       	tst	r12		
    dace:	05 24       	jz	$+12     	;abs 0xdada
    dad0:	12 c3       	clrc			
    dad2:	0f 10       	rrc	r15		
    dad4:	0e 10       	rrc	r14		
    dad6:	1c 83       	dec	r12		
    dad8:	fb 23       	jnz	$-8      	;abs 0xdad0
    dada:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    dade:	ee 27       	jz	$-34     	;abs 0xdabc
    dae0:	3e e3       	inv	r14		
    dae2:	3f e3       	inv	r15		
    dae4:	1e 53       	inc	r14		
    dae6:	0f 63       	adc	r15		
    dae8:	31 50 0c 00 	add	#12,	r1	;#0x000c
    daec:	30 41       	ret			
    daee:	0e 43       	clr	r14		
    daf0:	0f 43       	clr	r15		
    daf2:	31 50 0c 00 	add	#12,	r1	;#0x000c
    daf6:	30 41       	ret			
    daf8:	0e 43       	clr	r14		
    dafa:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    dafe:	31 50 0c 00 	add	#12,	r1	;#0x000c
    db02:	30 41       	ret			

0000db04 <__thenan_sf>:
	...

0000db0c <__floatunsisf>:
    db0c:	0b 12       	push	r11		
    db0e:	0a 12       	push	r10		
    db10:	09 12       	push	r9		
    db12:	08 12       	push	r8		
    db14:	07 12       	push	r7		
    db16:	31 82       	sub	#8,	r1	;r2 As==11
    db18:	0a 4e       	mov	r14,	r10	
    db1a:	0b 4f       	mov	r15,	r11	
    db1c:	c1 43 01 00 	mov.b	#0,	1(r1)	;r3 As==00, 0x0001(r1)
    db20:	0e 93       	tst	r14		
    db22:	2d 24       	jz	$+92     	;abs 0xdb7e
    db24:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    db28:	00 00 
    db2a:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    db2e:	02 00 
    db30:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    db34:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    db38:	0e 4a       	mov	r10,	r14	
    db3a:	0f 4b       	mov	r11,	r15	
    db3c:	b0 12 e4 db 	call	#0xdbe4	
    db40:	0d 4f       	mov	r15,	r13	
    db42:	3d 53       	add	#-1,	r13	;r3 As==11
    db44:	21 30       	jn	$+68     	;abs 0xdb88
    db46:	0d 93       	tst	r13		
    db48:	10 24       	jz	$+34     	;abs 0xdb6a
    db4a:	0f 4d       	mov	r13,	r15	
    db4c:	0f 93       	tst	r15		
    db4e:	04 24       	jz	$+10     	;abs 0xdb58
    db50:	0a 5a       	rla	r10		
    db52:	0b 6b       	rlc	r11		
    db54:	1f 83       	dec	r15		
    db56:	fc 23       	jnz	$-6      	;abs 0xdb50
    db58:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    db5c:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    db60:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    db64:	0f 8d       	sub	r13,	r15	
    db66:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    db6a:	0f 41       	mov	r1,	r15	
    db6c:	b0 12 3c dc 	call	#0xdc3c	
    db70:	31 52       	add	#8,	r1	;r2 As==11
    db72:	37 41       	pop	r7		
    db74:	38 41       	pop	r8		
    db76:	39 41       	pop	r9		
    db78:	3a 41       	pop	r10		
    db7a:	3b 41       	pop	r11		
    db7c:	30 41       	ret			
    db7e:	0b 93       	tst	r11		
    db80:	d1 23       	jnz	$-92     	;abs 0xdb24
    db82:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    db86:	f1 3f       	jmp	$-28     	;abs 0xdb6a
    db88:	0c 4d       	mov	r13,	r12	
    db8a:	3c e3       	inv	r12		
    db8c:	1c 53       	inc	r12		
    db8e:	18 43       	mov	#1,	r8	;r3 As==01
    db90:	09 43       	clr	r9		
    db92:	07 4c       	mov	r12,	r7	
    db94:	0e 48       	mov	r8,	r14	
    db96:	0f 49       	mov	r9,	r15	
    db98:	07 93       	tst	r7		
    db9a:	04 24       	jz	$+10     	;abs 0xdba4
    db9c:	0e 5e       	rla	r14		
    db9e:	0f 6f       	rlc	r15		
    dba0:	17 83       	dec	r7		
    dba2:	fc 23       	jnz	$-6      	;abs 0xdb9c
    dba4:	3e 53       	add	#-1,	r14	;r3 As==11
    dba6:	3f 63       	addc	#-1,	r15	;r3 As==11
    dba8:	0e fa       	and	r10,	r14	
    dbaa:	0f fb       	and	r11,	r15	
    dbac:	0e 93       	tst	r14		
    dbae:	15 24       	jz	$+44     	;abs 0xdbda
    dbb0:	0c 93       	tst	r12		
    dbb2:	05 24       	jz	$+12     	;abs 0xdbbe
    dbb4:	12 c3       	clrc			
    dbb6:	0b 10       	rrc	r11		
    dbb8:	0a 10       	rrc	r10		
    dbba:	1c 83       	dec	r12		
    dbbc:	fb 23       	jnz	$-8      	;abs 0xdbb4
    dbbe:	0e 48       	mov	r8,	r14	
    dbc0:	0f 49       	mov	r9,	r15	
    dbc2:	0e da       	bis	r10,	r14	
    dbc4:	0f db       	bis	r11,	r15	
    dbc6:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    dbca:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    dbce:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    dbd2:	0f 8d       	sub	r13,	r15	
    dbd4:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    dbd8:	c8 3f       	jmp	$-110    	;abs 0xdb6a
    dbda:	0f 93       	tst	r15		
    dbdc:	e9 23       	jnz	$-44     	;abs 0xdbb0
    dbde:	08 43       	clr	r8		
    dbe0:	09 43       	clr	r9		
    dbe2:	e6 3f       	jmp	$-50     	;abs 0xdbb0

0000dbe4 <__clzsi2>:
    dbe4:	0b 12       	push	r11		
    dbe6:	0f 93       	tst	r15		
    dbe8:	16 20       	jnz	$+46     	;abs 0xdc16
    dbea:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    dbee:	21 28       	jnc	$+68     	;abs 0xdc32
    dbf0:	3b 40 18 00 	mov	#24,	r11	;#0x0018
    dbf4:	0c 43       	clr	r12		
    dbf6:	3d 42       	mov	#8,	r13	;r2 As==11
    dbf8:	0d 93       	tst	r13		
    dbfa:	05 24       	jz	$+12     	;abs 0xdc06
    dbfc:	12 c3       	clrc			
    dbfe:	0f 10       	rrc	r15		
    dc00:	0e 10       	rrc	r14		
    dc02:	1d 83       	dec	r13		
    dc04:	fb 23       	jnz	$-8      	;abs 0xdbfc
    dc06:	0f 4e       	mov	r14,	r15	
    dc08:	3f 50 e6 df 	add	#-8218,	r15	;#0xdfe6
    dc0c:	6d 4f       	mov.b	@r15,	r13	
    dc0e:	0f 4b       	mov	r11,	r15	
    dc10:	0f 8d       	sub	r13,	r15	
    dc12:	3b 41       	pop	r11		
    dc14:	30 41       	ret			
    dc16:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    dc1a:	05 28       	jnc	$+12     	;abs 0xdc26
    dc1c:	3b 42       	mov	#8,	r11	;r2 As==11
    dc1e:	0c 43       	clr	r12		
    dc20:	3d 40 18 00 	mov	#24,	r13	;#0x0018
    dc24:	e9 3f       	jmp	$-44     	;abs 0xdbf8
    dc26:	3b 40 10 00 	mov	#16,	r11	;#0x0010
    dc2a:	0c 43       	clr	r12		
    dc2c:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    dc30:	e3 3f       	jmp	$-56     	;abs 0xdbf8
    dc32:	3b 40 20 00 	mov	#32,	r11	;#0x0020
    dc36:	0c 43       	clr	r12		
    dc38:	0d 43       	clr	r13		
    dc3a:	de 3f       	jmp	$-66     	;abs 0xdbf8

0000dc3c <__pack_f>:
    dc3c:	0b 12       	push	r11		
    dc3e:	0a 12       	push	r10		
    dc40:	09 12       	push	r9		
    dc42:	08 12       	push	r8		
    dc44:	07 12       	push	r7		
    dc46:	06 12       	push	r6		
    dc48:	1d 4f 04 00 	mov	4(r15),	r13	;0x0004(r15)
    dc4c:	1e 4f 06 00 	mov	6(r15),	r14	;0x0006(r15)
    dc50:	5a 4f 01 00 	mov.b	1(r15),	r10	;0x0001(r15)
    dc54:	6c 4f       	mov.b	@r15,	r12	
    dc56:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    dc58:	bc 28       	jnc	$+378    	;abs 0xddd2
    dc5a:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    dc5c:	b6 24       	jz	$+366    	;abs 0xddca
    dc5e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    dc60:	32 24       	jz	$+102    	;abs 0xdcc6
    dc62:	0d 93       	tst	r13		
    dc64:	2e 24       	jz	$+94     	;abs 0xdcc2
    dc66:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    dc6a:	3f 90 82 ff 	cmp	#-126,	r15	;#0xff82
    dc6e:	61 38       	jl	$+196    	;abs 0xdd32
    dc70:	3f 90 80 00 	cmp	#128,	r15	;#0x0080
    dc74:	aa 34       	jge	$+342    	;abs 0xddca
    dc76:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    dc7a:	0b 4d       	mov	r13,	r11	
    dc7c:	0c 4e       	mov	r14,	r12	
    dc7e:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    dc82:	0c f3       	and	#0,	r12	;r3 As==00
    dc84:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    dc88:	47 24       	jz	$+144    	;abs 0xdd18
    dc8a:	3d 50 3f 00 	add	#63,	r13	;#0x003f
    dc8e:	0e 63       	adc	r14		
    dc90:	0e 93       	tst	r14		
    dc92:	04 34       	jge	$+10     	;abs 0xdc9c
    dc94:	12 c3       	clrc			
    dc96:	0e 10       	rrc	r14		
    dc98:	0d 10       	rrc	r13		
    dc9a:	1f 53       	inc	r15		
    dc9c:	12 c3       	clrc			
    dc9e:	0e 10       	rrc	r14		
    dca0:	0d 10       	rrc	r13		
    dca2:	0e 11       	rra	r14		
    dca4:	0d 10       	rrc	r13		
    dca6:	0e 11       	rra	r14		
    dca8:	0d 10       	rrc	r13		
    dcaa:	0e 11       	rra	r14		
    dcac:	0d 10       	rrc	r13		
    dcae:	0e 11       	rra	r14		
    dcb0:	0d 10       	rrc	r13		
    dcb2:	0e 11       	rra	r14		
    dcb4:	0d 10       	rrc	r13		
    dcb6:	0e 11       	rra	r14		
    dcb8:	0d 10       	rrc	r13		
    dcba:	3d f3       	and	#-1,	r13	;r3 As==11
    dcbc:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    dcc0:	05 3c       	jmp	$+12     	;abs 0xdccc
    dcc2:	0e 93       	tst	r14		
    dcc4:	d0 23       	jnz	$-94     	;abs 0xdc66
    dcc6:	4f 43       	clr.b	r15		
    dcc8:	0d 43       	clr	r13		
    dcca:	0e 43       	clr	r14		
    dccc:	0b 43       	clr	r11		
    dcce:	0c 43       	clr	r12		
    dcd0:	0b 4d       	mov	r13,	r11	
    dcd2:	0d 4e       	mov	r14,	r13	
    dcd4:	3d f0 7f 00 	and	#127,	r13	;#0x007f
    dcd8:	0e 4c       	mov	r12,	r14	
    dcda:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    dcde:	0e dd       	bis	r13,	r14	
    dce0:	4f 4f       	mov.b	r15,	r15	
    dce2:	0f 5f       	rla	r15		
    dce4:	0f 5f       	rla	r15		
    dce6:	0f 5f       	rla	r15		
    dce8:	0f 5f       	rla	r15		
    dcea:	0f 5f       	rla	r15		
    dcec:	0f 5f       	rla	r15		
    dcee:	0f 5f       	rla	r15		
    dcf0:	3e f0 7f 80 	and	#-32641,r14	;#0x807f
    dcf4:	0e df       	bis	r15,	r14	
    dcf6:	0f 4a       	mov	r10,	r15	
    dcf8:	0f 11       	rra	r15		
    dcfa:	0f 43       	clr	r15		
    dcfc:	0f 10       	rrc	r15		
    dcfe:	3e f0 ff 7f 	and	#32767,	r14	;#0x7fff
    dd02:	0c 4e       	mov	r14,	r12	
    dd04:	0c df       	bis	r15,	r12	
    dd06:	0e 4b       	mov	r11,	r14	
    dd08:	0f 4c       	mov	r12,	r15	
    dd0a:	36 41       	pop	r6		
    dd0c:	37 41       	pop	r7		
    dd0e:	38 41       	pop	r8		
    dd10:	39 41       	pop	r9		
    dd12:	3a 41       	pop	r10		
    dd14:	3b 41       	pop	r11		
    dd16:	30 41       	ret			
    dd18:	0c 93       	tst	r12		
    dd1a:	b7 23       	jnz	$-144    	;abs 0xdc8a
    dd1c:	0b 4d       	mov	r13,	r11	
    dd1e:	0c 4e       	mov	r14,	r12	
    dd20:	3b f0 80 00 	and	#128,	r11	;#0x0080
    dd24:	0c f3       	and	#0,	r12	;r3 As==00
    dd26:	0b 93       	tst	r11		
    dd28:	4d 24       	jz	$+156    	;abs 0xddc4
    dd2a:	3d 50 40 00 	add	#64,	r13	;#0x0040
    dd2e:	0e 63       	adc	r14		
    dd30:	af 3f       	jmp	$-160    	;abs 0xdc90
    dd32:	3c 40 82 ff 	mov	#-126,	r12	;#0xff82
    dd36:	0c 8f       	sub	r15,	r12	
    dd38:	0f 4c       	mov	r12,	r15	
    dd3a:	3c 90 1a 00 	cmp	#26,	r12	;#0x001a
    dd3e:	51 34       	jge	$+164    	;abs 0xdde2
    dd40:	06 4d       	mov	r13,	r6	
    dd42:	07 4e       	mov	r14,	r7	
    dd44:	0c 93       	tst	r12		
    dd46:	05 24       	jz	$+12     	;abs 0xdd52
    dd48:	12 c3       	clrc			
    dd4a:	07 10       	rrc	r7		
    dd4c:	06 10       	rrc	r6		
    dd4e:	1c 83       	dec	r12		
    dd50:	fb 23       	jnz	$-8      	;abs 0xdd48
    dd52:	18 43       	mov	#1,	r8	;r3 As==01
    dd54:	09 43       	clr	r9		
    dd56:	0b 48       	mov	r8,	r11	
    dd58:	0c 49       	mov	r9,	r12	
    dd5a:	0f 93       	tst	r15		
    dd5c:	04 24       	jz	$+10     	;abs 0xdd66
    dd5e:	0b 5b       	rla	r11		
    dd60:	0c 6c       	rlc	r12		
    dd62:	1f 83       	dec	r15		
    dd64:	fc 23       	jnz	$-6      	;abs 0xdd5e
    dd66:	3b 53       	add	#-1,	r11	;r3 As==11
    dd68:	3c 63       	addc	#-1,	r12	;r3 As==11
    dd6a:	0b fd       	and	r13,	r11	
    dd6c:	0c fe       	and	r14,	r12	
    dd6e:	0b 93       	tst	r11		
    dd70:	48 24       	jz	$+146    	;abs 0xde02
    dd72:	0b 46       	mov	r6,	r11	
    dd74:	0c 47       	mov	r7,	r12	
    dd76:	0b d8       	bis	r8,	r11	
    dd78:	0c d9       	bis	r9,	r12	
    dd7a:	0e 4b       	mov	r11,	r14	
    dd7c:	0f 4c       	mov	r12,	r15	
    dd7e:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    dd82:	0f f3       	and	#0,	r15	;r3 As==00
    dd84:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    dd88:	2f 24       	jz	$+96     	;abs 0xdde8
    dd8a:	3b 50 3f 00 	add	#63,	r11	;#0x003f
    dd8e:	0c 63       	adc	r12		
    dd90:	0d 4b       	mov	r11,	r13	
    dd92:	0e 4c       	mov	r12,	r14	
    dd94:	12 c3       	clrc			
    dd96:	0e 10       	rrc	r14		
    dd98:	0d 10       	rrc	r13		
    dd9a:	0e 11       	rra	r14		
    dd9c:	0d 10       	rrc	r13		
    dd9e:	0e 11       	rra	r14		
    dda0:	0d 10       	rrc	r13		
    dda2:	0e 11       	rra	r14		
    dda4:	0d 10       	rrc	r13		
    dda6:	0e 11       	rra	r14		
    dda8:	0d 10       	rrc	r13		
    ddaa:	0e 11       	rra	r14		
    ddac:	0d 10       	rrc	r13		
    ddae:	0e 11       	rra	r14		
    ddb0:	0d 10       	rrc	r13		
    ddb2:	3d f3       	and	#-1,	r13	;r3 As==11
    ddb4:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    ddb8:	5f 43       	mov.b	#1,	r15	;r3 As==01
    ddba:	3c 90 00 40 	cmp	#16384,	r12	;#0x4000
    ddbe:	86 2f       	jc	$-242    	;abs 0xdccc
    ddc0:	4f 43       	clr.b	r15		
    ddc2:	84 3f       	jmp	$-246    	;abs 0xdccc
    ddc4:	0c 93       	tst	r12		
    ddc6:	b1 23       	jnz	$-156    	;abs 0xdd2a
    ddc8:	63 3f       	jmp	$-312    	;abs 0xdc90
    ddca:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    ddcc:	0d 43       	clr	r13		
    ddce:	0e 43       	clr	r14		
    ddd0:	7d 3f       	jmp	$-260    	;abs 0xdccc
    ddd2:	0d d3       	bis	#0,	r13	;r3 As==00
    ddd4:	3e d0 10 00 	bis	#16,	r14	;#0x0010
    ddd8:	3d f3       	and	#-1,	r13	;r3 As==11
    ddda:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    ddde:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    dde0:	75 3f       	jmp	$-276    	;abs 0xdccc
    dde2:	0b 43       	clr	r11		
    dde4:	0c 43       	clr	r12		
    dde6:	d1 3f       	jmp	$-92     	;abs 0xdd8a
    dde8:	0f 93       	tst	r15		
    ddea:	cf 23       	jnz	$-96     	;abs 0xdd8a
    ddec:	0e 4b       	mov	r11,	r14	
    ddee:	0f 4c       	mov	r12,	r15	
    ddf0:	3e f0 80 00 	and	#128,	r14	;#0x0080
    ddf4:	0f f3       	and	#0,	r15	;r3 As==00
    ddf6:	0e 93       	tst	r14		
    ddf8:	09 24       	jz	$+20     	;abs 0xde0c
    ddfa:	3b 50 40 00 	add	#64,	r11	;#0x0040
    ddfe:	0c 63       	adc	r12		
    de00:	c7 3f       	jmp	$-112    	;abs 0xdd90
    de02:	0c 93       	tst	r12		
    de04:	b6 23       	jnz	$-146    	;abs 0xdd72
    de06:	08 43       	clr	r8		
    de08:	09 43       	clr	r9		
    de0a:	b3 3f       	jmp	$-152    	;abs 0xdd72
    de0c:	0f 93       	tst	r15		
    de0e:	f5 23       	jnz	$-20     	;abs 0xddfa
    de10:	bf 3f       	jmp	$-128    	;abs 0xdd90

0000de12 <__unpack_f>:
    de12:	0b 12       	push	r11		
    de14:	0a 12       	push	r10		
    de16:	09 12       	push	r9		
    de18:	0b 4e       	mov	r14,	r11	
    de1a:	2d 4f       	mov	@r15,	r13	
    de1c:	5e 4f 02 00 	mov.b	2(r15),	r14	;0x0002(r15)
    de20:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    de24:	1c 4f 02 00 	mov	2(r15),	r12	;0x0002(r15)
    de28:	12 c3       	clrc			
    de2a:	0c 10       	rrc	r12		
    de2c:	0c 11       	rra	r12		
    de2e:	0c 11       	rra	r12		
    de30:	0c 11       	rra	r12		
    de32:	0c 11       	rra	r12		
    de34:	0c 11       	rra	r12		
    de36:	12 c3       	clrc			
    de38:	0c 10       	rrc	r12		
    de3a:	4c 4c       	mov.b	r12,	r12	
    de3c:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    de40:	4f 5f       	rla.b	r15		
    de42:	4f 43       	clr.b	r15		
    de44:	4f 6f       	rlc.b	r15		
    de46:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
    de4a:	0c 93       	tst	r12		
    de4c:	34 20       	jnz	$+106    	;abs 0xdeb6
    de4e:	0d 93       	tst	r13		
    de50:	57 24       	jz	$+176    	;abs 0xdf00
    de52:	bb 40 82 ff 	mov	#-126,	2(r11)	;#0xff82, 0x0002(r11)
    de56:	02 00 
    de58:	0d 5d       	rla	r13		
    de5a:	0e 6e       	rlc	r14		
    de5c:	0d 5d       	rla	r13		
    de5e:	0e 6e       	rlc	r14		
    de60:	0d 5d       	rla	r13		
    de62:	0e 6e       	rlc	r14		
    de64:	0d 5d       	rla	r13		
    de66:	0e 6e       	rlc	r14		
    de68:	0d 5d       	rla	r13		
    de6a:	0e 6e       	rlc	r14		
    de6c:	0d 5d       	rla	r13		
    de6e:	0e 6e       	rlc	r14		
    de70:	0d 5d       	rla	r13		
    de72:	0e 6e       	rlc	r14		
    de74:	0a 4d       	mov	r13,	r10	
    de76:	0f 4e       	mov	r14,	r15	
    de78:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    de7c:	00 00 
    de7e:	3d 43       	mov	#-1,	r13	;r3 As==11
    de80:	3e 40 ff 3f 	mov	#16383,	r14	;#0x3fff
    de84:	0e 9f       	cmp	r15,	r14	
    de86:	0f 28       	jnc	$+32     	;abs 0xdea6
    de88:	3c 40 81 ff 	mov	#-127,	r12	;#0xff81
    de8c:	09 4e       	mov	r14,	r9	
    de8e:	0d 4a       	mov	r10,	r13	
    de90:	0e 4f       	mov	r15,	r14	
    de92:	0d 5d       	rla	r13		
    de94:	0e 6e       	rlc	r14		
    de96:	0a 4d       	mov	r13,	r10	
    de98:	0f 4e       	mov	r14,	r15	
    de9a:	0e 4c       	mov	r12,	r14	
    de9c:	3c 53       	add	#-1,	r12	;r3 As==11
    de9e:	09 9f       	cmp	r15,	r9	
    dea0:	f6 2f       	jc	$-18     	;abs 0xde8e
    dea2:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    dea6:	8b 4a 04 00 	mov	r10,	4(r11)	;0x0004(r11)
    deaa:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    deae:	39 41       	pop	r9		
    deb0:	3a 41       	pop	r10		
    deb2:	3b 41       	pop	r11		
    deb4:	30 41       	ret			
    deb6:	3c 90 ff 00 	cmp	#255,	r12	;#0x00ff
    deba:	2a 24       	jz	$+86     	;abs 0xdf10
    debc:	3c 50 81 ff 	add	#-127,	r12	;#0xff81
    dec0:	8b 4c 02 00 	mov	r12,	2(r11)	;0x0002(r11)
    dec4:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    dec8:	00 00 
    deca:	0d 5d       	rla	r13		
    decc:	0e 6e       	rlc	r14		
    dece:	0d 5d       	rla	r13		
    ded0:	0e 6e       	rlc	r14		
    ded2:	0d 5d       	rla	r13		
    ded4:	0e 6e       	rlc	r14		
    ded6:	0d 5d       	rla	r13		
    ded8:	0e 6e       	rlc	r14		
    deda:	0d 5d       	rla	r13		
    dedc:	0e 6e       	rlc	r14		
    dede:	0d 5d       	rla	r13		
    dee0:	0e 6e       	rlc	r14		
    dee2:	0d 5d       	rla	r13		
    dee4:	0e 6e       	rlc	r14		
    dee6:	09 4d       	mov	r13,	r9	
    dee8:	0a 4e       	mov	r14,	r10	
    deea:	09 d3       	bis	#0,	r9	;r3 As==00
    deec:	3a d0 00 40 	bis	#16384,	r10	;#0x4000
    def0:	8b 49 04 00 	mov	r9,	4(r11)	;0x0004(r11)
    def4:	8b 4a 06 00 	mov	r10,	6(r11)	;0x0006(r11)
    def8:	39 41       	pop	r9		
    defa:	3a 41       	pop	r10		
    defc:	3b 41       	pop	r11		
    defe:	30 41       	ret			
    df00:	0e 93       	tst	r14		
    df02:	a7 23       	jnz	$-176    	;abs 0xde52
    df04:	eb 43 00 00 	mov.b	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    df08:	39 41       	pop	r9		
    df0a:	3a 41       	pop	r10		
    df0c:	3b 41       	pop	r11		
    df0e:	30 41       	ret			
    df10:	0d 93       	tst	r13		
    df12:	0e 24       	jz	$+30     	;abs 0xdf30
    df14:	09 4d       	mov	r13,	r9	
    df16:	0a 4e       	mov	r14,	r10	
    df18:	09 f3       	and	#0,	r9	;r3 As==00
    df1a:	3a f0 10 00 	and	#16,	r10	;#0x0010
    df1e:	09 93       	tst	r9		
    df20:	0c 24       	jz	$+26     	;abs 0xdf3a
    df22:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)
    df26:	8b 4d 04 00 	mov	r13,	4(r11)	;0x0004(r11)
    df2a:	8b 4e 06 00 	mov	r14,	6(r11)	;0x0006(r11)
    df2e:	e4 3f       	jmp	$-54     	;abs 0xdef8
    df30:	0e 93       	tst	r14		
    df32:	f0 23       	jnz	$-30     	;abs 0xdf14
    df34:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    df38:	df 3f       	jmp	$-64     	;abs 0xdef8
    df3a:	0a 93       	tst	r10		
    df3c:	f2 23       	jnz	$-26     	;abs 0xdf22
    df3e:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    df42:	f1 3f       	jmp	$-28     	;abs 0xdf26

0000df44 <__fpcmp_parts_f>:
    df44:	0b 12       	push	r11		
    df46:	6d 4f       	mov.b	@r15,	r13	
    df48:	5b 43       	mov.b	#1,	r11	;r3 As==01
    df4a:	4b 9d       	cmp.b	r13,	r11	
    df4c:	12 2c       	jc	$+38     	;abs 0xdf72
    df4e:	6c 4e       	mov.b	@r14,	r12	
    df50:	4b 9c       	cmp.b	r12,	r11	
    df52:	0f 2c       	jc	$+32     	;abs 0xdf72
    df54:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    df56:	3f 24       	jz	$+128    	;abs 0xdfd6
    df58:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    df5a:	11 24       	jz	$+36     	;abs 0xdf7e
    df5c:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    df5e:	0d 24       	jz	$+28     	;abs 0xdf7a
    df60:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    df62:	14 24       	jz	$+42     	;abs 0xdf8c
    df64:	5d 4f 01 00 	mov.b	1(r15),	r13	;0x0001(r15)
    df68:	5d 9e 01 00 	cmp.b	1(r14),	r13	;0x0001(r14)
    df6c:	14 24       	jz	$+42     	;abs 0xdf96
    df6e:	4d 93       	tst.b	r13		
    df70:	09 20       	jnz	$+20     	;abs 0xdf84
    df72:	1e 43       	mov	#1,	r14	;r3 As==01
    df74:	0f 4e       	mov	r14,	r15	
    df76:	3b 41       	pop	r11		
    df78:	30 41       	ret			
    df7a:	4c 9d       	cmp.b	r13,	r12	
    df7c:	26 24       	jz	$+78     	;abs 0xdfca
    df7e:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    df82:	f7 23       	jnz	$-16     	;abs 0xdf72
    df84:	3e 43       	mov	#-1,	r14	;r3 As==11
    df86:	0f 4e       	mov	r14,	r15	
    df88:	3b 41       	pop	r11		
    df8a:	30 41       	ret			
    df8c:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    df90:	f0 27       	jz	$-30     	;abs 0xdf72
    df92:	3e 43       	mov	#-1,	r14	;r3 As==11
    df94:	f8 3f       	jmp	$-14     	;abs 0xdf86
    df96:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    df9a:	1c 4e 02 00 	mov	2(r14),	r12	;0x0002(r14)
    df9e:	0c 9b       	cmp	r11,	r12	
    dfa0:	e6 3b       	jl	$-50     	;abs 0xdf6e
    dfa2:	0b 9c       	cmp	r12,	r11	
    dfa4:	14 38       	jl	$+42     	;abs 0xdfce
    dfa6:	1b 4f 04 00 	mov	4(r15),	r11	;0x0004(r15)
    dfaa:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    dfae:	1c 4e 04 00 	mov	4(r14),	r12	;0x0004(r14)
    dfb2:	1e 4e 06 00 	mov	6(r14),	r14	;0x0006(r14)
    dfb6:	0e 9f       	cmp	r15,	r14	
    dfb8:	da 2b       	jnc	$-74     	;abs 0xdf6e
    dfba:	0f 9e       	cmp	r14,	r15	
    dfbc:	08 28       	jnc	$+18     	;abs 0xdfce
    dfbe:	0c 9b       	cmp	r11,	r12	
    dfc0:	d6 2b       	jnc	$-82     	;abs 0xdf6e
    dfc2:	0e 9f       	cmp	r15,	r14	
    dfc4:	02 28       	jnc	$+6      	;abs 0xdfca
    dfc6:	0b 9c       	cmp	r12,	r11	
    dfc8:	02 28       	jnc	$+6      	;abs 0xdfce
    dfca:	0e 43       	clr	r14		
    dfcc:	d3 3f       	jmp	$-88     	;abs 0xdf74
    dfce:	4d 93       	tst.b	r13		
    dfd0:	d0 23       	jnz	$-94     	;abs 0xdf72
    dfd2:	3e 43       	mov	#-1,	r14	;r3 As==11
    dfd4:	d8 3f       	jmp	$-78     	;abs 0xdf86
    dfd6:	4c 9d       	cmp.b	r13,	r12	
    dfd8:	d9 23       	jnz	$-76     	;abs 0xdf8c
    dfda:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    dfde:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    dfe2:	0e 8f       	sub	r15,	r14	
    dfe4:	c7 3f       	jmp	$-112    	;abs 0xdf74

0000dfe6 <__clz_tab>:
    dfe6:	00 01 02 02 03 03 03 03 04 04 04 04 04 04 04 04     ................
    dff6:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    e006:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    e016:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    e026:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e036:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e046:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e056:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e066:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e076:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e086:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e096:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e0a6:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e0b6:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e0c6:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e0d6:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................

0000e0e6 <__udivmodhi4>:
    e0e6:	0e ee       	xor	r14,	r14	
    e0e8:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    e0ec:	05 3c       	jmp	$+12     	;abs 0xe0f8
    e0ee:	0d 10       	rrc	r13		
    e0f0:	0e 6e       	rlc	r14		
    e0f2:	0e 9a       	cmp	r10,	r14	
    e0f4:	01 28       	jnc	$+4      	;abs 0xe0f8
    e0f6:	0e 8a       	sub	r10,	r14	
    e0f8:	0c 6c       	rlc	r12		
    e0fa:	0d 6d       	rlc	r13		
    e0fc:	1b 83       	dec	r11		
    e0fe:	f7 23       	jnz	$-16     	;abs 0xe0ee
    e100:	30 41       	ret			

0000e102 <__divmodhi4>:
    e102:	0d 43       	clr	r13		
    e104:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    e108:	03 28       	jnc	$+8      	;abs 0xe110
    e10a:	3c e3       	inv	r12		
    e10c:	1c 53       	inc	r12		
    e10e:	2d d2       	bis	#4,	r13	;r2 As==10
    e110:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    e114:	03 28       	jnc	$+8      	;abs 0xe11c
    e116:	3a e3       	inv	r10		
    e118:	1a 53       	inc	r10		
    e11a:	3d d2       	bis	#8,	r13	;r2 As==11
    e11c:	b0 12 e6 e0 	call	#0xe0e6	
    e120:	0d 10       	rrc	r13		
    e122:	2d b2       	bit	#4,	r13	;r2 As==10
    e124:	04 28       	jnc	$+10     	;abs 0xe12e
    e126:	3e e3       	inv	r14		
    e128:	1e 53       	inc	r14		
    e12a:	3c e3       	inv	r12		
    e12c:	1c 53       	inc	r12		
    e12e:	3d b2       	bit	#8,	r13	;r2 As==11
    e130:	02 28       	jnc	$+6      	;abs 0xe136
    e132:	3c e3       	inv	r12		
    e134:	1c 53       	inc	r12		
    e136:	30 41       	ret			

0000e138 <__divmodsi4>:
    e138:	08 43       	clr	r8		
    e13a:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    e13e:	05 24       	jz	$+12     	;abs 0xe14a
    e140:	3d e3       	inv	r13		
    e142:	3c e3       	inv	r12		
    e144:	1c 53       	inc	r12		
    e146:	0d 63       	adc	r13		
    e148:	28 d2       	bis	#4,	r8	;r2 As==10
    e14a:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    e14e:	05 24       	jz	$+12     	;abs 0xe15a
    e150:	3b e3       	inv	r11		
    e152:	3a e3       	inv	r10		
    e154:	1a 53       	inc	r10		
    e156:	0b 63       	adc	r11		
    e158:	38 d2       	bis	#8,	r8	;r2 As==11
    e15a:	b0 12 82 e1 	call	#0xe182	
    e15e:	08 10       	rrc	r8		
    e160:	28 b2       	bit	#4,	r8	;r2 As==10
    e162:	08 24       	jz	$+18     	;abs 0xe174
    e164:	3e e3       	inv	r14		
    e166:	3f e3       	inv	r15		
    e168:	1e 53       	inc	r14		
    e16a:	0f 63       	adc	r15		
    e16c:	3c e3       	inv	r12		
    e16e:	3d e3       	inv	r13		
    e170:	1c 53       	inc	r12		
    e172:	0d 63       	adc	r13		
    e174:	38 b2       	bit	#8,	r8	;r2 As==11
    e176:	04 24       	jz	$+10     	;abs 0xe180
    e178:	3c e3       	inv	r12		
    e17a:	3d e3       	inv	r13		
    e17c:	1c 53       	inc	r12		
    e17e:	0d 63       	adc	r13		
    e180:	30 41       	ret			

0000e182 <__udivmodsi4>:
    e182:	0f ef       	xor	r15,	r15	
    e184:	0e ee       	xor	r14,	r14	
    e186:	39 40 21 00 	mov	#33,	r9	;#0x0021
    e18a:	0a 3c       	jmp	$+22     	;abs 0xe1a0
    e18c:	08 10       	rrc	r8		
    e18e:	0e 6e       	rlc	r14		
    e190:	0f 6f       	rlc	r15		
    e192:	0f 9b       	cmp	r11,	r15	
    e194:	05 28       	jnc	$+12     	;abs 0xe1a0
    e196:	02 20       	jnz	$+6      	;abs 0xe19c
    e198:	0e 9a       	cmp	r10,	r14	
    e19a:	02 28       	jnc	$+6      	;abs 0xe1a0
    e19c:	0e 8a       	sub	r10,	r14	
    e19e:	0f 7b       	subc	r11,	r15	
    e1a0:	0c 6c       	rlc	r12		
    e1a2:	0d 6d       	rlc	r13		
    e1a4:	08 68       	rlc	r8		
    e1a6:	19 83       	dec	r9		
    e1a8:	f1 23       	jnz	$-28     	;abs 0xe18c
    e1aa:	30 41       	ret			

0000e1ac <_unexpected_>:
    e1ac:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 b4 c4     ................
    fff0:	b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 b4 c4 00 c0     ................
