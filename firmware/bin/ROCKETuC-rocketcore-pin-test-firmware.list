
firmware.elf:     file format elf32-msp430


Disassembly of section .text:

0000c000 <__init_stack>:
    c000:	31 40 00 04 	mov	#1024,	r1	;#0x0400

0000c004 <__low_level_init>:
    c004:	15 42 20 01 	mov	&0x0120,r5	
    c008:	75 f3       	and.b	#-1,	r5	;r3 As==11
    c00a:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08

0000c00e <__do_copy_data>:
    c00e:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c012:	0f 93       	tst	r15		
    c014:	07 24       	jz	$+16     	;abs 0xc024
    c016:	82 45 20 01 	mov	r5,	&0x0120	
    c01a:	2f 83       	decd	r15		
    c01c:	9f 4f ca e2 	mov	-7478(r15),512(r15);0xe2ca(r15), 0x0200(r15)
    c020:	00 02 
    c022:	f9 23       	jnz	$-12     	;abs 0xc016

0000c024 <__do_clear_bss>:
    c024:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    c028:	0f 93       	tst	r15		
    c02a:	06 24       	jz	$+14     	;abs 0xc038
    c02c:	82 45 20 01 	mov	r5,	&0x0120	
    c030:	1f 83       	dec	r15		
    c032:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    c036:	fa 23       	jnz	$-10     	;abs 0xc02c

0000c038 <main>:
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
}

int main(void)
{
	clock_init();
    c038:	b0 12 ca c4 	call	#0xc4ca	

	pin_reserve(PIN_1_1);
    c03c:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    c040:	b0 12 e0 cc 	call	#0xcce0	
	pin_reserve(PIN_1_2);
    c044:	7f 40 12 00 	mov.b	#18,	r15	;#0x0012
    c048:	b0 12 e0 cc 	call	#0xcce0	

	serial_init(9600);
    c04c:	3f 40 80 25 	mov	#9600,	r15	;#0x2580
    c050:	b0 12 2e c9 	call	#0xc92e	

	cio_print("** ROCKETuC - librocketcore PIN test **\n\r");
    c054:	3f 40 08 c6 	mov	#-14840,r15	;#0xc608
    c058:	b0 12 22 ca 	call	#0xca22	

	dump_regs("initial");
    c05c:	3f 40 32 c6 	mov	#-14798,r15	;#0xc632
    c060:	b0 12 3a c5 	call	#0xc53a	

	// invalid port
	if(pin_setup(0x30, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPORT) {
    c064:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c068:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c06c:	b0 12 fc cd 	call	#0xcdfc	
    c070:	3f 90 fe ff 	cmp	#-2,	r15	;#0xfffe
    c074:	04 20       	jnz	$+10     	;abs 0xc07e
		cio_print("0x30 is an invalid port\n\r");
    c076:	3f 40 3a c6 	mov	#-14790,r15	;#0xc63a
    c07a:	b0 12 22 ca 	call	#0xca22	
	}
	
	// invalid pin
	if(pin_setup(0x2A, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c07e:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c082:	7f 40 2a 00 	mov.b	#42,	r15	;#0x002a
    c086:	b0 12 fc cd 	call	#0xcdfc	
    c08a:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c08e:	04 20       	jnz	$+10     	;abs 0xc098
		cio_print("0x2A is an invalid pin\n\r");
    c090:	3f 40 54 c6 	mov	#-14764,r15	;#0xc654
    c094:	b0 12 22 ca 	call	#0xca22	
	}

	// P1.1 + P1.2 are reserved for UART1
	if(pin_setup(PIN_1_1, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c098:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c09c:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011
    c0a0:	b0 12 fc cd 	call	#0xcdfc	
    c0a4:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c0a8:	04 20       	jnz	$+10     	;abs 0xc0b2
		cio_print("0x11 is an invalid (reserved) pin\n\r");
    c0aa:	3f 40 6d c6 	mov	#-14739,r15	;#0xc66d
    c0ae:	b0 12 22 ca 	call	#0xca22	
	}
	if(pin_setup(PIN_1_2, PIN_FUNCTION_OUTPUT) == PIN_STAT_ERR_INVALPIN) {
    c0b2:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c0b6:	7f 40 12 00 	mov.b	#18,	r15	;#0x0012
    c0ba:	b0 12 fc cd 	call	#0xcdfc	
    c0be:	3f 90 fd ff 	cmp	#-3,	r15	;#0xfffd
    c0c2:	04 20       	jnz	$+10     	;abs 0xc0cc
		cio_print("0x12 is an invalid (reserved) pin\n\r");
    c0c4:	3f 40 91 c6 	mov	#-14703,r15	;#0xc691
    c0c8:	b0 12 22 ca 	call	#0xca22	
	// thus target duty cycle = 2.5% + delta % * 2.5
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
}

int main(void)
{
    c0cc:	0b 43       	clr	r11		

	// pins on port 2 do not support ADC
	int p;

	for(p = 0; p < 8; p++) { 
		if(pin_setup(PIN_2_0 + p, PIN_FUNCTION_ANALOG_IN) == PIN_STAT_ERR_UNSUPFUNC) {
    c0ce:	6e 42       	mov.b	#4,	r14	;r2 As==10
    c0d0:	4f 4b       	mov.b	r11,	r15	
    c0d2:	7f 50 20 00 	add.b	#32,	r15	;#0x0020
    c0d6:	b0 12 fc cd 	call	#0xcdfc	
    c0da:	3f 93       	cmp	#-1,	r15	;r3 As==11
    c0dc:	06 20       	jnz	$+14     	;abs 0xc0ea
			cio_printf("0x2%i does not support ADC\n\r", p);
    c0de:	0b 12       	push	r11		
    c0e0:	30 12 b5 c6 	push	#-14667	;#0xc6b5
    c0e4:	b0 12 08 cb 	call	#0xcb08	
    c0e8:	21 52       	add	#4,	r1	;r2 As==10
	}

	// pins on port 2 do not support ADC
	int p;

	for(p = 0; p < 8; p++) { 
    c0ea:	1b 53       	inc	r11		
    c0ec:	3b 92       	cmp	#8,	r11	;r2 As==11
    c0ee:	ef 23       	jnz	$-32     	;abs 0xc0ce
			cio_printf("0x2%i does not support ADC\n\r", p);
		}
	}
	
	// set P1.0 + P1.6 + P2.5 to output (the build in LEDs)
	pin_setup(PIN_1_0, PIN_FUNCTION_OUTPUT);
    c0f0:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c0f4:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c0f8:	b0 12 fc cd 	call	#0xcdfc	
	pin_setup(PIN_1_6, PIN_FUNCTION_OUTPUT);
    c0fc:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c100:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c104:	b0 12 fc cd 	call	#0xcdfc	
	pin_setup(PIN_2_5, PIN_FUNCTION_OUTPUT);
    c108:	7e 40 03 00 	mov.b	#3,	r14	;#0x0003
    c10c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c110:	b0 12 fc cd 	call	#0xcdfc	

	
	dump_regs("p1.0+p1.6+p2.5 output");
    c114:	3f 40 d2 c6 	mov	#-14638,r15	;#0xc6d2
    c118:	b0 12 3a c5 	call	#0xc53a	

	// set P1.0 + P1.6 + P2.5 to HIGH
	pin_set(PIN_1_0);
    c11c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c120:	b0 12 1c d0 	call	#0xd01c	
	pin_set(PIN_1_6);
    c124:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c128:	b0 12 1c d0 	call	#0xd01c	
	pin_set(PIN_2_5);
    c12c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c130:	b0 12 1c d0 	call	#0xd01c	

	dump_regs("p1.0+p1.6+p2.5 set");
    c134:	3f 40 e8 c6 	mov	#-14616,r15	;#0xc6e8
    c138:	b0 12 3a c5 	call	#0xc53a	

	// read P1.0 + P1.6 + p2.5 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c13c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c140:	b0 12 bc d0 	call	#0xd0bc	
    c144:	0f 12       	push	r15		
    c146:	30 12 fb c6 	push	#-14597	;#0xc6fb
    c14a:	b0 12 08 cb 	call	#0xcb08	
    c14e:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c150:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c154:	b0 12 bc d0 	call	#0xd0bc	
    c158:	0f 12       	push	r15		
    c15a:	30 12 08 c7 	push	#-14584	;#0xc708
    c15e:	b0 12 08 cb 	call	#0xcb08	
    c162:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c164:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c168:	b0 12 bc d0 	call	#0xd0bc	
    c16c:	0f 12       	push	r15		
    c16e:	30 12 15 c7 	push	#-14571	;#0xc715
    c172:	b0 12 08 cb 	call	#0xcb08	
    c176:	21 52       	add	#4,	r1	;r2 As==10
	
	// clear P1.0 + p1.6 + p2.5 to LOW 
	pin_clear(PIN_1_0);
    c178:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c17c:	b0 12 cc cf 	call	#0xcfcc	
	pin_clear(PIN_1_6);
    c180:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c184:	b0 12 cc cf 	call	#0xcfcc	
	pin_clear(PIN_2_5);
    c188:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c18c:	b0 12 cc cf 	call	#0xcfcc	

	dump_regs("p1.0+p1.6+p2.5 clear");
    c190:	3f 40 22 c7 	mov	#-14558,r15	;#0xc722
    c194:	b0 12 3a c5 	call	#0xc53a	

	// read P1.0 + P1.6 + 2.5 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c198:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c19c:	b0 12 bc d0 	call	#0xd0bc	
    c1a0:	0f 12       	push	r15		
    c1a2:	30 12 fb c6 	push	#-14597	;#0xc6fb
    c1a6:	b0 12 08 cb 	call	#0xcb08	
    c1aa:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c1ac:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c1b0:	b0 12 bc d0 	call	#0xd0bc	
    c1b4:	0f 12       	push	r15		
    c1b6:	30 12 08 c7 	push	#-14584	;#0xc708
    c1ba:	b0 12 08 cb 	call	#0xcb08	
    c1be:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c1c0:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c1c4:	b0 12 bc d0 	call	#0xd0bc	
    c1c8:	0f 12       	push	r15		
    c1ca:	30 12 15 c7 	push	#-14571	;#0xc715
    c1ce:	b0 12 08 cb 	call	#0xcb08	
    c1d2:	21 52       	add	#4,	r1	;r2 As==10

	// toggle P1.0 + P1.6 + P2.5
	pin_toggle(PIN_1_0);
    c1d4:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c1d8:	b0 12 6c d0 	call	#0xd06c	
	pin_toggle(PIN_1_6);
    c1dc:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c1e0:	b0 12 6c d0 	call	#0xd06c	
	pin_toggle(PIN_2_5);
    c1e4:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c1e8:	b0 12 6c d0 	call	#0xd06c	

	dump_regs("p1.0+p1.6+p2.5 toggle");
    c1ec:	3f 40 37 c7 	mov	#-14537,r15	;#0xc737
    c1f0:	b0 12 3a c5 	call	#0xc53a	

	// read P1.0 + P1.6 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c1f4:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c1f8:	b0 12 bc d0 	call	#0xd0bc	
    c1fc:	0f 12       	push	r15		
    c1fe:	30 12 fb c6 	push	#-14597	;#0xc6fb
    c202:	b0 12 08 cb 	call	#0xcb08	
    c206:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c208:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c20c:	b0 12 bc d0 	call	#0xd0bc	
    c210:	0f 12       	push	r15		
    c212:	30 12 08 c7 	push	#-14584	;#0xc708
    c216:	b0 12 08 cb 	call	#0xcb08	
    c21a:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c21c:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c220:	b0 12 bc d0 	call	#0xd0bc	
    c224:	0f 12       	push	r15		
    c226:	30 12 15 c7 	push	#-14571	;#0xc715
    c22a:	b0 12 08 cb 	call	#0xcb08	
    c22e:	21 52       	add	#4,	r1	;r2 As==10

	// toggle P1.0 + P1.6 + P2.5
	pin_toggle(PIN_1_0);
    c230:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c234:	b0 12 6c d0 	call	#0xd06c	
	pin_toggle(PIN_1_6);
    c238:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c23c:	b0 12 6c d0 	call	#0xd06c	
	pin_toggle(PIN_2_5);
    c240:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c244:	b0 12 6c d0 	call	#0xd06c	

	dump_regs("p1.0+p1.6+p2.5 toggle");
    c248:	3f 40 37 c7 	mov	#-14537,r15	;#0xc737
    c24c:	b0 12 3a c5 	call	#0xc53a	

	// read P1.0 + P1.6 states
	cio_printf("P1.0 is %x\n\r", pin_digital_read(PIN_1_0));	
    c250:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c254:	b0 12 bc d0 	call	#0xd0bc	
    c258:	0f 12       	push	r15		
    c25a:	30 12 fb c6 	push	#-14597	;#0xc6fb
    c25e:	b0 12 08 cb 	call	#0xcb08	
    c262:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P1.6 is %x\n\r", pin_digital_read(PIN_1_6));	
    c264:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c268:	b0 12 bc d0 	call	#0xd0bc	
    c26c:	0f 12       	push	r15		
    c26e:	30 12 08 c7 	push	#-14584	;#0xc708
    c272:	b0 12 08 cb 	call	#0xcb08	
    c276:	21 52       	add	#4,	r1	;r2 As==10
	cio_printf("P2.5 is %x\n\r", pin_digital_read(PIN_2_5));	
    c278:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c27c:	b0 12 bc d0 	call	#0xd0bc	
    c280:	0f 12       	push	r15		
    c282:	30 12 15 c7 	push	#-14571	;#0xc715
    c286:	b0 12 08 cb 	call	#0xcb08	
    c28a:	21 52       	add	#4,	r1	;r2 As==10

	// set P1.3 to input float
	pin_setup(PIN_1_3, PIN_FUNCTION_INPUT_FLOAT);
    c28c:	4e 43       	clr.b	r14		
    c28e:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c292:	b0 12 fc cd 	call	#0xcdfc	

	dump_regs("p1.3 input float");
    c296:	3f 40 4d c7 	mov	#-14515,r15	;#0xc74d
    c29a:	b0 12 3a c5 	call	#0xc53a	

	cio_print("Press button on P1.3 to continue ...");
    c29e:	3f 40 5e c7 	mov	#-14498,r15	;#0xc75e
    c2a2:	b0 12 22 ca 	call	#0xca22	
    c2a6:	01 3c       	jmp	$+4      	;abs 0xc2aa

	while(pin_digital_read(PIN_1_3)) __asm__("nop");
    c2a8:	03 43       	nop			
    c2aa:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c2ae:	b0 12 bc d0 	call	#0xd0bc	
    c2b2:	0f 93       	tst	r15		
    c2b4:	f9 23       	jnz	$-12     	;abs 0xc2a8

	cio_print(" OK\n\r");
    c2b6:	3f 40 83 c7 	mov	#-14461,r15	;#0xc783
    c2ba:	b0 12 22 ca 	call	#0xca22	
	
	// set P2.3 to input pull-down 
	pin_setup(PIN_2_3, PIN_FUNCTION_INPUT_PULLDOWN);
    c2be:	6e 43       	mov.b	#2,	r14	;r3 As==10
    c2c0:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c2c4:	b0 12 fc cd 	call	#0xcdfc	

	dump_regs("p2.3 input pull-down");
    c2c8:	3f 40 89 c7 	mov	#-14455,r15	;#0xc789
    c2cc:	b0 12 3a c5 	call	#0xc53a	

	cio_print("Press button on P2.3 to continue ...");
    c2d0:	3f 40 9e c7 	mov	#-14434,r15	;#0xc79e
    c2d4:	b0 12 22 ca 	call	#0xca22	
    c2d8:	01 3c       	jmp	$+4      	;abs 0xc2dc

	while(!pin_digital_read(PIN_2_3)) __asm__("nop");
    c2da:	03 43       	nop			
    c2dc:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c2e0:	b0 12 bc d0 	call	#0xd0bc	
    c2e4:	0f 93       	tst	r15		
    c2e6:	f9 27       	jz	$-12     	;abs 0xc2da

	cio_print(" OK\n\r");
    c2e8:	3f 40 83 c7 	mov	#-14461,r15	;#0xc783
    c2ec:	b0 12 22 ca 	call	#0xca22	
	
	// set P2.4 to input pull-down 
	pin_setup(PIN_2_4, PIN_FUNCTION_INPUT_PULLUP);
    c2f0:	5e 43       	mov.b	#1,	r14	;r3 As==01
    c2f2:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c2f6:	b0 12 fc cd 	call	#0xcdfc	

	dump_regs("p2.4 input pull-up");
    c2fa:	3f 40 c3 c7 	mov	#-14397,r15	;#0xc7c3
    c2fe:	b0 12 3a c5 	call	#0xc53a	

	cio_print("Press button on P2.4 to continue ...");
    c302:	3f 40 d6 c7 	mov	#-14378,r15	;#0xc7d6
    c306:	b0 12 22 ca 	call	#0xca22	
    c30a:	01 3c       	jmp	$+4      	;abs 0xc30e

	while(pin_digital_read(PIN_2_4)) __asm__("nop");
    c30c:	03 43       	nop			
    c30e:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c312:	b0 12 bc d0 	call	#0xd0bc	
    c316:	09 4f       	mov	r15,	r9	
    c318:	0f 93       	tst	r15		
    c31a:	f8 23       	jnz	$-14     	;abs 0xc30c

	cio_print(" OK\n\r");
    c31c:	3f 40 83 c7 	mov	#-14461,r15	;#0xc783
    c320:	b0 12 22 ca 	call	#0xca22	

	int pl = 0;

	cio_print("Press button on P1.3 for pulselength read ...");
    c324:	3f 40 fb c7 	mov	#-14341,r15	;#0xc7fb
    c328:	b0 12 22 ca 	call	#0xca22	

	delay(50000);
    c32c:	3e 40 50 c3 	mov	#-15536,r14	;#0xc350
    c330:	0f 43       	clr	r15		
    c332:	b0 12 98 c5 	call	#0xc598	

	pl = pin_pulselength_read(PIN_1_3);
    c336:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c33a:	b0 12 7e d1 	call	#0xd17e	

	cio_printf(" OK, pl=%i\n\r", pl);
    c33e:	0f 12       	push	r15		
    c340:	30 12 29 c8 	push	#-14295	;#0xc829
    c344:	b0 12 08 cb 	call	#0xcb08	
    c348:	21 52       	add	#4,	r1	;r2 As==10

	cio_print("Press button on P2.3 for pulselength read ...");
    c34a:	3f 40 36 c8 	mov	#-14282,r15	;#0xc836
    c34e:	b0 12 22 ca 	call	#0xca22	

	delay(50000);
    c352:	3e 40 50 c3 	mov	#-15536,r14	;#0xc350
    c356:	0f 43       	clr	r15		
    c358:	b0 12 98 c5 	call	#0xc598	

	pl = pin_pulselength_read(PIN_2_3);
    c35c:	7f 40 23 00 	mov.b	#35,	r15	;#0x0023
    c360:	b0 12 7e d1 	call	#0xd17e	

	cio_printf(" OK, pl=%i\n\r", pl);
    c364:	0f 12       	push	r15		
    c366:	30 12 29 c8 	push	#-14295	;#0xc829
    c36a:	b0 12 08 cb 	call	#0xcb08	
    c36e:	21 52       	add	#4,	r1	;r2 As==10

	cio_print("Press button on P2.4 for pulselength read ...");
    c370:	3f 40 64 c8 	mov	#-14236,r15	;#0xc864
    c374:	b0 12 22 ca 	call	#0xca22	

	delay(50000);
    c378:	3e 40 50 c3 	mov	#-15536,r14	;#0xc350
    c37c:	0f 43       	clr	r15		
    c37e:	b0 12 98 c5 	call	#0xc598	

	pl = pin_pulselength_read(PIN_2_4);
    c382:	7f 40 24 00 	mov.b	#36,	r15	;#0x0024
    c386:	b0 12 7e d1 	call	#0xd17e	

	cio_printf(" OK, pl=%i\n\r", pl);
    c38a:	0f 12       	push	r15		
    c38c:	30 12 29 c8 	push	#-14295	;#0xc829
    c390:	b0 12 08 cb 	call	#0xcb08	
    c394:	21 52       	add	#4,	r1	;r2 As==10
	
	pin_set(PIN_1_0);
    c396:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c39a:	b0 12 1c d0 	call	#0xd01c	
	pin_clear(PIN_1_6);
    c39e:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c3a2:	b0 12 cc cf 	call	#0xcfcc	
	pin_clear(PIN_2_5);
    c3a6:	7f 40 25 00 	mov.b	#37,	r15	;#0x0025
    c3aa:	b0 12 cc cf 	call	#0xcfcc	

	// set P1.5 to analog in
	int i = 0;

	cio_printf("setup 1.5 for analog in: %i\n\r", pin_setup(PIN_1_5, PIN_FUNCTION_ANALOG_IN));
    c3ae:	6e 42       	mov.b	#4,	r14	;r2 As==10
    c3b0:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c3b4:	b0 12 fc cd 	call	#0xcdfc	
    c3b8:	0f 12       	push	r15		
    c3ba:	30 12 92 c8 	push	#-14190	;#0xc892
    c3be:	b0 12 08 cb 	call	#0xcb08	
    c3c2:	21 52       	add	#4,	r1	;r2 As==10
	dump_regs("p1.5 analog in");
    c3c4:	3f 40 b0 c8 	mov	#-14160,r15	;#0xc8b0
    c3c8:	b0 12 3a c5 	call	#0xc53a	
	
	int adcin1 = pin_analog_read(PIN_1_5); 
    c3cc:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c3d0:	b0 12 24 d1 	call	#0xd124	
    c3d4:	0a 4f       	mov	r15,	r10	
	int adcin2 = 0; 
	cio_printf("Analog read p1.5: %x\n\r", adcin1);
    c3d6:	0f 12       	push	r15		
    c3d8:	30 12 bf c8 	push	#-14145	;#0xc8bf
    c3dc:	b0 12 08 cb 	call	#0xcb08	
    c3e0:	21 52       	add	#4,	r1	;r2 As==10

	// set P2.2 to PWM with period of 20ms and duty cycle of 7.5%
	cio_printf("setup 2.2 for PWM: %i\n\r", pin_setup(PIN_2_2, PIN_FUNCTION_PWM));
    c3e2:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c3e6:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c3ea:	b0 12 fc cd 	call	#0xcdfc	
    c3ee:	0f 12       	push	r15		
    c3f0:	30 12 d6 c8 	push	#-14122	;#0xc8d6
    c3f4:	b0 12 08 cb 	call	#0xcb08	
    c3f8:	21 52       	add	#4,	r1	;r2 As==10
	dump_regs("p2.2 PWM");
    c3fa:	3f 40 ee c8 	mov	#-14098,r15	;#0xc8ee
    c3fe:	b0 12 3a c5 	call	#0xc53a	

	// only one of the two possible pins on port two are allowed to be set to PWM
	cio_printf("setup 2.1 for PWM: %i\n\r", pin_setup(PIN_2_1, PIN_FUNCTION_PWM));
    c402:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    c406:	7f 40 21 00 	mov.b	#33,	r15	;#0x0021
    c40a:	b0 12 fc cd 	call	#0xcdfc	
    c40e:	0f 12       	push	r15		
    c410:	30 12 f7 c8 	push	#-14089	;#0xc8f7
    c414:	b0 12 08 cb 	call	#0xcb08	
    c418:	21 52       	add	#4,	r1	;r2 As==10

	// period 
	pin_pwm_function(PIN_2_2, 20000);
    c41a:	3e 40 20 4e 	mov	#20000,	r14	;#0x4e20
    c41e:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c422:	b0 12 e8 d1 	call	#0xd1e8	
	pin_pwm_control(PIN_2_2, adc2dc(adcin1));
    c426:	0f 4a       	mov	r10,	r15	
    c428:	b0 12 be c5 	call	#0xc5be	
    c42c:	4e 4f       	mov.b	r15,	r14	
    c42e:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c432:	b0 12 54 d2 	call	#0xd254	
		}

		adcin2 = pin_analog_read(PIN_1_5); 

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
    c436:	38 40 05 00 	mov	#5,	r8	;#0x0005
	// period 
	pin_pwm_function(PIN_2_2, 20000);
	pin_pwm_control(PIN_2_2, adc2dc(adcin1));

	while (1) {
		delay();
    c43a:	b0 12 98 c5 	call	#0xc598	

		pin_toggle(PIN_1_0);
    c43e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    c442:	b0 12 6c d0 	call	#0xd06c	
		pin_toggle(PIN_1_6);
    c446:	7f 40 16 00 	mov.b	#22,	r15	;#0x0016
    c44a:	b0 12 6c d0 	call	#0xd06c	

		if(i++ % 2 == 0) {
    c44e:	0f 49       	mov	r9,	r15	
    c450:	1f f3       	and	#1,	r15	;r3 As==01
    c452:	19 53       	inc	r9		
    c454:	0f 93       	tst	r15		
    c456:	04 20       	jnz	$+10     	;abs 0xc460
			pin_toggle(PIN_2_5);
    c458:	7f 50 25 00 	add.b	#37,	r15	;#0x0025
    c45c:	b0 12 6c d0 	call	#0xd06c	
		}

		if(!pin_digital_read(PIN_1_3)) {
    c460:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c464:	b0 12 bc d0 	call	#0xd0bc	
    c468:	0f 93       	tst	r15		
    c46a:	0c 20       	jnz	$+26     	;abs 0xc484
			pin_toggle(PIN_1_6);
    c46c:	7f 50 16 00 	add.b	#22,	r15	;#0x0016
    c470:	b0 12 6c d0 	call	#0xd06c	
    c474:	01 3c       	jmp	$+4      	;abs 0xc478
			while(!pin_digital_read(PIN_1_3)) __asm__("nop");
    c476:	03 43       	nop			
    c478:	7f 40 13 00 	mov.b	#19,	r15	;#0x0013
    c47c:	b0 12 bc d0 	call	#0xd0bc	
    c480:	0f 93       	tst	r15		
    c482:	f9 27       	jz	$-12     	;abs 0xc476
		}

		adcin2 = pin_analog_read(PIN_1_5); 
    c484:	7f 40 15 00 	mov.b	#21,	r15	;#0x0015
    c488:	b0 12 24 d1 	call	#0xd124	
    c48c:	0b 4f       	mov	r15,	r11	

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
    c48e:	0f 8a       	sub	r10,	r15	
    c490:	08 9f       	cmp	r15,	r8	
    c492:	04 38       	jl	$+10     	;abs 0xc49c
    c494:	0f 4a       	mov	r10,	r15	
    c496:	0f 8b       	sub	r11,	r15	
    c498:	08 9f       	cmp	r15,	r8	
    c49a:	cf 37       	jge	$-96     	;abs 0xc43a
			adcin1 = adcin2;
			cio_printf("Analog read at p1.5: %x (%i)\n\r", adcin2, adcin2);
    c49c:	0b 12       	push	r11		
    c49e:	0b 12       	push	r11		
    c4a0:	30 12 0f c9 	push	#-14065	;#0xc90f
    c4a4:	b0 12 08 cb 	call	#0xcb08	
    c4a8:	31 50 06 00 	add	#6,	r1	;#0x0006
			pin_pwm_control(PIN_2_2, adc2dc(adcin1));
    c4ac:	0f 4b       	mov	r11,	r15	
    c4ae:	b0 12 be c5 	call	#0xc5be	
    c4b2:	4e 4f       	mov.b	r15,	r14	
    c4b4:	7f 40 22 00 	mov.b	#34,	r15	;#0x0022
    c4b8:	b0 12 54 d2 	call	#0xd254	

		adcin2 = pin_analog_read(PIN_1_5); 

		// only output ADC value if delta was more then 5
		if(adcin2 - adcin1 > 5 || adcin1 - adcin2 > 5) {
			adcin1 = adcin2;
    c4bc:	0a 4b       	mov	r11,	r10	
    c4be:	bd 3f       	jmp	$-132    	;abs 0xc43a

0000c4c0 <__stop_progExec__>:
    c4c0:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c4c4:	fd 3f       	jmp	$-4      	;abs 0xc4c0

0000c4c6 <__ctors_end>:
    c4c6:	30 40 c8 e2 	br	#0xe2c8	

0000c4ca <clock_init>:
#include "conio.h"
#include "pin.h"

void clock_init(void)
{
	WDTCTL = WDTPW + WDTHOLD;
    c4ca:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c4ce:	20 01 
    BCSCTL1 = CALBC1_1MHZ;
    c4d0:	d2 42 ff 10 	mov.b	&0x10ff,&0x0057	
    c4d4:	57 00 
    DCOCTL  = CALDCO_1MHZ;
    c4d6:	d2 42 fe 10 	mov.b	&0x10fe,&0x0056	
    c4da:	56 00 
}
    c4dc:	30 41       	ret			
    c4de:	52 45 47 44 	mov.b	17479(r5),r2	;0x4447(r5)
    c4e2:	55 4d 50 28 	mov.b	10320(r13),r5	;0x2850(r13)
    c4e6:	25 73       	subc	#2,	r5	;r3 As==10
    c4e8:	29 3a       	jl	$-940    	;abs 0xc13c
    c4ea:	20 50       	add	@r0,	r0	
    c4ec:	31 44       	mov	@r4+,	r1	
    c4ee:	49 52       	add.b	r2,	r9	
    c4f0:	3d 25       	jz	$+636    	;abs 0xc76c
    c4f2:	78 3b       	jl	$-270    	;abs 0xc3e4
    c4f4:	20 50       	add	@r0,	r0	
    c4f6:	32 44       	mov	@r4+,	r2	
    c4f8:	49 52       	add.b	r2,	r9	
    c4fa:	3d 25       	jz	$+636    	;abs 0xc776
    c4fc:	78 3b       	jl	$-270    	;abs 0xc3ee
    c4fe:	20 50       	add	@r0,	r0	
    c500:	31 4f       	mov	@r15+,	r1	
    c502:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c506:	78 3b       	jl	$-270    	;abs 0xc3f8
    c508:	20 50       	add	@r0,	r0	
    c50a:	32 4f       	mov	@r15+,	r2	
    c50c:	55 54 3d 25 	add.b	9533(r4),r5	;0x253d(r4)
    c510:	78 3b       	jl	$-270    	;abs 0xc402
    c512:	20 50       	add	@r0,	r0	
    c514:	31 52       	add	#8,	r1	;r2 As==11
    c516:	45 4e       	mov.b	r14,	r5	
    c518:	3d 25       	jz	$+636    	;abs 0xc794
    c51a:	78 3b       	jl	$-270    	;abs 0xc40c
    c51c:	20 50       	add	@r0,	r0	
    c51e:	32 52       	add	#8,	r2	;r2 As==11
    c520:	45 4e       	mov.b	r14,	r5	
    c522:	3d 25       	jz	$+636    	;abs 0xc79e
    c524:	78 3b       	jl	$-270    	;abs 0xc416
    c526:	20 50       	add	@r0,	r0	
    c528:	31 49       	mov	@r9+,	r1	
    c52a:	4e 3d       	jmp	$+670    	;abs 0xc7c8
    c52c:	25 78       	subc	@r8,	r5	
    c52e:	2c 20       	jnz	$+90     	;abs 0xc588
    c530:	50 32       	jn	$-862    	;abs 0xc1d2
    c532:	49 4e       	mov.b	r14,	r9	
    c534:	3d 25       	jz	$+636    	;abs 0xc7b0
    c536:	78 0a       	.word	0x0a78;	????	
    c538:	0d 00       	.word	0x000d;	????	

0000c53a <dump_regs>:

void dump_regs(const char *msg) 
{
    c53a:	0b 12       	push	r11		
    c53c:	0a 12       	push	r10		
    c53e:	09 12       	push	r9		
    c540:	08 12       	push	r8		

	cio_printf("REGDUMP(%s): P1DIR=%x; P2DIR=%x; P1OUT=%x; P2OUT=%x; P1REN=%x; P2REN=%x; P1IN=%x, P2IN=%x\n\r",
    c542:	58 42 28 00 	mov.b	&0x0028,r8	
    c546:	59 42 20 00 	mov.b	&0x0020,r9	
    c54a:	5a 42 2f 00 	mov.b	&0x002f,r10	
    c54e:	5b 42 27 00 	mov.b	&0x0027,r11	
    c552:	5c 42 29 00 	mov.b	&0x0029,r12	
    c556:	5d 42 21 00 	mov.b	&0x0021,r13	
    c55a:	5e 42 2a 00 	mov.b	&0x002a,r14	
    c55e:	48 48       	mov.b	r8,	r8	
    c560:	08 12       	push	r8		
    c562:	49 49       	mov.b	r9,	r9	
    c564:	09 12       	push	r9		
    c566:	4a 4a       	mov.b	r10,	r10	
    c568:	0a 12       	push	r10		
    c56a:	4b 4b       	mov.b	r11,	r11	
    c56c:	0b 12       	push	r11		
    c56e:	4c 4c       	mov.b	r12,	r12	
    c570:	0c 12       	push	r12		
    c572:	4d 4d       	mov.b	r13,	r13	
    c574:	0d 12       	push	r13		
    c576:	4e 4e       	mov.b	r14,	r14	
    c578:	0e 12       	push	r14		
    c57a:	5e 42 22 00 	mov.b	&0x0022,r14	
    c57e:	0e 12       	push	r14		
    c580:	0f 12       	push	r15		
    c582:	30 12 de c4 	push	#-15138	;#0xc4de
    c586:	b0 12 08 cb 	call	#0xcb08	
    c58a:	31 50 14 00 	add	#20,	r1	;#0x0014
				msg,
				P1DIR, P2DIR, P1OUT, P2OUT, P1REN, P2REN, P1IN, P2IN);
}
    c58e:	38 41       	pop	r8		
    c590:	39 41       	pop	r9		
    c592:	3a 41       	pop	r10		
    c594:	3b 41       	pop	r11		
    c596:	30 41       	ret			

0000c598 <delay>:

void delay() 
{
    c598:	21 82       	sub	#4,	r1	;r2 As==10
	volatile unsigned long i = 10000;
    c59a:	b1 40 10 27 	mov	#10000,	0(r1)	;#0x2710, 0x0000(r1)
    c59e:	00 00 
    c5a0:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)

	do (i--);
    c5a4:	b1 53 00 00 	add	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    c5a8:	b1 63 02 00 	addc	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
	while (i != 0);
    c5ac:	2e 41       	mov	@r1,	r14	
    c5ae:	1f 41 02 00 	mov	2(r1),	r15	;0x0002(r1)
    c5b2:	0e 93       	tst	r14		
    c5b4:	f7 23       	jnz	$-16     	;abs 0xc5a4
    c5b6:	0f 93       	tst	r15		
    c5b8:	f5 23       	jnz	$-20     	;abs 0xc5a4
}
    c5ba:	21 52       	add	#4,	r1	;r2 As==10
    c5bc:	30 41       	ret			

0000c5be <adc2dc>:

unsigned char adc2dc(int adc) 
{
    c5be:	0b 12       	push	r11		
    c5c0:	0a 12       	push	r10		
	// adjust PWM duty cycle based on ADC reading
	// max. ADC value is 1024. Servo needs to be btw. 2.5 and 12.5% duty cycle
	// thus, 1024 = 10%, 1024 / 10 = 1%, delta % = adcin1 / (1024 / 10) 
	// duty cycle 255 = 100%, 2.5 = 1%
	// thus target duty cycle = 2.5% + delta % * 2.5
	return (2.5 * 2.5) + (unsigned char)((adc / (1024 / 10)) * 2.5);
    c5c2:	0c 4f       	mov	r15,	r12	
    c5c4:	3a 40 66 00 	mov	#102,	r10	;#0x0066
    c5c8:	b0 12 1e e2 	call	#0xe21e	
    c5cc:	0e 4c       	mov	r12,	r14	
    c5ce:	0f 4c       	mov	r12,	r15	
    c5d0:	8f 10       	swpb	r15		
    c5d2:	8f 11       	sxt	r15		
    c5d4:	8f 10       	swpb	r15		
    c5d6:	8f 11       	sxt	r15		
    c5d8:	b0 12 fc da 	call	#0xdafc	
    c5dc:	0c 43       	clr	r12		
    c5de:	3d 40 20 40 	mov	#16416,	r13	;#0x4020
    c5e2:	b0 12 46 d7 	call	#0xd746	
    c5e6:	b0 12 b2 d3 	call	#0xd3b2	
    c5ea:	4e 4e       	mov.b	r14,	r14	
    c5ec:	0f 43       	clr	r15		
    c5ee:	b0 12 fc da 	call	#0xdafc	
    c5f2:	0c 43       	clr	r12		
    c5f4:	3d 40 c8 40 	mov	#16584,	r13	;#0x40c8
    c5f8:	b0 12 a2 d6 	call	#0xd6a2	
    c5fc:	b0 12 b2 d3 	call	#0xd3b2	
}
    c600:	4f 4e       	mov.b	r14,	r15	
    c602:	3a 41       	pop	r10		
    c604:	3b 41       	pop	r11		
    c606:	30 41       	ret			
    c608:	2a 2a       	jnc	$-938    	;abs 0xc25e
    c60a:	20 52       	add	#4,	r0	;r2 As==10
    c60c:	4f 43       	clr.b	r15		
    c60e:	4b 45       	mov.b	r5,	r11	
    c610:	54 75 43 20 	subc.b	8259(r5),r4	;0x2043(r5)
    c614:	2d 20       	jnz	$+92     	;abs 0xc670
    c616:	6c 69       	addc.b	@r9,	r12	
    c618:	62 72       	subc.b	#4,	r2	;r2 As==10
    c61a:	6f 63       	addc.b	#2,	r15	;r3 As==10
    c61c:	6b 65       	addc.b	@r5,	r11	
    c61e:	74 63       	addc.b	#-1,	r4	;r3 As==11
    c620:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c622:	65 20       	jnz	$+204    	;abs 0xc6ee
    c624:	50 49 4e 20 	br	8270(r9)	;0x204e(r9)
    c628:	74 65       	addc.b	@r5+,	r4	
    c62a:	73 74       	.word	0x7473;	????	Illegal as 2-op instr
    c62c:	20 2a       	jnc	$-958    	;abs 0xc26e
    c62e:	2a 0a       	.word	0x0a2a;	????	
    c630:	0d 00       	.word	0x000d;	????	
    c632:	69 6e       	addc.b	@r14,	r9	
    c634:	69 74       	subc.b	@r4,	r9	
    c636:	69 61       	addc.b	@r1,	r9	
    c638:	6c 00       	.word	0x006c;	????	
    c63a:	30 78       	subc	@r8+,	r0	
    c63c:	33 30       	jn	$+104    	;abs 0xc6a4
    c63e:	20 69       	addc	@r9,	r0	
    c640:	73 20       	jnz	$+232    	;abs 0xc728
    c642:	61 6e       	addc.b	@r14,	r1	
    c644:	20 69       	addc	@r9,	r0	
    c646:	6e 76       	subc.b	@r6,	r14	
    c648:	61 6c       	addc.b	@r12,	r1	
    c64a:	69 64       	addc.b	@r4,	r9	
    c64c:	20 70       	subc	@r0,	r0	
    c64e:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c650:	74 0a       	.word	0x0a74;	????	
    c652:	0d 00       	.word	0x000d;	????	
    c654:	30 78       	subc	@r8+,	r0	
    c656:	32 41       	pop	r2		
    c658:	20 69       	addc	@r9,	r0	
    c65a:	73 20       	jnz	$+232    	;abs 0xc742
    c65c:	61 6e       	addc.b	@r14,	r1	
    c65e:	20 69       	addc	@r9,	r0	
    c660:	6e 76       	subc.b	@r6,	r14	
    c662:	61 6c       	addc.b	@r12,	r1	
    c664:	69 64       	addc.b	@r4,	r9	
    c666:	20 70       	subc	@r0,	r0	
    c668:	69 6e       	addc.b	@r14,	r9	
    c66a:	0a 0d       	.word	0x0d0a;	????	
    c66c:	00 30       	jn	$+2      	;abs 0xc66e
    c66e:	78 31       	jn	$+754    	;abs 0xc960
    c670:	31 20       	jnz	$+100    	;abs 0xc6d4
    c672:	69 73       	subc.b	#2,	r9	;r3 As==10
    c674:	20 61       	addc	@r1,	r0	
    c676:	6e 20       	jnz	$+222    	;abs 0xc754
    c678:	69 6e       	addc.b	@r14,	r9	
    c67a:	76 61       	addc.b	@r1+,	r6	
    c67c:	6c 69       	addc.b	@r9,	r12	
    c67e:	64 20       	jnz	$+202    	;abs 0xc748
    c680:	28 72       	subc	#4,	r8	;r2 As==10
    c682:	65 73       	subc.b	#2,	r5	;r3 As==10
    c684:	65 72       	subc.b	#4,	r5	;r2 As==10
    c686:	76 65       	addc.b	@r5+,	r6	
    c688:	64 29       	jnc	$+714    	;abs 0xc952
    c68a:	20 70       	subc	@r0,	r0	
    c68c:	69 6e       	addc.b	@r14,	r9	
    c68e:	0a 0d       	.word	0x0d0a;	????	
    c690:	00 30       	jn	$+2      	;abs 0xc692
    c692:	78 31       	jn	$+754    	;abs 0xc984
    c694:	32 20       	jnz	$+102    	;abs 0xc6fa
    c696:	69 73       	subc.b	#2,	r9	;r3 As==10
    c698:	20 61       	addc	@r1,	r0	
    c69a:	6e 20       	jnz	$+222    	;abs 0xc778
    c69c:	69 6e       	addc.b	@r14,	r9	
    c69e:	76 61       	addc.b	@r1+,	r6	
    c6a0:	6c 69       	addc.b	@r9,	r12	
    c6a2:	64 20       	jnz	$+202    	;abs 0xc76c
    c6a4:	28 72       	subc	#4,	r8	;r2 As==10
    c6a6:	65 73       	subc.b	#2,	r5	;r3 As==10
    c6a8:	65 72       	subc.b	#4,	r5	;r2 As==10
    c6aa:	76 65       	addc.b	@r5+,	r6	
    c6ac:	64 29       	jnc	$+714    	;abs 0xc976
    c6ae:	20 70       	subc	@r0,	r0	
    c6b0:	69 6e       	addc.b	@r14,	r9	
    c6b2:	0a 0d       	.word	0x0d0a;	????	
    c6b4:	00 30       	jn	$+2      	;abs 0xc6b6
    c6b6:	78 32       	jn	$-782    	;abs 0xc3a8
    c6b8:	25 69       	addc	@r9,	r5	
    c6ba:	20 64       	addc	@r4,	r0	
    c6bc:	6f 65       	addc.b	@r5,	r15	
    c6be:	73 20       	jnz	$+232    	;abs 0xc7a6
    c6c0:	6e 6f       	addc.b	@r15,	r14	
    c6c2:	74 20       	jnz	$+234    	;abs 0xc7ac
    c6c4:	73 75       	.word	0x7573;	????	Illegal as 2-op instr
    c6c6:	70 70 6f 72 	subc.b	#29295,	r0	;#0x726f
    c6ca:	74 20       	jnz	$+234    	;abs 0xc7b4
    c6cc:	41 44       	mov.b	r4,	r1	
    c6ce:	43 0a       	.word	0x0a43;	????	
    c6d0:	0d 00       	.word	0x000d;	????	
    c6d2:	70 31       	jn	$+738    	;abs 0xc9b4
    c6d4:	2e 30       	jn	$+94     	;abs 0xc732
    c6d6:	2b 70       	subc	@r0,	r11	
    c6d8:	31 2e       	jc	$-924    	;abs 0xc33c
    c6da:	36 2b       	jnc	$-402    	;abs 0xc548
    c6dc:	70 32       	jn	$-798    	;abs 0xc3be
    c6de:	2e 35       	jge	$+606    	;abs 0xc93c
    c6e0:	20 6f       	addc	@r15,	r0	
    c6e2:	75 74       	subc.b	@r4+,	r5	
    c6e4:	70 75       	subc.b	@r5+,	r0	
    c6e6:	74 00       	.word	0x0074;	????	
    c6e8:	70 31       	jn	$+738    	;abs 0xc9ca
    c6ea:	2e 30       	jn	$+94     	;abs 0xc748
    c6ec:	2b 70       	subc	@r0,	r11	
    c6ee:	31 2e       	jc	$-924    	;abs 0xc352
    c6f0:	36 2b       	jnc	$-402    	;abs 0xc55e
    c6f2:	70 32       	jn	$-798    	;abs 0xc3d4
    c6f4:	2e 35       	jge	$+606    	;abs 0xc952
    c6f6:	20 73       	subc	#2,	r0	;r3 As==10
    c6f8:	65 74       	subc.b	@r4,	r5	
    c6fa:	00 50       	rla	r0		
    c6fc:	31 2e       	jc	$-924    	;abs 0xc360
    c6fe:	30 20       	jnz	$+98     	;abs 0xc760
    c700:	69 73       	subc.b	#2,	r9	;r3 As==10
    c702:	20 25       	jz	$+578    	;abs 0xc944
    c704:	78 0a       	.word	0x0a78;	????	
    c706:	0d 00       	.word	0x000d;	????	
    c708:	50 31       	jn	$+674    	;abs 0xc9aa
    c70a:	2e 36       	jge	$-930    	;abs 0xc368
    c70c:	20 69       	addc	@r9,	r0	
    c70e:	73 20       	jnz	$+232    	;abs 0xc7f6
    c710:	25 78       	subc	@r8,	r5	
    c712:	0a 0d       	.word	0x0d0a;	????	
    c714:	00 50       	rla	r0		
    c716:	32 2e       	jc	$-922    	;abs 0xc37c
    c718:	35 20       	jnz	$+108    	;abs 0xc784
    c71a:	69 73       	subc.b	#2,	r9	;r3 As==10
    c71c:	20 25       	jz	$+578    	;abs 0xc95e
    c71e:	78 0a       	.word	0x0a78;	????	
    c720:	0d 00       	.word	0x000d;	????	
    c722:	70 31       	jn	$+738    	;abs 0xca04
    c724:	2e 30       	jn	$+94     	;abs 0xc782
    c726:	2b 70       	subc	@r0,	r11	
    c728:	31 2e       	jc	$-924    	;abs 0xc38c
    c72a:	36 2b       	jnc	$-402    	;abs 0xc598
    c72c:	70 32       	jn	$-798    	;abs 0xc40e
    c72e:	2e 35       	jge	$+606    	;abs 0xc98c
    c730:	20 63       	addc	#2,	r0	;r3 As==10
    c732:	6c 65       	addc.b	@r5,	r12	
    c734:	61 72       	subc.b	#4,	r1	;r2 As==10
    c736:	00 70       	subc	r0,	r0	
    c738:	31 2e       	jc	$-924    	;abs 0xc39c
    c73a:	30 2b       	jnc	$-414    	;abs 0xc59c
    c73c:	70 31       	jn	$+738    	;abs 0xca1e
    c73e:	2e 36       	jge	$-930    	;abs 0xc39c
    c740:	2b 70       	subc	@r0,	r11	
    c742:	32 2e       	jc	$-922    	;abs 0xc3a8
    c744:	35 20       	jnz	$+108    	;abs 0xc7b0
    c746:	74 6f       	addc.b	@r15+,	r4	
    c748:	67 67       	addc.b	@r7,	r7	
    c74a:	6c 65       	addc.b	@r5,	r12	
    c74c:	00 70       	subc	r0,	r0	
    c74e:	31 2e       	jc	$-924    	;abs 0xc3b2
    c750:	33 20       	jnz	$+104    	;abs 0xc7b8
    c752:	69 6e       	addc.b	@r14,	r9	
    c754:	70 75       	subc.b	@r5+,	r0	
    c756:	74 20       	jnz	$+234    	;abs 0xc840
    c758:	66 6c       	addc.b	@r12,	r6	
    c75a:	6f 61       	addc.b	@r1,	r15	
    c75c:	74 00       	.word	0x0074;	????	
    c75e:	50 72 65 73 	subc.b	&0x7365,r0	
    c762:	73 20       	jnz	$+232    	;abs 0xc84a
    c764:	62 75       	subc.b	@r5,	r2	
    c766:	74 74       	subc.b	@r4+,	r4	
    c768:	6f 6e       	addc.b	@r14,	r15	
    c76a:	20 6f       	addc	@r15,	r0	
    c76c:	6e 20       	jnz	$+222    	;abs 0xc84a
    c76e:	50 31       	jn	$+674    	;abs 0xca10
    c770:	2e 33       	jn	$-418    	;abs 0xc5ce
    c772:	20 74       	subc	@r4,	r0	
    c774:	6f 20       	jnz	$+224    	;abs 0xc854
    c776:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c778:	6e 74       	subc.b	@r4,	r14	
    c77a:	69 6e       	addc.b	@r14,	r9	
    c77c:	75 65       	addc.b	@r5+,	r5	
    c77e:	20 2e       	jc	$-958    	;abs 0xc3c0
    c780:	2e 2e       	jc	$-930    	;abs 0xc3de
    c782:	00 20       	jnz	$+2      	;abs 0xc784
    c784:	4f 4b       	mov.b	r11,	r15	
    c786:	0a 0d       	.word	0x0d0a;	????	
    c788:	00 70       	subc	r0,	r0	
    c78a:	32 2e       	jc	$-922    	;abs 0xc3f0
    c78c:	33 20       	jnz	$+104    	;abs 0xc7f4
    c78e:	69 6e       	addc.b	@r14,	r9	
    c790:	70 75       	subc.b	@r5+,	r0	
    c792:	74 20       	jnz	$+234    	;abs 0xc87c
    c794:	70 75       	subc.b	@r5+,	r0	
    c796:	6c 6c       	addc.b	@r12,	r12	
    c798:	2d 64       	addc	@r4,	r13	
    c79a:	6f 77       	subc.b	@r7,	r15	
    c79c:	6e 00       	.word	0x006e;	????	
    c79e:	50 72 65 73 	subc.b	&0x7365,r0	
    c7a2:	73 20       	jnz	$+232    	;abs 0xc88a
    c7a4:	62 75       	subc.b	@r5,	r2	
    c7a6:	74 74       	subc.b	@r4+,	r4	
    c7a8:	6f 6e       	addc.b	@r14,	r15	
    c7aa:	20 6f       	addc	@r15,	r0	
    c7ac:	6e 20       	jnz	$+222    	;abs 0xc88a
    c7ae:	50 32       	jn	$-862    	;abs 0xc450
    c7b0:	2e 33       	jn	$-418    	;abs 0xc60e
    c7b2:	20 74       	subc	@r4,	r0	
    c7b4:	6f 20       	jnz	$+224    	;abs 0xc894
    c7b6:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c7b8:	6e 74       	subc.b	@r4,	r14	
    c7ba:	69 6e       	addc.b	@r14,	r9	
    c7bc:	75 65       	addc.b	@r5+,	r5	
    c7be:	20 2e       	jc	$-958    	;abs 0xc400
    c7c0:	2e 2e       	jc	$-930    	;abs 0xc41e
    c7c2:	00 70       	subc	r0,	r0	
    c7c4:	32 2e       	jc	$-922    	;abs 0xc42a
    c7c6:	34 20       	jnz	$+106    	;abs 0xc830
    c7c8:	69 6e       	addc.b	@r14,	r9	
    c7ca:	70 75       	subc.b	@r5+,	r0	
    c7cc:	74 20       	jnz	$+234    	;abs 0xc8b6
    c7ce:	70 75       	subc.b	@r5+,	r0	
    c7d0:	6c 6c       	addc.b	@r12,	r12	
    c7d2:	2d 75       	subc	@r5,	r13	
    c7d4:	70 00       	.word	0x0070;	????	
    c7d6:	50 72 65 73 	subc.b	&0x7365,r0	
    c7da:	73 20       	jnz	$+232    	;abs 0xc8c2
    c7dc:	62 75       	subc.b	@r5,	r2	
    c7de:	74 74       	subc.b	@r4+,	r4	
    c7e0:	6f 6e       	addc.b	@r14,	r15	
    c7e2:	20 6f       	addc	@r15,	r0	
    c7e4:	6e 20       	jnz	$+222    	;abs 0xc8c2
    c7e6:	50 32       	jn	$-862    	;abs 0xc488
    c7e8:	2e 34       	jge	$+94     	;abs 0xc846
    c7ea:	20 74       	subc	@r4,	r0	
    c7ec:	6f 20       	jnz	$+224    	;abs 0xc8cc
    c7ee:	63 6f       	.word	0x6f63;	????	Illegal as 2-op instr
    c7f0:	6e 74       	subc.b	@r4,	r14	
    c7f2:	69 6e       	addc.b	@r14,	r9	
    c7f4:	75 65       	addc.b	@r5+,	r5	
    c7f6:	20 2e       	jc	$-958    	;abs 0xc438
    c7f8:	2e 2e       	jc	$-930    	;abs 0xc456
    c7fa:	00 50       	rla	r0		
    c7fc:	72 65       	addc.b	@r5+,	r2	
    c7fe:	73 73       	.word	0x7373;	????	Illegal as 2-op instr
    c800:	20 62       	addc	#4,	r0	;r2 As==10
    c802:	75 74       	subc.b	@r4+,	r5	
    c804:	74 6f       	addc.b	@r15+,	r4	
    c806:	6e 20       	jnz	$+222    	;abs 0xc8e4
    c808:	6f 6e       	addc.b	@r14,	r15	
    c80a:	20 50       	add	@r0,	r0	
    c80c:	31 2e       	jc	$-924    	;abs 0xc470
    c80e:	33 20       	jnz	$+104    	;abs 0xc876
    c810:	66 6f       	addc.b	@r15,	r6	
    c812:	72 20       	jnz	$+230    	;abs 0xc8f8
    c814:	70 75       	subc.b	@r5+,	r0	
    c816:	6c 73       	subc.b	#2,	r12	;r3 As==10
    c818:	65 6c       	addc.b	@r12,	r5	
    c81a:	65 6e       	addc.b	@r14,	r5	
    c81c:	67 74       	subc.b	@r4,	r7	
    c81e:	68 20       	jnz	$+210    	;abs 0xc8f0
    c820:	72 65       	addc.b	@r5+,	r2	
    c822:	61 64       	addc.b	@r4,	r1	
    c824:	20 2e       	jc	$-958    	;abs 0xc466
    c826:	2e 2e       	jc	$-930    	;abs 0xc484
    c828:	00 20       	jnz	$+2      	;abs 0xc82a
    c82a:	4f 4b       	mov.b	r11,	r15	
    c82c:	2c 20       	jnz	$+90     	;abs 0xc886
    c82e:	70 6c       	addc.b	@r12+,	r0	
    c830:	3d 25       	jz	$+636    	;abs 0xcaac
    c832:	69 0a       	.word	0x0a69;	????	
    c834:	0d 00       	.word	0x000d;	????	
    c836:	50 72 65 73 	subc.b	&0x7365,r0	
    c83a:	73 20       	jnz	$+232    	;abs 0xc922
    c83c:	62 75       	subc.b	@r5,	r2	
    c83e:	74 74       	subc.b	@r4+,	r4	
    c840:	6f 6e       	addc.b	@r14,	r15	
    c842:	20 6f       	addc	@r15,	r0	
    c844:	6e 20       	jnz	$+222    	;abs 0xc922
    c846:	50 32       	jn	$-862    	;abs 0xc4e8
    c848:	2e 33       	jn	$-418    	;abs 0xc6a6
    c84a:	20 66       	addc	@r6,	r0	
    c84c:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c84e:	20 70       	subc	@r0,	r0	
    c850:	75 6c       	addc.b	@r12+,	r5	
    c852:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    c854:	6c 65       	addc.b	@r5,	r12	
    c856:	6e 67       	addc.b	@r7,	r14	
    c858:	74 68       	addc.b	@r8+,	r4	
    c85a:	20 72       	subc	#4,	r0	;r2 As==10
    c85c:	65 61       	addc.b	@r1,	r5	
    c85e:	64 20       	jnz	$+202    	;abs 0xc928
    c860:	2e 2e       	jc	$-930    	;abs 0xc4be
    c862:	2e 00       	.word	0x002e;	????	
    c864:	50 72 65 73 	subc.b	&0x7365,r0	
    c868:	73 20       	jnz	$+232    	;abs 0xc950
    c86a:	62 75       	subc.b	@r5,	r2	
    c86c:	74 74       	subc.b	@r4+,	r4	
    c86e:	6f 6e       	addc.b	@r14,	r15	
    c870:	20 6f       	addc	@r15,	r0	
    c872:	6e 20       	jnz	$+222    	;abs 0xc950
    c874:	50 32       	jn	$-862    	;abs 0xc516
    c876:	2e 34       	jge	$+94     	;abs 0xc8d4
    c878:	20 66       	addc	@r6,	r0	
    c87a:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c87c:	20 70       	subc	@r0,	r0	
    c87e:	75 6c       	addc.b	@r12+,	r5	
    c880:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    c882:	6c 65       	addc.b	@r5,	r12	
    c884:	6e 67       	addc.b	@r7,	r14	
    c886:	74 68       	addc.b	@r8+,	r4	
    c888:	20 72       	subc	#4,	r0	;r2 As==10
    c88a:	65 61       	addc.b	@r1,	r5	
    c88c:	64 20       	jnz	$+202    	;abs 0xc956
    c88e:	2e 2e       	jc	$-930    	;abs 0xc4ec
    c890:	2e 00       	.word	0x002e;	????	
    c892:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    c894:	74 75       	subc.b	@r5+,	r4	
    c896:	70 20       	jnz	$+226    	;abs 0xc978
    c898:	31 2e       	jc	$-924    	;abs 0xc4fc
    c89a:	35 20       	jnz	$+108    	;abs 0xc906
    c89c:	66 6f       	addc.b	@r15,	r6	
    c89e:	72 20       	jnz	$+230    	;abs 0xc984
    c8a0:	61 6e       	addc.b	@r14,	r1	
    c8a2:	61 6c       	addc.b	@r12,	r1	
    c8a4:	6f 67       	addc.b	@r7,	r15	
    c8a6:	20 69       	addc	@r9,	r0	
    c8a8:	6e 3a       	jl	$-802    	;abs 0xc586
    c8aa:	20 25       	jz	$+578    	;abs 0xcaec
    c8ac:	69 0a       	.word	0x0a69;	????	
    c8ae:	0d 00       	.word	0x000d;	????	
    c8b0:	70 31       	jn	$+738    	;abs 0xcb92
    c8b2:	2e 35       	jge	$+606    	;abs 0xcb10
    c8b4:	20 61       	addc	@r1,	r0	
    c8b6:	6e 61       	addc.b	@r1,	r14	
    c8b8:	6c 6f       	addc.b	@r15,	r12	
    c8ba:	67 20       	jnz	$+208    	;abs 0xc98a
    c8bc:	69 6e       	addc.b	@r14,	r9	
    c8be:	00 41       	br	r1		
    c8c0:	6e 61       	addc.b	@r1,	r14	
    c8c2:	6c 6f       	addc.b	@r15,	r12	
    c8c4:	67 20       	jnz	$+208    	;abs 0xc994
    c8c6:	72 65       	addc.b	@r5+,	r2	
    c8c8:	61 64       	addc.b	@r4,	r1	
    c8ca:	20 70       	subc	@r0,	r0	
    c8cc:	31 2e       	jc	$-924    	;abs 0xc530
    c8ce:	35 3a       	jl	$-916    	;abs 0xc53a
    c8d0:	20 25       	jz	$+578    	;abs 0xcb12
    c8d2:	78 0a       	.word	0x0a78;	????	
    c8d4:	0d 00       	.word	0x000d;	????	
    c8d6:	73 65       	.word	0x6573;	????	Illegal as 2-op instr
    c8d8:	74 75       	subc.b	@r5+,	r4	
    c8da:	70 20       	jnz	$+226    	;abs 0xc9bc
    c8dc:	32 2e       	jc	$-922    	;abs 0xc542
    c8de:	32 20       	jnz	$+102    	;abs 0xc944
    c8e0:	66 6f       	addc.b	@r15,	r6	
    c8e2:	72 20       	jnz	$+230    	;abs 0xc9c8
    c8e4:	50 57 4d 3a 	add.b	14925(r7),r0	;0x3a4d(r7)
    c8e8:	20 25       	jz	$+578    	;abs 0xcb2a
    c8ea:	69 0a       	.word	0x0a69;	????	
    c8ec:	0d 00       	.word	0x000d;	????	
    c8ee:	70 32       	jn	$-798    	;abs 0xc5d0
    c8f0:	2e 32       	jn	$-930    	;abs 0xc54e
    c8f2:	20 50       	add	@r0,	r0	
    c8f4:	57 4d 00 73 	mov.b	29440(r13),r7	;0x7300(r13)
    c8f8:	65 74       	subc.b	@r4,	r5	
    c8fa:	75 70 20 32 	subc.b	#12832,	r5	;#0x3220
    c8fe:	2e 31       	jn	$+606    	;abs 0xcb5c
    c900:	20 66       	addc	@r6,	r0	
    c902:	6f 72       	subc.b	#4,	r15	;r2 As==10
    c904:	20 50       	add	@r0,	r0	
    c906:	57 4d 3a 20 	mov.b	8250(r13),r7	;0x203a(r13)
    c90a:	25 69       	addc	@r9,	r5	
    c90c:	0a 0d       	.word	0x0d0a;	????	
    c90e:	00 41       	br	r1		
    c910:	6e 61       	addc.b	@r1,	r14	
    c912:	6c 6f       	addc.b	@r15,	r12	
    c914:	67 20       	jnz	$+208    	;abs 0xc9e4
    c916:	72 65       	addc.b	@r5+,	r2	
    c918:	61 64       	addc.b	@r4,	r1	
    c91a:	20 61       	addc	@r1,	r0	
    c91c:	74 20       	jnz	$+234    	;abs 0xca06
    c91e:	70 31       	jn	$+738    	;abs 0xcc00
    c920:	2e 35       	jge	$+606    	;abs 0xcb7e
    c922:	3a 20       	jnz	$+118    	;abs 0xc998
    c924:	25 78       	subc	@r8,	r5	
    c926:	20 28       	jnc	$+66     	;abs 0xc968
    c928:	25 69       	addc	@r9,	r5	
    c92a:	29 0a       	.word	0x0a29;	????	
    c92c:	0d 00       	.word	0x000d;	????	

0000c92e <serial_init>:
 * TXD pin
 */
#define UART_TXD   		BIT2	

void serial_init(unsigned int baudrate)
{
    c92e:	0b 12       	push	r11		
    c930:	0a 12       	push	r10		
    c932:	09 12       	push	r9		
    c934:	08 12       	push	r8		
    c936:	07 12       	push	r7		
	P1SEL    |= UART_RXD + UART_TXD;                       
    c938:	f2 d0 06 00 	bis.b	#6,	&0x0026	;#0x0006
    c93c:	26 00 
  	P1SEL2   |= UART_RXD + UART_TXD;                       
    c93e:	f2 d0 06 00 	bis.b	#6,	&0x0041	;#0x0006
    c942:	41 00 
  	UCA0CTL1 |= UCSSEL_2;                   // SMCLK
    c944:	f2 d0 80 ff 	bis.b	#-128,	&0x0061	;#0xff80
    c948:	61 00 

	unsigned char br = (unsigned char)(1000000 / (long)baudrate);
    c94a:	07 43       	clr	r7		
    c94c:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    c950:	3d 40 0f 00 	mov	#15,	r13	;#0x000f
    c954:	0a 4f       	mov	r15,	r10	
    c956:	0b 47       	mov	r7,	r11	
    c958:	b0 12 54 e2 	call	#0xe254	

  	UCA0BR0  = br;                          // 1MHz / baudrate 
    c95c:	c2 4c 62 00 	mov.b	r12,	&0x0062	
  	UCA0BR1  = 0;                           // 
    c960:	c2 47 63 00 	mov.b	r7,	&0x0063	
  	UCA0MCTL = UCBRS0;                      // Modulation UCBRSx = 1
    c964:	e2 43 64 00 	mov.b	#2,	&0x0064	;r3 As==10
  	UCA0CTL1 &= ~UCSWRST;                   // Initialize USCI state machine
    c968:	f2 f0 fe ff 	and.b	#-2,	&0x0061	;#0xfffe
    c96c:	61 00 
}
    c96e:	37 41       	pop	r7		
    c970:	38 41       	pop	r8		
    c972:	39 41       	pop	r9		
    c974:	3a 41       	pop	r10		
    c976:	3b 41       	pop	r11		
    c978:	30 41       	ret			

0000c97a <serial_send>:

void serial_send(unsigned char data)
{
  	UCA0TXBUF = data;                 		
    c97a:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c97e:	30 41       	ret			

0000c980 <serial_send_blocking>:

void serial_send_blocking(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG));              // USCI_A0 TX buffer ready?
    c980:	5e 42 03 00 	mov.b	&0x0003,r14	
    c984:	2e f3       	and	#2,	r14	;r3 As==10
    c986:	fc 27       	jz	$-6      	;abs 0xc980
  	UCA0TXBUF = data;                  
    c988:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c98c:	30 41       	ret			

0000c98e <serial_recv>:

unsigned char serial_recv()
{
	return UCA0RXBUF;
}
    c98e:	5f 42 66 00 	mov.b	&0x0066,r15	
    c992:	30 41       	ret			

0000c994 <serial_recv_blocking>:

unsigned char serial_recv_blocking()
{
    while (!(IFG2&UCA0RXIFG));         		// USCI_A0 RX buffer ready?
    c994:	5f 42 03 00 	mov.b	&0x0003,r15	
    c998:	1f f3       	and	#1,	r15	;r3 As==01
    c99a:	fc 27       	jz	$-6      	;abs 0xc994
	return UCA0RXBUF;
}
    c99c:	5f 42 66 00 	mov.b	&0x0066,r15	
    c9a0:	30 41       	ret			

0000c9a2 <_xtoa>:
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
}

static void _xtoa(unsigned long x, const unsigned long *dp)
{
    c9a2:	0b 12       	push	r11		
    c9a4:	0a 12       	push	r10		
    c9a6:	09 12       	push	r9		
    c9a8:	08 12       	push	r8		
    c9aa:	07 12       	push	r7		
    c9ac:	0a 4e       	mov	r14,	r10	
    c9ae:	0b 4f       	mov	r15,	r11	
    c9b0:	07 4d       	mov	r13,	r7	
     char c;
     unsigned long d;

     if(x) {
    c9b2:	0e 93       	tst	r14		
    c9b4:	04 20       	jnz	$+10     	;abs 0xc9be
    c9b6:	0b 93       	tst	r11		
    c9b8:	02 20       	jnz	$+6      	;abs 0xc9be
    c9ba:	22 3c       	jmp	$+70     	;abs 0xca00
          while(x < *dp) ++dp;
    c9bc:	27 52       	add	#4,	r7	;r2 As==10
    c9be:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c9c2:	fc 2b       	jnc	$-6      	;abs 0xc9bc
    c9c4:	1b 97 02 00 	cmp	2(r7),	r11	;0x0002(r7)
    c9c8:	02 20       	jnz	$+6      	;abs 0xc9ce
    c9ca:	2a 97       	cmp	@r7,	r10	
    c9cc:	f7 2b       	jnc	$-16     	;abs 0xc9bc
          do {
               d = *dp++;
    c9ce:	28 47       	mov	@r7,	r8	
    c9d0:	19 47 02 00 	mov	2(r7),	r9	;0x0002(r7)
    c9d4:	27 52       	add	#4,	r7	;r2 As==10
               c = '0';
    c9d6:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    c9da:	03 3c       	jmp	$+8      	;abs 0xc9e2
               while(x >= d) ++c, x -= d;
    c9dc:	5f 53       	inc.b	r15		
    c9de:	0a 88       	sub	r8,	r10	
    c9e0:	0b 79       	subc	r9,	r11	
    c9e2:	0b 99       	cmp	r9,	r11	
    c9e4:	04 28       	jnc	$+10     	;abs 0xc9ee
    c9e6:	09 9b       	cmp	r11,	r9	
    c9e8:	f9 2b       	jnc	$-12     	;abs 0xc9dc
    c9ea:	0a 98       	cmp	r8,	r10	
    c9ec:	f7 2f       	jc	$-16     	;abs 0xc9dc
               cio_printc(c);
    c9ee:	b0 12 7e cc 	call	#0xcc7e	
          } while(!(d & 1));
    c9f2:	18 f3       	and	#1,	r8	;r3 As==01
    c9f4:	09 f3       	and	#0,	r9	;r3 As==00
    c9f6:	08 93       	tst	r8		
    c9f8:	07 20       	jnz	$+16     	;abs 0xca08
    c9fa:	09 93       	tst	r9		
    c9fc:	05 20       	jnz	$+12     	;abs 0xca08
    c9fe:	e7 3f       	jmp	$-48     	;abs 0xc9ce
     } else
          cio_printc('0');
    ca00:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    ca04:	b0 12 7e cc 	call	#0xcc7e	
}
    ca08:	37 41       	pop	r7		
    ca0a:	38 41       	pop	r8		
    ca0c:	39 41       	pop	r9		
    ca0e:	3a 41       	pop	r10		
    ca10:	3b 41       	pop	r11		
    ca12:	30 41       	ret			

0000ca14 <_puth>:
};

static void _puth(unsigned int n)
{
     static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
     cio_printc(hex[n & 15]);
    ca14:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    ca18:	5f 4f 6e cc 	mov.b	-13202(r15),r15	;0xcc6e(r15)
    ca1c:	b0 12 7e cc 	call	#0xcc7e	
}
    ca20:	30 41       	ret			

0000ca22 <cio_print>:
#include <stdarg.h>

#include "conio.h"

void cio_print(char *line)
{
    ca22:	0b 12       	push	r11		
    ca24:	0b 4f       	mov	r15,	r11	
    ca26:	02 3c       	jmp	$+6      	;abs 0xca2c
     int   i = 0;

     while(line[i] != 0) {
          cio_printc(line[i++]);
    ca28:	b0 12 7e cc 	call	#0xcc7e	

void cio_print(char *line)
{
     int   i = 0;

     while(line[i] != 0) {
    ca2c:	6f 4b       	mov.b	@r11,	r15	
    ca2e:	1b 53       	inc	r11		
    ca30:	4f 93       	tst.b	r15		
    ca32:	fa 23       	jnz	$-10     	;abs 0xca28
          cio_printc(line[i++]);
     }
}
    ca34:	3b 41       	pop	r11		
    ca36:	30 41       	ret			

0000ca38 <cio_printi>:

void cio_printi(int n)
{
    ca38:	0b 12       	push	r11		
    ca3a:	0a 12       	push	r10		
    ca3c:	09 12       	push	r9		
    ca3e:	08 12       	push	r8		
    ca40:	07 12       	push	r7		
    ca42:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
    ca46:	0f 93       	tst	r15		
    ca48:	07 24       	jz	$+16     	;abs 0xca58
    ca4a:	08 41       	mov	r1,	r8	
    ca4c:	38 50 1e 00 	add	#30,	r8	;#0x001e
    ca50:	39 40 0f 00 	mov	#15,	r9	;#0x000f
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca54:	07 43       	clr	r7		
    ca56:	18 3c       	jmp	$+50     	;abs 0xca88
     int buffer[16];
     int i;
     int j;

     if(n == 0) {
          cio_printc('0');
    ca58:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    ca5c:	b0 12 7e cc 	call	#0xcc7e	
    ca60:	23 3c       	jmp	$+72     	;abs 0xcaa8
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
    ca62:	0c 4f       	mov	r15,	r12	
    ca64:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    ca68:	b0 12 1e e2 	call	#0xe21e	
    ca6c:	3e 50 30 00 	add	#48,	r14	;#0x0030
    ca70:	88 4e 00 00 	mov	r14,	0(r8)	;0x0000(r8)
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca74:	39 53       	add	#-1,	r9	;r3 As==11
    ca76:	28 83       	decd	r8		
    ca78:	09 93       	tst	r9		
    ca7a:	08 24       	jz	$+18     	;abs 0xca8c
          buffer[i] = (n%10)+'0';
          n /= 10;
    ca7c:	0c 4f       	mov	r15,	r12	
    ca7e:	3a 40 0a 00 	mov	#10,	r10	;#0x000a
    ca82:	b0 12 1e e2 	call	#0xe21e	
    ca86:	0f 4c       	mov	r12,	r15	
     if(n == 0) {
          cio_printc('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    ca88:	07 9f       	cmp	r15,	r7	
    ca8a:	eb 3b       	jl	$-40     	;abs 0xca62
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    ca8c:	0a 49       	mov	r9,	r10	
    ca8e:	1a 53       	inc	r10		
     while(line[i] != 0) {
          cio_printc(line[i++]);
     }
}

void cio_printi(int n)
    ca90:	0b 4a       	mov	r10,	r11	
    ca92:	0b 5b       	rla	r11		
    ca94:	0b 51       	add	r1,	r11	
    ca96:	05 3c       	jmp	$+12     	;abs 0xcaa2
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
          cio_printc(buffer[j]);
    ca98:	6f 4b       	mov.b	@r11,	r15	
    ca9a:	b0 12 7e cc 	call	#0xcc7e	
     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    ca9e:	1a 53       	inc	r10		
    caa0:	2b 53       	incd	r11		
    caa2:	3a 90 10 00 	cmp	#16,	r10	;#0x0010
    caa6:	f8 23       	jnz	$-14     	;abs 0xca98
          cio_printc(buffer[j]);
     }
}
    caa8:	31 50 20 00 	add	#32,	r1	;#0x0020
    caac:	37 41       	pop	r7		
    caae:	38 41       	pop	r8		
    cab0:	39 41       	pop	r9		
    cab2:	3a 41       	pop	r10		
    cab4:	3b 41       	pop	r11		
    cab6:	30 41       	ret			

0000cab8 <cio_printb>:

void cio_printb(int n, int size)
{
    cab8:	0b 12       	push	r11		
    caba:	0a 12       	push	r10		
    cabc:	09 12       	push	r9		
    cabe:	08 12       	push	r8		
    cac0:	08 4f       	mov	r15,	r8	
    cac2:	09 4e       	mov	r14,	r9	

     int i;

     int mask = 1 << (size - 1);
    cac4:	1b 43       	mov	#1,	r11	;r3 As==01
    cac6:	0d 4e       	mov	r14,	r13	
    cac8:	3d 53       	add	#-1,	r13	;r3 As==11
    caca:	0d 93       	tst	r13		
    cacc:	03 24       	jz	$+8      	;abs 0xcad4
    cace:	0b 5b       	rla	r11		
    cad0:	1d 83       	dec	r13		
    cad2:	fd 23       	jnz	$-4      	;abs 0xcace

     for(i = 0; i < size; i++) {
    cad4:	0a 43       	clr	r10		
    cad6:	11 3c       	jmp	$+36     	;abs 0xcafa
          if((n & (mask >> i)) != 0) {
    cad8:	0f 4a       	mov	r10,	r15	
    cada:	0d 4b       	mov	r11,	r13	
    cadc:	0f 93       	tst	r15		
    cade:	03 24       	jz	$+8      	;abs 0xcae6
    cae0:	0d 11       	rra	r13		
    cae2:	1f 83       	dec	r15		
    cae4:	fd 23       	jnz	$-4      	;abs 0xcae0
    cae6:	0d f8       	and	r8,	r13	
    cae8:	03 24       	jz	$+8      	;abs 0xcaf0
               cio_printc('1');
    caea:	7f 40 31 00 	mov.b	#49,	r15	;#0x0031
    caee:	02 3c       	jmp	$+6      	;abs 0xcaf4
          } else {
               cio_printc('0');
    caf0:	7f 40 30 00 	mov.b	#48,	r15	;#0x0030
    caf4:	b0 12 7e cc 	call	#0xcc7e	

     int i;

     int mask = 1 << (size - 1);

     for(i = 0; i < size; i++) {
    caf8:	1a 53       	inc	r10		
    cafa:	0a 99       	cmp	r9,	r10	
    cafc:	ed 3b       	jl	$-36     	;abs 0xcad8
          } else {
               cio_printc('0');
          }
     }

}
    cafe:	38 41       	pop	r8		
    cb00:	39 41       	pop	r9		
    cb02:	3a 41       	pop	r10		
    cb04:	3b 41       	pop	r11		
    cb06:	30 41       	ret			

0000cb08 <cio_printf>:
     } else
          cio_printc('0');
}

void cio_printf(char *format, ...)
{
    cb08:	0b 12       	push	r11		
    cb0a:	0a 12       	push	r10		
    cb0c:	09 12       	push	r9		
    cb0e:	08 12       	push	r8		
    cb10:	07 12       	push	r7		
    cb12:	06 12       	push	r6		
    cb14:	05 12       	push	r5		
    cb16:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
     char c;
     int i;
     long n;

     va_list a;
     va_start(a, format);
    cb1a:	0b 41       	mov	r1,	r11	
    cb1c:	3b 50 12 00 	add	#18,	r11	;#0x0012

     while((c = *format++)) {
          if(c == '%') {
               switch(c = *format++) {
    cb20:	76 40 6e 00 	mov.b	#110,	r6	;#0x006e
    cb24:	77 40 69 00 	mov.b	#105,	r7	;#0x0069
    cb28:	83 3c       	jmp	$+264    	;abs 0xcc30
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    cb2a:	1a 53       	inc	r10		
          if(c == '%') {
    cb2c:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    cb30:	7d 20       	jnz	$+252    	;abs 0xcc2c
               switch(c = *format++) {
    cb32:	6f 4a       	mov.b	@r10,	r15	
    cb34:	1a 53       	inc	r10		
    cb36:	7f 90 6e 00 	cmp.b	#110,	r15	;#0x006e
    cb3a:	3c 24       	jz	$+122    	;abs 0xcbb4
    cb3c:	46 9f       	cmp.b	r15,	r6	
    cb3e:	0f 38       	jl	$+32     	;abs 0xcb5e
    cb40:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    cb44:	22 24       	jz	$+70     	;abs 0xcb8a
    cb46:	47 9f       	cmp.b	r15,	r7	
    cb48:	06 38       	jl	$+14     	;abs 0xcb56
    cb4a:	4f 93       	tst.b	r15		
    cb4c:	74 24       	jz	$+234    	;abs 0xcc36
    cb4e:	7f 90 63 00 	cmp.b	#99,	r15	;#0x0063
    cb52:	6c 20       	jnz	$+218    	;abs 0xcc2c
    cb54:	13 3c       	jmp	$+40     	;abs 0xcb7c
    cb56:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    cb5a:	68 20       	jnz	$+210    	;abs 0xcc2c
    cb5c:	2b 3c       	jmp	$+88     	;abs 0xcbb4
    cb5e:	7f 90 75 00 	cmp.b	#117,	r15	;#0x0075
    cb62:	13 24       	jz	$+40     	;abs 0xcb8a
    cb64:	7f 90 78 00 	cmp.b	#120,	r15	;#0x0078
    cb68:	43 24       	jz	$+136    	;abs 0xcbf0
    cb6a:	7f 90 73 00 	cmp.b	#115,	r15	;#0x0073
    cb6e:	5e 20       	jnz	$+190    	;abs 0xcc2c
               case 's':                       // String
                    cio_print(va_arg(a, char*));
    cb70:	09 4b       	mov	r11,	r9	
    cb72:	29 53       	incd	r9		
    cb74:	2f 4b       	mov	@r11,	r15	
    cb76:	b0 12 22 ca 	call	#0xca22	
    cb7a:	05 3c       	jmp	$+12     	;abs 0xcb86
                    break;
               case 'c':                       // Char
                    cio_printc((char)va_arg(a, int));
    cb7c:	09 4b       	mov	r11,	r9	
    cb7e:	29 53       	incd	r9		
    cb80:	6f 4b       	mov.b	@r11,	r15	
    cb82:	b0 12 7e cc 	call	#0xcc7e	
    cb86:	0b 49       	mov	r9,	r11	
    cb88:	53 3c       	jmp	$+168    	;abs 0xcc30
                    break;
               case 'i':                       // 16 bit Integer
               case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    cb8a:	09 4b       	mov	r11,	r9	
    cb8c:	29 53       	incd	r9		
    cb8e:	2b 4b       	mov	@r11,	r11	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
    cb90:	7f 90 69 00 	cmp.b	#105,	r15	;#0x0069
    cb94:	08 20       	jnz	$+18     	;abs 0xcba6
    cb96:	0b 93       	tst	r11		
    cb98:	06 34       	jge	$+14     	;abs 0xcba6
    cb9a:	3b e3       	inv	r11		
    cb9c:	1b 53       	inc	r11		
    cb9e:	7f 50 c4 ff 	add.b	#-60,	r15	;#0xffc4
    cba2:	b0 12 7e cc 	call	#0xcc7e	
                    _xtoa((unsigned)i, _dv + 5);
    cba6:	3d 40 5a cc 	mov	#-13222,r13	;#0xcc5a
    cbaa:	0e 4b       	mov	r11,	r14	
    cbac:	0f 43       	clr	r15		
    cbae:	b0 12 a2 c9 	call	#0xc9a2	
    cbb2:	e9 3f       	jmp	$-44     	;abs 0xcb86
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    cbb4:	05 4b       	mov	r11,	r5	
    cbb6:	25 52       	add	#4,	r5	;r2 As==10
    cbb8:	28 4b       	mov	@r11,	r8	
    cbba:	19 4b 02 00 	mov	2(r11),	r9	;0x0002(r11)
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
    cbbe:	7f 90 6c 00 	cmp.b	#108,	r15	;#0x006c
    cbc2:	0e 20       	jnz	$+30     	;abs 0xcbe0
    cbc4:	09 93       	tst	r9		
    cbc6:	0c 34       	jge	$+26     	;abs 0xcbe0
    cbc8:	0d 48       	mov	r8,	r13	
    cbca:	0e 49       	mov	r9,	r14	
    cbcc:	3d e3       	inv	r13		
    cbce:	3e e3       	inv	r14		
    cbd0:	1d 53       	inc	r13		
    cbd2:	0e 63       	adc	r14		
    cbd4:	08 4d       	mov	r13,	r8	
    cbd6:	09 4e       	mov	r14,	r9	
    cbd8:	7f 50 c1 ff 	add.b	#-63,	r15	;#0xffc1
    cbdc:	b0 12 7e cc 	call	#0xcc7e	
                    _xtoa((unsigned long)n, _dv);
    cbe0:	3d 40 46 cc 	mov	#-13242,r13	;#0xcc46
    cbe4:	0e 48       	mov	r8,	r14	
    cbe6:	0f 49       	mov	r9,	r15	
    cbe8:	b0 12 a2 c9 	call	#0xc9a2	
                    if(c == 'i' && i < 0) i = -i, cio_printc('-');
                    _xtoa((unsigned)i, _dv + 5);
                    break;
               case 'l':                       // 32 bit Long
               case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    cbec:	0b 45       	mov	r5,	r11	
    cbee:	20 3c       	jmp	$+66     	;abs 0xcc30
                    if(c == 'l' &&  n < 0) n = -n, cio_printc('-');
                    _xtoa((unsigned long)n, _dv);
                    break;
               case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    cbf0:	09 4b       	mov	r11,	r9	
    cbf2:	29 53       	incd	r9		
    cbf4:	2b 4b       	mov	@r11,	r11	
                    _puth(i >> 12);
    cbf6:	0e 4b       	mov	r11,	r14	
    cbf8:	8e 10       	swpb	r14		
    cbfa:	8e 11       	sxt	r14		
    cbfc:	0e 11       	rra	r14		
    cbfe:	0e 11       	rra	r14		
    cc00:	0e 11       	rra	r14		
    cc02:	0f 4e       	mov	r14,	r15	
    cc04:	0f 11       	rra	r15		
    cc06:	b0 12 14 ca 	call	#0xca14	
                    _puth(i >> 8);
    cc0a:	0f 4b       	mov	r11,	r15	
    cc0c:	8f 10       	swpb	r15		
    cc0e:	8f 11       	sxt	r15		
    cc10:	b0 12 14 ca 	call	#0xca14	
                    _puth(i >> 4);
    cc14:	0e 4b       	mov	r11,	r14	
    cc16:	0e 11       	rra	r14		
    cc18:	0e 11       	rra	r14		
    cc1a:	0e 11       	rra	r14		
    cc1c:	0f 4e       	mov	r14,	r15	
    cc1e:	0f 11       	rra	r15		
    cc20:	b0 12 14 ca 	call	#0xca14	
                    _puth(i);
    cc24:	0f 4b       	mov	r11,	r15	
    cc26:	b0 12 14 ca 	call	#0xca14	
    cc2a:	ad 3f       	jmp	$-164    	;abs 0xcb86
               default:
                    goto bad_fmt;
               }
          } else
bad_fmt:
               cio_printc(c);
    cc2c:	b0 12 7e cc 	call	#0xcc7e	
     long n;

     va_list a;
     va_start(a, format);

     while((c = *format++)) {
    cc30:	6f 4a       	mov.b	@r10,	r15	
    cc32:	4f 93       	tst.b	r15		
    cc34:	7a 23       	jnz	$-266    	;abs 0xcb2a
          } else
bad_fmt:
               cio_printc(c);
     }
     va_end(a);
}
    cc36:	35 41       	pop	r5		
    cc38:	36 41       	pop	r6		
    cc3a:	37 41       	pop	r7		
    cc3c:	38 41       	pop	r8		
    cc3e:	39 41       	pop	r9		
    cc40:	3a 41       	pop	r10		
    cc42:	3b 41       	pop	r11		
    cc44:	30 41       	ret			

0000cc46 <_dv>:
    cc46:	00 ca 9a 3b 00 e1 f5 05 80 96 98 00 40 42 0f 00     ...;........@B..
    cc56:	a0 86 01 00 10 27 00 00 e8 03 00 00 64 00 00 00     .....'......d...
    cc66:	0a 00 00 00 01 00 00 00                             ........

0000cc6e <hex.1251>:
    cc6e:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

0000cc7e <cio_printc>:
#include "serial.h"
#include "conio.h"

void cio_printc(char c)
{
     serial_send_blocking(c);
    cc7e:	b0 12 80 c9 	call	#0xc980	
}
    cc82:	30 41       	ret			

0000cc84 <cio_getc>:

char cio_getc()
{
	return serial_recv_blocking();
    cc84:	b0 12 94 c9 	call	#0xc994	
}
    cc88:	30 41       	ret			

0000cc8a <pin2port>:
	PIN_FUNCTION_INPUT_FLOAT,			// P2.7
};

int pin2port(unsigned char pin) 
{
	int port = (0xF0 & pin) >> 4;
    cc8a:	12 c3       	clrc			
    cc8c:	4f 10       	rrc.b	r15		
    cc8e:	4f 11       	rra.b	r15		
    cc90:	4f 11       	rra.b	r15		
    cc92:	4f 11       	rra.b	r15		
    cc94:	4f 4f       	mov.b	r15,	r15	

	if(port >= 1 && port <= 2) { 
    cc96:	0e 4f       	mov	r15,	r14	
    cc98:	3e 53       	add	#-1,	r14	;r3 As==11
    cc9a:	2e 93       	cmp	#2,	r14	;r3 As==10
    cc9c:	02 28       	jnc	$+6      	;abs 0xcca2
		return port;
	}

	return PIN_STAT_ERR_INVALPORT;
    cc9e:	3f 40 fe ff 	mov	#-2,	r15	;#0xfffe
}
    cca2:	30 41       	ret			

0000cca4 <pin2bit>:

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    cca4:	0e 4f       	mov	r15,	r14	
    cca6:	3e f0 0f 00 	and	#15,	r14	;#0x000f

	return bit;
}
    ccaa:	1f 43       	mov	#1,	r15	;r3 As==01
    ccac:	0e 93       	tst	r14		
    ccae:	03 24       	jz	$+8      	;abs 0xccb6
    ccb0:	0f 5f       	rla	r15		
    ccb2:	1e 83       	dec	r14		
    ccb4:	fd 23       	jnz	$-4      	;abs 0xccb0
    ccb6:	30 41       	ret			

0000ccb8 <pin_set_curr_func>:

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
    ccb8:	4d 4f       	mov.b	r15,	r13	
    ccba:	12 c3       	clrc			
    ccbc:	4d 10       	rrc.b	r13		
    ccbe:	4d 11       	rra.b	r13		
    ccc0:	4d 11       	rra.b	r13		
    ccc2:	4d 11       	rra.b	r13		
    ccc4:	4d 4d       	mov.b	r13,	r13	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    ccc6:	3d 53       	add	#-1,	r13	;r3 As==11
    ccc8:	0d 5d       	rla	r13		
    ccca:	0d 5d       	rla	r13		
    cccc:	0d 5d       	rla	r13		
}

void pin_set_curr_func(unsigned char pin, unsigned char func) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    ccce:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    ccd2:	0d 5f       	add	r15,	r13	

	if((unsigned int)idx > sizeof(pin_curr_func)) {
    ccd4:	3d 90 11 00 	cmp	#17,	r13	;#0x0011
    ccd8:	02 2c       	jc	$+6      	;abs 0xccde
		return;
	}

	pin_curr_func[idx] = func;
    ccda:	cd 4e 00 02 	mov.b	r14,	512(r13);0x0200(r13)
    ccde:	30 41       	ret			

0000cce0 <pin_reserve>:
}

void pin_reserve(unsigned char pin) 
{
	pin_set_curr_func(pin, PIN_FUNCTION_RESERVED);	
    cce0:	7e 40 fe ff 	mov.b	#-2,	r14	;#0xfffe
    cce4:	b0 12 b8 cc 	call	#0xccb8	
}
    cce8:	30 41       	ret			

0000ccea <pin_function>:

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
    ccea:	4e 4f       	mov.b	r15,	r14	
    ccec:	12 c3       	clrc			
    ccee:	4e 10       	rrc.b	r14		
    ccf0:	4e 11       	rra.b	r14		
    ccf2:	4e 11       	rra.b	r14		
    ccf4:	4e 11       	rra.b	r14		
    ccf6:	4e 4e       	mov.b	r14,	r14	
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;
    ccf8:	3e 53       	add	#-1,	r14	;r3 As==11
    ccfa:	0e 5e       	rla	r14		
    ccfc:	0e 5e       	rla	r14		
    ccfe:	0e 5e       	rla	r14		
}

unsigned char pin_function(unsigned char pin) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    cd00:	3f f0 0f 00 	and	#15,	r15	;#0x000f
	int idx  	= (port - 1) * 8 + bit_num;
    cd04:	0e 5f       	add	r15,	r14	

	if((unsigned int)idx >= 16) {
    cd06:	3e 90 10 00 	cmp	#16,	r14	;#0x0010
    cd0a:	03 2c       	jc	$+8      	;abs 0xcd12
		return PIN_FUNCTION_UNKNOWN;
	}

	return pin_curr_func[idx];
    cd0c:	5f 4e 00 02 	mov.b	512(r14),r15	;0x0200(r14)
    cd10:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (port - 1) * 8 + bit_num;

	if((unsigned int)idx >= 16) {
		return PIN_FUNCTION_UNKNOWN;
    cd12:	7f 43       	mov.b	#-1,	r15	;r3 As==11
	}

	return pin_curr_func[idx];
}
    cd14:	30 41       	ret			

0000cd16 <pin_with_function>:

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    cd16:	4f 93       	tst.b	r15		
    cd18:	10 24       	jz	$+34     	;abs 0xcd3a
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
    cd1a:	0d 4f       	mov	r15,	r13	
    cd1c:	3d f0 0f 00 	and	#15,	r13	;#0x000f
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    cd20:	1d 53       	inc	r13		
	return pin_curr_func[idx];
}

unsigned char pin_with_function(unsigned char pin, unsigned char function) 
{
	int port    = (0xF0 & pin) >> 4;
    cd22:	12 c3       	clrc			
    cd24:	4f 10       	rrc.b	r15		
    cd26:	4f 11       	rra.b	r15		
    cd28:	4f 11       	rra.b	r15		
    cd2a:	4f 11       	rra.b	r15		
    cd2c:	4f 4f       	mov.b	r15,	r15	
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
    cd2e:	3f 53       	add	#-1,	r15	;r3 As==11
    cd30:	0f 5f       	rla	r15		
    cd32:	0f 5f       	rla	r15		
    cd34:	0f 5f       	rla	r15		
    cd36:	0d 5f       	add	r15,	r13	
    cd38:	01 3c       	jmp	$+4      	;abs 0xcd3c
    cd3a:	0d 43       	clr	r13		
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    cd3c:	1d 53       	inc	r13		
    cd3e:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    cd42:	11 3c       	jmp	$+36     	;abs 0xcd66
		if(pin_curr_func[i] == function) {
    cd44:	cd 9e 00 02 	cmp.b	r14,	512(r13);0x0200(r13)
    cd48:	0d 20       	jnz	$+28     	;abs 0xcd64
			return (((i / 8 + 1) << 4) + (i % 8));
    cd4a:	0f 4d       	mov	r13,	r15	
    cd4c:	0f 11       	rra	r15		
    cd4e:	0f 11       	rra	r15		
    cd50:	0f 11       	rra	r15		
    cd52:	5f 53       	inc.b	r15		
    cd54:	4f 5f       	rla.b	r15		
    cd56:	4f 5f       	rla.b	r15		
    cd58:	4f 5f       	rla.b	r15		
    cd5a:	4f 5f       	rla.b	r15		
    cd5c:	3d f0 07 00 	and	#7,	r13	;#0x0007
    cd60:	4f 5d       	add.b	r13,	r15	
    cd62:	30 41       	ret			
	int port    = (0xF0 & pin) >> 4;
	int bit_num = (0x0F & pin);
	int idx  	= (pin == 0 ? 0 : (port - 1) * 8 + bit_num + 1) ;
	int i;

	for(i = idx + 1; (unsigned int)i < sizeof(pin_curr_func); i++) {
    cd64:	1d 53       	inc	r13		
    cd66:	0f 9d       	cmp	r13,	r15	
    cd68:	ed 2f       	jc	$-36     	;abs 0xcd44
		if(pin_curr_func[i] == function) {
			return (((i / 8 + 1) << 4) + (i % 8));
		}
	}

	return 0;
    cd6a:	4f 43       	clr.b	r15		
}
    cd6c:	30 41       	ret			

0000cd6e <pin_capabilities>:

int pin_capabilities(unsigned char pin) 
{
    cd6e:	4e 4f       	mov.b	r15,	r14	

	// PIN_CAP_INPUT
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    cd70:	4d 4f       	mov.b	r15,	r13	
    cd72:	7d 50 f0 ff 	add.b	#-16,	r13	;#0xfff0
{
	int caps = 0;

	// PIN_CAP_INPUT
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    cd76:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    cd78:	19 28       	jnc	$+52     	;abs 0xcdac
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
    cd7a:	7f 90 20 00 	cmp.b	#32,	r15	;#0x0020
    cd7e:	2d 24       	jz	$+92     	;abs 0xcdda
    cd80:	7f 90 21 00 	cmp.b	#33,	r15	;#0x0021
    cd84:	22 24       	jz	$+70     	;abs 0xcdca
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
    cd86:	7f 90 22 00 	cmp.b	#34,	r15	;#0x0022
    cd8a:	1f 24       	jz	$+64     	;abs 0xcdca
    cd8c:	7f 90 23 00 	cmp.b	#35,	r15	;#0x0023
    cd90:	24 24       	jz	$+74     	;abs 0xcdda
    cd92:	7f 90 24 00 	cmp.b	#36,	r15	;#0x0024
    cd96:	21 24       	jz	$+68     	;abs 0xcdda
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    cd98:	7f 90 25 00 	cmp.b	#37,	r15	;#0x0025
    cd9c:	1e 24       	jz	$+62     	;abs 0xcdda
    cd9e:	7f 90 26 00 	cmp.b	#38,	r15	;#0x0026
    cda2:	1b 24       	jz	$+56     	;abs 0xcdda
    cda4:	7f 90 27 00 	cmp.b	#39,	r15	;#0x0027
    cda8:	1b 20       	jnz	$+56     	;abs 0xcde0
    cdaa:	17 3c       	jmp	$+48     	;abs 0xcdda
	
		caps |= PIN_CAP_INPUT + PIN_CAP_INPUT_RE + PIN_CAP_OUTPUT;
	} 

	// PIN_CAP_PWM
	if( pin == PIN_1_2 || pin == PIN_1_6 || pin == PIN_2_1 || 
    cdac:	7f 90 12 00 	cmp.b	#18,	r15	;#0x0012
    cdb0:	0c 24       	jz	$+26     	;abs 0xcdca
    cdb2:	7f 90 16 00 	cmp.b	#22,	r15	;#0x0016
    cdb6:	09 24       	jz	$+20     	;abs 0xcdca
    cdb8:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    cdbc:	7e 90 21 00 	cmp.b	#33,	r14	;#0x0021
    cdc0:	06 24       	jz	$+14     	;abs 0xcdce
    cdc2:	7e 90 22 00 	cmp.b	#34,	r14	;#0x0022
    cdc6:	05 20       	jnz	$+12     	;abs 0xcdd2
    cdc8:	02 3c       	jmp	$+6      	;abs 0xcdce
    cdca:	3f 40 07 00 	mov	#7,	r15	;#0x0007
		pin == PIN_2_2) {
	
		caps |= PIN_CAP_PWM;
    cdce:	3f d0 10 00 	bis	#16,	r15	;#0x0010
	} 

	// PIN_CAP_ANALOG_IN
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
    cdd2:	7d 92       	cmp.b	#8,	r13	;r2 As==11
    cdd4:	01 2c       	jc	$+4      	;abs 0xcdd8
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7) {
	
		caps |= PIN_CAP_ANALOG_IN;
    cdd6:	3f d2       	bis	#8,	r15	;r2 As==11
	} 

	return caps;
}
    cdd8:	30 41       	ret			
	// PIN_CAP_OUTPUT
	if( pin == PIN_1_0 || pin == PIN_1_1 || pin == PIN_1_2 ||
		pin == PIN_1_3 || pin == PIN_1_4 || pin == PIN_1_5 || 
		pin == PIN_1_6 || pin == PIN_1_7 ||	pin == PIN_2_0 || 
		pin == PIN_2_1 || pin == PIN_2_2 || pin == PIN_2_3 || 
		pin == PIN_2_4 || pin == PIN_2_5 || pin == PIN_2_6 || 
    cdda:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    cdde:	f9 3f       	jmp	$-12     	;abs 0xcdd2
	return 0;
}

int pin_capabilities(unsigned char pin) 
{
	int caps = 0;
    cde0:	0f 43       	clr	r15		
    cde2:	ec 3f       	jmp	$-38     	;abs 0xcdbc

0000cde4 <pin_has_capabilities>:

	return caps;
}

int pin_has_capabilities(unsigned char pin, int capabilities) 
{
    cde4:	0b 12       	push	r11		
    cde6:	0b 4e       	mov	r14,	r11	
	return ((pin_capabilities(pin) & capabilities) == capabilities ? 1 : 0);
    cde8:	b0 12 6e cd 	call	#0xcd6e	
    cdec:	0e 4f       	mov	r15,	r14	
    cdee:	0e fb       	and	r11,	r14	
    cdf0:	1f 43       	mov	#1,	r15	;r3 As==01
    cdf2:	0e 9b       	cmp	r11,	r14	
    cdf4:	01 24       	jz	$+4      	;abs 0xcdf8
    cdf6:	0f 43       	clr	r15		
}
    cdf8:	3b 41       	pop	r11		
    cdfa:	30 41       	ret			

0000cdfc <pin_setup>:

int pin_setup(unsigned char pin, unsigned char function)
{
    cdfc:	0b 12       	push	r11		
    cdfe:	0a 12       	push	r10		
    ce00:	09 12       	push	r9		
    ce02:	08 12       	push	r8		
    ce04:	49 4f       	mov.b	r15,	r9	
    ce06:	48 4e       	mov.b	r14,	r8	
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    ce08:	b0 12 8a cc 	call	#0xcc8a	
    ce0c:	0b 4f       	mov	r15,	r11	
    ce0e:	0f 93       	tst	r15		
    ce10:	02 34       	jge	$+6      	;abs 0xce16
    ce12:	30 40 c0 cf 	br	#0xcfc0	
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    ce16:	1a 43       	mov	#1,	r10	;r3 As==01
    ce18:	0f 49       	mov	r9,	r15	
    ce1a:	3f f0 0f 00 	and	#15,	r15	;#0x000f
    ce1e:	0f 93       	tst	r15		
    ce20:	03 24       	jz	$+8      	;abs 0xce28
    ce22:	0a 5a       	rla	r10		
    ce24:	1f 83       	dec	r15		
    ce26:	fd 23       	jnz	$-4      	;abs 0xce22
{
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    ce28:	0a 93       	tst	r10		
    ce2a:	c5 38       	jl	$+396    	;abs 0xcfb6

	unsigned char f;

	f = pin_function(pin); 
    ce2c:	4f 49       	mov.b	r9,	r15	
    ce2e:	b0 12 ea cc 	call	#0xccea	
#ifdef PIN_DBG
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
    ce32:	4f 98       	cmp.b	r8,	r15	
    ce34:	c2 24       	jz	$+390    	;abs 0xcfba
		return PIN_STAT_OK;
	}
	// PIN is reserved
	else if(f == PIN_FUNCTION_RESERVED) {
    ce36:	7f 90 fe ff 	cmp.b	#-2,	r15	;#0xfffe
    ce3a:	c1 24       	jz	$+388    	;abs 0xcfbe
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	switch(function) {
    ce3c:	78 90 06 00 	cmp.b	#6,	r8	;#0x0006
    ce40:	be 2c       	jc	$+382    	;abs 0xcfbe
    ce42:	4f 48       	mov.b	r8,	r15	
    ce44:	0f 5f       	rla	r15		
    ce46:	10 4f 4a ce 	br	-12726(r15)	;0xce4a(r15)
    ce4a:	56 ce 7a ce 	bic.b	-12678(r14),r6	;0xce7a(r14)
    ce4e:	aa ce ea ce 	bic	@r14,	-12566(r10);0xceea(r10)
    ce52:	26 cf       	bic	@r15,	r6	
    ce54:	48 cf       	bic.b	r15,	r8	
	case PIN_FUNCTION_INPUT_FLOAT:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT)) {
    ce56:	1e 43       	mov	#1,	r14	;r3 As==01
    ce58:	4f 49       	mov.b	r9,	r15	
    ce5a:	b0 12 e4 cd 	call	#0xcde4	
    ce5e:	0f 93       	tst	r15		
    ce60:	ae 24       	jz	$+350    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ce62:	1b 93       	cmp	#1,	r11	;r3 As==01
    ce64:	04 20       	jnz	$+10     	;abs 0xce6e
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce66:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    ce68:	c2 fa 22 00 	and.b	r10,	&0x0022	
    ce6c:	4b 3c       	jmp	$+152    	;abs 0xcf04
			P1REN &= ~bit; 	                // disable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    ce6e:	2b 93       	cmp	#2,	r11	;r3 As==10
    ce70:	9d 20       	jnz	$+316    	;abs 0xcfac
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce72:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    ce74:	c2 fa 2a 00 	and.b	r10,	&0x002a	
    ce78:	51 3c       	jmp	$+164    	;abs 0xcf1c
			P2REN &= ~bit; 	                // disable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLUP:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    ce7a:	2e 43       	mov	#2,	r14	;r3 As==10
    ce7c:	4f 49       	mov.b	r9,	r15	
    ce7e:	b0 12 e4 cd 	call	#0xcde4	
    ce82:	0f 93       	tst	r15		
    ce84:	9c 24       	jz	$+314    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ce86:	1b 93       	cmp	#1,	r11	;r3 As==01
    ce88:	07 20       	jnz	$+16     	;abs 0xce98
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce8a:	4f 4a       	mov.b	r10,	r15	
    ce8c:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ce8e:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT |=  bit;					// setting out to HIGH enables pull-up                     
    ce92:	c2 da 21 00 	bis.b	r10,	&0x0021	
    ce96:	17 3c       	jmp	$+48     	;abs 0xcec6
			P1REN |=  bit; 	                // enable pull-up/down 
  			P1SEL &= ~bit;                  // remove option
		}
		else if(port == 2) {
    ce98:	2b 93       	cmp	#2,	r11	;r3 As==10
    ce9a:	88 20       	jnz	$+274    	;abs 0xcfac
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ce9c:	4f 4a       	mov.b	r10,	r15	
    ce9e:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    cea0:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT |=  bit;					// setting out to HIGH enables pull-up                     
    cea4:	c2 da 29 00 	bis.b	r10,	&0x0029	
    cea8:	1b 3c       	jmp	$+56     	;abs 0xcee0
			P2REN |=  bit; 	                // enable pull-up/down 
  			P2SEL &= ~bit;                  // remove option
		}
		break;
	case PIN_FUNCTION_INPUT_PULLDOWN:
		if(!pin_has_capabilities(pin, PIN_CAP_INPUT_RE)) { 
    ceaa:	2e 43       	mov	#2,	r14	;r3 As==10
    ceac:	4f 49       	mov.b	r9,	r15	
    ceae:	b0 12 e4 cd 	call	#0xcde4	
    ceb2:	0f 93       	tst	r15		
    ceb4:	84 24       	jz	$+266    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    ceb6:	1b 93       	cmp	#1,	r11	;r3 As==01
    ceb8:	0b 20       	jnz	$+24     	;abs 0xced0
			P1DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ceba:	4f 4a       	mov.b	r10,	r15	
    cebc:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    cebe:	c2 ff 22 00 	and.b	r15,	&0x0022	
  			P1OUT &= ~bit;					// setting out to LOW enables pull-down                     
    cec2:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN |=  bit; 	                // enable pull-up/down 
    cec6:	c2 da 27 00 	bis.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    ceca:	c2 ff 26 00 	and.b	r15,	&0x0026	
    cece:	6e 3c       	jmp	$+222    	;abs 0xcfac
		}
		else if(port == 2) {
    ced0:	2b 93       	cmp	#2,	r11	;r3 As==10
    ced2:	6c 20       	jnz	$+218    	;abs 0xcfac
			P2DIR &= ~bit;					// make sure to clear OUT flag for the pin                 
    ced4:	4f 4a       	mov.b	r10,	r15	
    ced6:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    ced8:	c2 ff 2a 00 	and.b	r15,	&0x002a	
  			P2OUT &= ~bit;					// setting out to LOW enables pull-down                     
    cedc:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN |=  bit; 	                // enable pull-up/down 
    cee0:	c2 da 2f 00 	bis.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    cee4:	c2 ff 2e 00 	and.b	r15,	&0x002e	
    cee8:	61 3c       	jmp	$+196    	;abs 0xcfac
		}
		break;
	case PIN_FUNCTION_OUTPUT:
		if(!pin_has_capabilities(pin, PIN_CAP_OUTPUT)) { 
    ceea:	2e 42       	mov	#4,	r14	;r2 As==10
    ceec:	4f 49       	mov.b	r9,	r15	
    ceee:	b0 12 e4 cd 	call	#0xcde4	
    cef2:	0f 93       	tst	r15		
    cef4:	64 24       	jz	$+202    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}
		if(port == 1) {
    cef6:	1b 93       	cmp	#1,	r11	;r3 As==01
    cef8:	0a 20       	jnz	$+22     	;abs 0xcf0e
			P1DIR |=  bit;					// set direction to out                 
    cefa:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    cefe:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cf00:	c2 fa 21 00 	and.b	r10,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    cf04:	c2 fa 27 00 	and.b	r10,	&0x0027	
  			P1SEL &= ~bit;                  // remove option
    cf08:	c2 fa 26 00 	and.b	r10,	&0x0026	
    cf0c:	4f 3c       	jmp	$+160    	;abs 0xcfac
		}
		else if(port == 2) {
    cf0e:	2b 93       	cmp	#2,	r11	;r3 As==10
    cf10:	4d 20       	jnz	$+156    	;abs 0xcfac
			P2DIR |=  bit;					// set direction to out                 
    cf12:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    cf16:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cf18:	c2 fa 29 00 	and.b	r10,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    cf1c:	c2 fa 2f 00 	and.b	r10,	&0x002f	
  			P2SEL &= ~bit;                  // remove option
    cf20:	c2 fa 2e 00 	and.b	r10,	&0x002e	
    cf24:	43 3c       	jmp	$+136    	;abs 0xcfac
		}
		break;
	case PIN_FUNCTION_ANALOG_IN:
		if(!pin_has_capabilities(pin, PIN_CAP_ANALOG_IN)) { 
    cf26:	3e 42       	mov	#8,	r14	;r2 As==11
    cf28:	4f 49       	mov.b	r9,	r15	
    cf2a:	b0 12 e4 cd 	call	#0xcde4	
    cf2e:	0f 93       	tst	r15		
    cf30:	46 24       	jz	$+142    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		P1DIR &= ~bit;						// make sure to clear OUT flag for the pin                 
    cf32:	7a e3       	xor.b	#-1,	r10	;r3 As==11
    cf34:	c2 fa 22 00 	and.b	r10,	&0x0022	
		P1REN &= ~bit; 	                	// disable pull-up/down 
    cf38:	c2 fa 27 00 	and.b	r10,	&0x0027	
  		P1SEL &= ~bit;                  	// remove option
    cf3c:	c2 fa 26 00 	and.b	r10,	&0x0026	

		// VCC as +VRef, VSS as -VRef, 16 x ADC10CLKs
   		ADC10CTL0 = SREF_0 + ADC10SHT_2 + REFON + ADC10ON;
    cf40:	b2 40 30 10 	mov	#4144,	&0x01b0	;#0x1030
    cf44:	b0 01 
    cf46:	32 3c       	jmp	$+102    	;abs 0xcfac

		break;
	case PIN_FUNCTION_PWM:
		if(!pin_has_capabilities(pin, PIN_CAP_PWM)) { 
    cf48:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    cf4c:	4f 49       	mov.b	r9,	r15	
    cf4e:	b0 12 e4 cd 	call	#0xcde4	
    cf52:	0f 93       	tst	r15		
    cf54:	34 24       	jz	$+106    	;abs 0xcfbe
			return PIN_STAT_ERR_UNSUPFUNC;
		}

		if(port == 1) {
    cf56:	1b 93       	cmp	#1,	r11	;r3 As==01
    cf58:	15 20       	jnz	$+44     	;abs 0xcf84
			// only one pin on port 1 is able to perform PWM
			unsigned char pf = pin_with_function(PIN_1_0, function);
    cf5a:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    cf5e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    cf62:	b0 12 16 cd 	call	#0xcd16	

			if(pf > 0 && pf < PIN_2_0) { 
    cf66:	7f 53       	add.b	#-1,	r15	;r3 As==11
    cf68:	7f 90 1f 00 	cmp.b	#31,	r15	;#0x001f
    cf6c:	28 28       	jnc	$+82     	;abs 0xcfbe
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P1DIR |=  bit;					// set direction to out                 
    cf6e:	c2 da 22 00 	bis.b	r10,	&0x0022	
  			P1OUT &= ~bit;					// set to LOW initially                     
    cf72:	4f 4a       	mov.b	r10,	r15	
    cf74:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    cf76:	c2 ff 21 00 	and.b	r15,	&0x0021	
			P1REN &= ~bit; 	                // disable pull-up/down 
    cf7a:	c2 ff 27 00 	and.b	r15,	&0x0027	
  			P1SEL |=  bit;                  // select TA option
    cf7e:	c2 da 26 00 	bis.b	r10,	&0x0026	
    cf82:	14 3c       	jmp	$+42     	;abs 0xcfac
		}
		else if(port == 2) {
    cf84:	2b 93       	cmp	#2,	r11	;r3 As==10
    cf86:	12 20       	jnz	$+38     	;abs 0xcfac
			// only one pin on port 2 is able to perform PWM
			if(pin_with_function(PIN_2_0, function)) { 
    cf88:	7e 40 05 00 	mov.b	#5,	r14	;#0x0005
    cf8c:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    cf90:	b0 12 16 cd 	call	#0xcd16	
    cf94:	4f 93       	tst.b	r15		
    cf96:	13 20       	jnz	$+40     	;abs 0xcfbe
				return PIN_STAT_ERR_UNSUPFUNC;
			}
			P2DIR |=  bit;					// set direction to out                 
    cf98:	c2 da 2a 00 	bis.b	r10,	&0x002a	
  			P2OUT &= ~bit;					// set to LOW initially                     
    cf9c:	4f 4a       	mov.b	r10,	r15	
    cf9e:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    cfa0:	c2 ff 29 00 	and.b	r15,	&0x0029	
			P2REN &= ~bit; 	                // disable pull-up/down 
    cfa4:	c2 ff 2f 00 	and.b	r15,	&0x002f	
  			P2SEL |=  bit;                  // select TA option
    cfa8:	c2 da 2e 00 	bis.b	r10,	&0x002e	
		break;
	default:
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	pin_set_curr_func(pin, function);
    cfac:	4e 48       	mov.b	r8,	r14	
    cfae:	4f 49       	mov.b	r9,	r15	
    cfb0:	b0 12 b8 cc 	call	#0xccb8	
    cfb4:	02 3c       	jmp	$+6      	;abs 0xcfba
{
	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    cfb6:	0b 4a       	mov	r10,	r11	
    cfb8:	03 3c       	jmp	$+8      	;abs 0xcfc0
	cio_printf("pin %x has current function %x\n\r", pin, f);
#endif

	// see if PIN is already configured for the given function
	if(f == function) { 
		return PIN_STAT_OK;
    cfba:	0b 43       	clr	r11		
    cfbc:	01 3c       	jmp	$+4      	;abs 0xcfc0
  			P1SEL |=  bit;                  // select TA option
		}
		else if(port == 2) {
			// only one pin on port 2 is able to perform PWM
			if(pin_with_function(PIN_2_0, function)) { 
				return PIN_STAT_ERR_UNSUPFUNC;
    cfbe:	3b 43       	mov	#-1,	r11	;r3 As==11
	}

	pin_set_curr_func(pin, function);

	return PIN_STAT_OK;
}
    cfc0:	0f 4b       	mov	r11,	r15	
    cfc2:	38 41       	pop	r8		
    cfc4:	39 41       	pop	r9		
    cfc6:	3a 41       	pop	r10		
    cfc8:	3b 41       	pop	r11		
    cfca:	30 41       	ret			

0000cfcc <pin_clear>:

int pin_clear(unsigned char pin)
{
    cfcc:	0b 12       	push	r11		
    cfce:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    cfd0:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    cfd4:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    cfd8:	1a 20       	jnz	$+54     	;abs 0xd00e
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    cfda:	4f 4b       	mov.b	r11,	r15	
    cfdc:	b0 12 8a cc 	call	#0xcc8a	
    cfe0:	0f 93       	tst	r15		
    cfe2:	1a 38       	jl	$+54     	;abs 0xd018
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    cfe4:	1e 43       	mov	#1,	r14	;r3 As==01
    cfe6:	0d 4b       	mov	r11,	r13	
    cfe8:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    cfec:	0d 93       	tst	r13		
    cfee:	03 24       	jz	$+8      	;abs 0xcff6
    cff0:	0e 5e       	rla	r14		
    cff2:	1d 83       	dec	r13		
    cff4:	fd 23       	jnz	$-4      	;abs 0xcff0

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    cff6:	0e 93       	tst	r14		
    cff8:	0c 38       	jl	$+26     	;abs 0xd012

	if(port == 1) {
    cffa:	1f 93       	cmp	#1,	r15	;r3 As==01
    cffc:	03 20       	jnz	$+8      	;abs 0xd004
  		P1OUT &= ~bit;					// set to LOW                   
    cffe:	c2 ce 21 00 	bic.b	r14,	&0x0021	
    d002:	09 3c       	jmp	$+20     	;abs 0xd016
	}
	else if(port == 2) {
    d004:	2f 93       	cmp	#2,	r15	;r3 As==10
    d006:	07 20       	jnz	$+16     	;abs 0xd016
  		P2OUT &= ~bit;					// set to LOW                    
    d008:	c2 ce 29 00 	bic.b	r14,	&0x0029	
    d00c:	04 3c       	jmp	$+10     	;abs 0xd016
int pin_clear(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d00e:	3f 43       	mov	#-1,	r15	;r3 As==11
    d010:	03 3c       	jmp	$+8      	;abs 0xd018

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d012:	0f 4e       	mov	r14,	r15	
    d014:	01 3c       	jmp	$+4      	;abs 0xd018
	}
	else if(port == 2) {
  		P2OUT &= ~bit;					// set to LOW                    
	}

	return PIN_STAT_OK;
    d016:	0f 43       	clr	r15		
}
    d018:	3b 41       	pop	r11		
    d01a:	30 41       	ret			

0000d01c <pin_set>:

int pin_set(unsigned char pin)
{
    d01c:	0b 12       	push	r11		
    d01e:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    d020:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
    d024:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d028:	1a 20       	jnz	$+54     	;abs 0xd05e
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d02a:	4f 4b       	mov.b	r11,	r15	
    d02c:	b0 12 8a cc 	call	#0xcc8a	
    d030:	0f 93       	tst	r15		
    d032:	1a 38       	jl	$+54     	;abs 0xd068
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d034:	1e 43       	mov	#1,	r14	;r3 As==01
    d036:	0d 4b       	mov	r11,	r13	
    d038:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    d03c:	0d 93       	tst	r13		
    d03e:	03 24       	jz	$+8      	;abs 0xd046
    d040:	0e 5e       	rla	r14		
    d042:	1d 83       	dec	r13		
    d044:	fd 23       	jnz	$-4      	;abs 0xd040

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d046:	0e 93       	tst	r14		
    d048:	0c 38       	jl	$+26     	;abs 0xd062

	if(port == 1) {
    d04a:	1f 93       	cmp	#1,	r15	;r3 As==01
    d04c:	03 20       	jnz	$+8      	;abs 0xd054
  		P1OUT |= bit;					// set to HIGH 
    d04e:	c2 de 21 00 	bis.b	r14,	&0x0021	
    d052:	09 3c       	jmp	$+20     	;abs 0xd066
	}
	else if(port == 2) {
    d054:	2f 93       	cmp	#2,	r15	;r3 As==10
    d056:	07 20       	jnz	$+16     	;abs 0xd066
  		P2OUT |= bit;					// set to HIGH               
    d058:	c2 de 29 00 	bis.b	r14,	&0x0029	
    d05c:	04 3c       	jmp	$+10     	;abs 0xd066
int pin_set(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d05e:	3f 43       	mov	#-1,	r15	;r3 As==11
    d060:	03 3c       	jmp	$+8      	;abs 0xd068

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d062:	0f 4e       	mov	r14,	r15	
    d064:	01 3c       	jmp	$+4      	;abs 0xd068
	}
	else if(port == 2) {
  		P2OUT |= bit;					// set to HIGH               
	}

	return PIN_STAT_OK;
    d066:	0f 43       	clr	r15		
}
    d068:	3b 41       	pop	r11		
    d06a:	30 41       	ret			

0000d06c <pin_toggle>:

int pin_toggle(unsigned char pin)
{
    d06c:	0b 12       	push	r11		
    d06e:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    d070:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
    d074:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d078:	1a 20       	jnz	$+54     	;abs 0xd0ae
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d07a:	4f 4b       	mov.b	r11,	r15	
    d07c:	b0 12 8a cc 	call	#0xcc8a	
    d080:	0f 93       	tst	r15		
    d082:	1a 38       	jl	$+54     	;abs 0xd0b8
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d084:	1e 43       	mov	#1,	r14	;r3 As==01
    d086:	0d 4b       	mov	r11,	r13	
    d088:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    d08c:	0d 93       	tst	r13		
    d08e:	03 24       	jz	$+8      	;abs 0xd096
    d090:	0e 5e       	rla	r14		
    d092:	1d 83       	dec	r13		
    d094:	fd 23       	jnz	$-4      	;abs 0xd090

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d096:	0e 93       	tst	r14		
    d098:	0c 38       	jl	$+26     	;abs 0xd0b2

	if(port == 1) {
    d09a:	1f 93       	cmp	#1,	r15	;r3 As==01
    d09c:	03 20       	jnz	$+8      	;abs 0xd0a4
  		P1OUT ^= bit;					// toggle 
    d09e:	c2 ee 21 00 	xor.b	r14,	&0x0021	
    d0a2:	09 3c       	jmp	$+20     	;abs 0xd0b6
	}
	else if(port == 2) {
    d0a4:	2f 93       	cmp	#2,	r15	;r3 As==10
    d0a6:	07 20       	jnz	$+16     	;abs 0xd0b6
  		P2OUT ^= bit;					// toggle           
    d0a8:	c2 ee 29 00 	xor.b	r14,	&0x0029	
    d0ac:	04 3c       	jmp	$+10     	;abs 0xd0b6
int pin_toggle(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT)  { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d0ae:	3f 43       	mov	#-1,	r15	;r3 As==11
    d0b0:	03 3c       	jmp	$+8      	;abs 0xd0b8

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d0b2:	0f 4e       	mov	r14,	r15	
    d0b4:	01 3c       	jmp	$+4      	;abs 0xd0b8
	}
	else if(port == 2) {
  		P2OUT ^= bit;					// toggle           
	}

	return PIN_STAT_OK;
    d0b6:	0f 43       	clr	r15		
}
    d0b8:	3b 41       	pop	r11		
    d0ba:	30 41       	ret			

0000d0bc <pin_digital_read>:

int pin_digital_read(unsigned char pin)
{
    d0bc:	0b 12       	push	r11		
    d0be:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    d0c0:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
    d0c4:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d0c8:	09 24       	jz	$+20     	;abs 0xd0dc
    d0ca:	4f 93       	tst.b	r15		
    d0cc:	07 24       	jz	$+16     	;abs 0xd0dc
    d0ce:	5f 93       	cmp.b	#1,	r15	;r3 As==01
    d0d0:	05 24       	jz	$+12     	;abs 0xd0dc
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
    d0d2:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d0d4:	03 24       	jz	$+8      	;abs 0xd0dc
	   && pf != PIN_FUNCTION_PWM) { 
    d0d6:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d0da:	1f 20       	jnz	$+64     	;abs 0xd11a
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d0dc:	4f 4b       	mov.b	r11,	r15	
    d0de:	b0 12 8a cc 	call	#0xcc8a	
    d0e2:	0f 93       	tst	r15		
    d0e4:	1d 38       	jl	$+60     	;abs 0xd120
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d0e6:	1c 43       	mov	#1,	r12	;r3 As==01
    d0e8:	0d 4b       	mov	r11,	r13	
    d0ea:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    d0ee:	0e 4c       	mov	r12,	r14	
    d0f0:	0d 93       	tst	r13		
    d0f2:	03 24       	jz	$+8      	;abs 0xd0fa
    d0f4:	0e 5e       	rla	r14		
    d0f6:	1d 83       	dec	r13		
    d0f8:	fd 23       	jnz	$-4      	;abs 0xd0f4

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d0fa:	0e 93       	tst	r14		
    d0fc:	10 38       	jl	$+34     	;abs 0xd11e

	if(port == 1) {
    d0fe:	0f 9c       	cmp	r12,	r15	
    d100:	04 20       	jnz	$+10     	;abs 0xd10a
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
    d102:	5d 42 20 00 	mov.b	&0x0020,r13	
    d106:	0d fe       	and	r14,	r13	
    d108:	04 3c       	jmp	$+10     	;abs 0xd112
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
    d10a:	5d 42 28 00 	mov.b	&0x0028,r13	
    d10e:	0d fe       	and	r14,	r13	
    d110:	0f 4c       	mov	r12,	r15	
    d112:	0d 9e       	cmp	r14,	r13	
    d114:	05 24       	jz	$+12     	;abs 0xd120
    d116:	0f 43       	clr	r15		
    d118:	03 3c       	jmp	$+8      	;abs 0xd120
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_INPUT_FLOAT && 
	   pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN
	   && pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d11a:	3f 43       	mov	#-1,	r15	;r3 As==11
    d11c:	01 3c       	jmp	$+4      	;abs 0xd120

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d11e:	0f 4e       	mov	r14,	r15	
	if(port == 1) {
  		return ((P1IN & bit) == bit ? 1 : 0);	// read and return 
	}

	return ((P2IN & bit) == bit ? 1 : 0);	// read and return 
}
    d120:	3b 41       	pop	r11		
    d122:	30 41       	ret			

0000d124 <pin_analog_read>:

int pin_analog_read(unsigned char pin)
{
    d124:	0b 12       	push	r11		
    d126:	4b 4f       	mov.b	r15,	r11	
	unsigned char pf = pin_function(pin);
    d128:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
    d12c:	7f 50 fd ff 	add.b	#-3,	r15	;#0xfffd
    d130:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    d132:	22 2c       	jc	$+70     	;abs 0xd178
		return PIN_STAT_ERR_UNSUPFUNC;
	}

	int s;

	if((s = pin2port(pin)) < 0) return s;
    d134:	4f 4b       	mov.b	r11,	r15	
    d136:	b0 12 8a cc 	call	#0xcc8a	
    d13a:	0f 93       	tst	r15		
    d13c:	1e 38       	jl	$+62     	;abs 0xd17a
	return PIN_STAT_ERR_INVALPORT;
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
    d13e:	4e 4b       	mov.b	r11,	r14	
	int bit 	=  0x01 << bit_num;
    d140:	1f 43       	mov	#1,	r15	;r3 As==01
    d142:	0d 4e       	mov	r14,	r13	
    d144:	3d f0 0f 00 	and	#15,	r13	;#0x000f
    d148:	0d 93       	tst	r13		
    d14a:	03 24       	jz	$+8      	;abs 0xd152
    d14c:	0f 5f       	rla	r15		
    d14e:	1d 83       	dec	r13		
    d150:	fd 23       	jnz	$-4      	;abs 0xd14c
	}

	int s;

	if((s = pin2port(pin)) < 0) return s;
	if((s = pin2bit(pin))  < 0) return s;
    d152:	0f 93       	tst	r15		
    d154:	12 38       	jl	$+38     	;abs 0xd17a

	// configure channel
   	ADC10CTL1 = 0xF000 & (pin << 12); 
    d156:	0f 4e       	mov	r14,	r15	
    d158:	8f 10       	swpb	r15		
    d15a:	0f 5f       	rla	r15		
    d15c:	0f 5f       	rla	r15		
    d15e:	0f 5f       	rla	r15		
    d160:	0f 5f       	rla	r15		
    d162:	82 4f b2 01 	mov	r15,	&0x01b2	

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    d166:	b2 d0 03 00 	bis	#3,	&0x01b0	;#0x0003
    d16a:	b0 01 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY
    d16c:	92 b3 b2 01 	bit	#1,	&0x01b2	;r3 As==01
    d170:	fd 23       	jnz	$-4      	;abs 0xd16c

	return ADC10MEM;
    d172:	1f 42 b4 01 	mov	&0x01b4,r15	
    d176:	01 3c       	jmp	$+4      	;abs 0xd17a
int pin_analog_read(unsigned char pin)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_OUTPUT && pf != PIN_FUNCTION_ANALOG_IN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d178:	3f 43       	mov	#-1,	r15	;r3 As==11

    ADC10CTL0 |= ENC + ADC10SC;             // sample 
    while (ADC10CTL1 & ADC10BUSY);          // wait while ADC10BUSY

	return ADC10MEM;
}
    d17a:	3b 41       	pop	r11		
    d17c:	30 41       	ret			

0000d17e <pin_pulselength_read>:

int pin_pulselength_read(unsigned char pin)
{
    d17e:	0b 12       	push	r11		
    d180:	0a 12       	push	r10		
    d182:	09 12       	push	r9		
    d184:	49 4f       	mov.b	r15,	r9	
	unsigned char pf = pin_function(pin);
    d186:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && 
    d18a:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d18e:	22 2c       	jc	$+70     	;abs 0xd1d4

	int to = 32767;
	int t  = 0;

	// 1. check current state s of pin
	int s  = pin_digital_read(pin); 
    d190:	4f 49       	mov.b	r9,	r15	
    d192:	b0 12 bc d0 	call	#0xd0bc	
    d196:	0b 4f       	mov	r15,	r11	
	
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;
    d198:	0f 93       	tst	r15		
    d19a:	21 38       	jl	$+68     	;abs 0xd1de
    d19c:	0a 43       	clr	r10		

   	while(ds == s) {
		ds = pin_digital_read(pin);
    d19e:	4f 49       	mov.b	r9,	r15	
    d1a0:	b0 12 bc d0 	call	#0xd0bc	
    d1a4:	0e 4f       	mov	r15,	r14	

    	if(ds < 0) return ds;
    d1a6:	0f 93       	tst	r15		
    d1a8:	17 38       	jl	$+48     	;abs 0xd1d8

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    d1aa:	3a 90 ff 7f 	cmp	#32767,	r10	;#0x7fff
    d1ae:	16 24       	jz	$+46     	;abs 0xd1dc
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;

   	while(ds == s) {
    d1b0:	0f 9b       	cmp	r11,	r15	
    d1b2:	02 20       	jnz	$+6      	;abs 0xd1b8
		ds = pin_digital_read(pin);

    	if(ds < 0) return ds;

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    d1b4:	1a 53       	inc	r10		
    d1b6:	f3 3f       	jmp	$-24     	;abs 0xd19e
	// 2. wait until pin toggeles to ~s
    int ds = s;

    if(s < 0) return s;

   	while(ds == s) {
    d1b8:	0a 43       	clr	r10		

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
		ds = pin_digital_read(pin);
    d1ba:	4f 49       	mov.b	r9,	r15	
    d1bc:	b0 12 bc d0 	call	#0xd0bc	
    d1c0:	0e 4f       	mov	r15,	r14	

    	if(ds < 0) return ds;
    d1c2:	0f 93       	tst	r15		
    d1c4:	09 38       	jl	$+20     	;abs 0xd1d8

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    d1c6:	3a 90 ff 7f 	cmp	#32767,	r10	;#0x7fff
    d1ca:	08 24       	jz	$+18     	;abs 0xd1dc
    d1cc:	1a 53       	inc	r10		
	}

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
    d1ce:	0f 9b       	cmp	r11,	r15	
    d1d0:	f4 23       	jnz	$-22     	;abs 0xd1ba
    d1d2:	04 3c       	jmp	$+10     	;abs 0xd1dc
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && 
	   pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d1d4:	3b 43       	mov	#-1,	r11	;r3 As==11
    d1d6:	03 3c       	jmp	$+8      	;abs 0xd1de

	// 3. wait until pin toggles back to s, measure time 
	t = 0;

   	while(ds != s) {
		ds = pin_digital_read(pin);
    d1d8:	0b 4e       	mov	r14,	r11	
    d1da:	01 3c       	jmp	$+4      	;abs 0xd1de

    	if(ds < 0) return ds;

		// if max-t is reached, return (timeout)
		if(t++ == to) return to;
    d1dc:	0b 4a       	mov	r10,	r11	
	}

	return t;
}
    d1de:	0f 4b       	mov	r11,	r15	
    d1e0:	39 41       	pop	r9		
    d1e2:	3a 41       	pop	r10		
    d1e4:	3b 41       	pop	r11		
    d1e6:	30 41       	ret			

0000d1e8 <pin_pwm_function>:

int pin_pwm_function(unsigned char pin, int period)
{
    d1e8:	0b 12       	push	r11		
    d1ea:	0a 12       	push	r10		
    d1ec:	4b 4f       	mov.b	r15,	r11	
    d1ee:	0a 4e       	mov	r14,	r10	
	unsigned char pf = pin_function(pin);
    d1f0:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_PWM) { 
    d1f4:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d1f8:	27 20       	jnz	$+80     	;abs 0xd248
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d1fa:	4f 4b       	mov.b	r11,	r15	
    d1fc:	b0 12 8a cc 	call	#0xcc8a	
    d200:	0f 93       	tst	r15		
    d202:	25 38       	jl	$+76     	;abs 0xd24e
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d204:	1d 43       	mov	#1,	r13	;r3 As==01
    d206:	0c 4b       	mov	r11,	r12	
    d208:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    d20c:	0c 93       	tst	r12		
    d20e:	03 24       	jz	$+8      	;abs 0xd216
    d210:	0d 5d       	rla	r13		
    d212:	1c 83       	dec	r12		
    d214:	fd 23       	jnz	$-4      	;abs 0xd210

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d216:	0d 93       	tst	r13		
    d218:	19 38       	jl	$+52     	;abs 0xd24c
    d21a:	0e 4a       	mov	r10,	r14	
    d21c:	3e 53       	add	#-1,	r14	;r3 As==11

	if(port == 1) {
    d21e:	1f 93       	cmp	#1,	r15	;r3 As==01
    d220:	09 20       	jnz	$+20     	;abs 0xd234
  		TA0CCR0  = period - 1;					// Set period 
    d222:	82 4e 72 01 	mov	r14,	&0x0172	
		TA0CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    d226:	b2 40 e0 00 	mov	#224,	&0x0164	;#0x00e0
    d22a:	64 01 
		TA0CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    d22c:	b2 40 10 02 	mov	#528,	&0x0160	;#0x0210
    d230:	60 01 
    d232:	08 3c       	jmp	$+18     	;abs 0xd244
	}
	else {
  		TA1CCR0  = period - 1;					// Set period 
    d234:	82 4e 92 01 	mov	r14,	&0x0192	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
    d238:	b2 40 e0 00 	mov	#224,	&0x0184	;#0x00e0
    d23c:	84 01 
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
    d23e:	b2 40 10 02 	mov	#528,	&0x0180	;#0x0210
    d242:	80 01 
	}

	return PIN_STAT_OK;
    d244:	0f 43       	clr	r15		
    d246:	03 3c       	jmp	$+8      	;abs 0xd24e
int pin_pwm_function(unsigned char pin, int period)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d248:	3f 43       	mov	#-1,	r15	;r3 As==11
    d24a:	01 3c       	jmp	$+4      	;abs 0xd24e

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d24c:	0f 4d       	mov	r13,	r15	
		TA1CCTL1 = OUTMOD_7;                    // CCR1 reset/set
		TA1CTL   = TASSEL_2 + MC_1;             // SMCLK, up mode
	}

	return PIN_STAT_OK;
}
    d24e:	3a 41       	pop	r10		
    d250:	3b 41       	pop	r11		
    d252:	30 41       	ret			

0000d254 <pin_pwm_control>:

int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
    d254:	0b 12       	push	r11		
    d256:	0a 12       	push	r10		
    d258:	09 12       	push	r9		
    d25a:	4a 4f       	mov.b	r15,	r10	
    d25c:	49 4e       	mov.b	r14,	r9	
	unsigned char pf = pin_function(pin);
    d25e:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_PWM) { 
    d262:	7f 90 05 00 	cmp.b	#5,	r15	;#0x0005
    d266:	56 20       	jnz	$+174    	;abs 0xd314
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d268:	4f 4a       	mov.b	r10,	r15	
    d26a:	b0 12 8a cc 	call	#0xcc8a	
    d26e:	0f 93       	tst	r15		
    d270:	54 38       	jl	$+170    	;abs 0xd31a
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d272:	1d 43       	mov	#1,	r13	;r3 As==01
    d274:	0c 4a       	mov	r10,	r12	
    d276:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    d27a:	0c 93       	tst	r12		
    d27c:	03 24       	jz	$+8      	;abs 0xd284
    d27e:	0d 5d       	rla	r13		
    d280:	1c 83       	dec	r12		
    d282:	fd 23       	jnz	$-4      	;abs 0xd27e

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d284:	0d 93       	tst	r13		
    d286:	48 38       	jl	$+146    	;abs 0xd318
    d288:	49 49       	mov.b	r9,	r9	

	if(port == 1) {
    d28a:	1f 93       	cmp	#1,	r15	;r3 As==01
    d28c:	21 20       	jnz	$+68     	;abs 0xd2d0
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA0CCR1 = (TA0CCR0 / 100) * (duty_cycle / 2.55); 
    d28e:	1c 42 72 01 	mov	&0x0172,r12	
    d292:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    d296:	b0 12 02 e2 	call	#0xe202	
    d29a:	0e 4c       	mov	r12,	r14	
    d29c:	0f 43       	clr	r15		
    d29e:	b0 12 28 dc 	call	#0xdc28	
    d2a2:	0a 4e       	mov	r14,	r10	
    d2a4:	0b 4f       	mov	r15,	r11	
    d2a6:	0e 49       	mov	r9,	r14	
    d2a8:	0f 43       	clr	r15		
    d2aa:	b0 12 fc da 	call	#0xdafc	
    d2ae:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    d2b2:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    d2b6:	b0 12 44 d9 	call	#0xd944	
    d2ba:	0c 4e       	mov	r14,	r12	
    d2bc:	0d 4f       	mov	r15,	r13	
    d2be:	0e 4a       	mov	r10,	r14	
    d2c0:	0f 4b       	mov	r11,	r15	
    d2c2:	b0 12 46 d7 	call	#0xd746	
    d2c6:	b0 12 b2 d3 	call	#0xd3b2	
    d2ca:	82 4e 74 01 	mov	r14,	&0x0174	
    d2ce:	20 3c       	jmp	$+66     	;abs 0xd310
	}
	else {
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
    d2d0:	1c 42 92 01 	mov	&0x0192,r12	
    d2d4:	3a 40 64 00 	mov	#100,	r10	;#0x0064
    d2d8:	b0 12 02 e2 	call	#0xe202	
    d2dc:	0e 4c       	mov	r12,	r14	
    d2de:	0f 43       	clr	r15		
    d2e0:	b0 12 28 dc 	call	#0xdc28	
    d2e4:	0a 4e       	mov	r14,	r10	
    d2e6:	0b 4f       	mov	r15,	r11	
    d2e8:	0e 49       	mov	r9,	r14	
    d2ea:	0f 43       	clr	r15		
    d2ec:	b0 12 fc da 	call	#0xdafc	
    d2f0:	3c 40 33 33 	mov	#13107,	r12	;#0x3333
    d2f4:	3d 40 23 40 	mov	#16419,	r13	;#0x4023
    d2f8:	b0 12 44 d9 	call	#0xd944	
    d2fc:	0c 4e       	mov	r14,	r12	
    d2fe:	0d 4f       	mov	r15,	r13	
    d300:	0e 4a       	mov	r10,	r14	
    d302:	0f 4b       	mov	r11,	r15	
    d304:	b0 12 46 d7 	call	#0xd746	
    d308:	b0 12 b2 d3 	call	#0xd3b2	
    d30c:	82 4e 94 01 	mov	r14,	&0x0194	
	}

	return PIN_STAT_OK;
    d310:	0f 43       	clr	r15		
    d312:	03 3c       	jmp	$+8      	;abs 0xd31a
int pin_pwm_control(unsigned char pin, unsigned char duty_cycle)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_PWM) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d314:	3f 43       	mov	#-1,	r15	;r3 As==11
    d316:	01 3c       	jmp	$+4      	;abs 0xd31a

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d318:	0f 4d       	mov	r13,	r15	
		// e.g. DC=50%: (20000 / 100) * (128 / 2.55) ~ 10000 
		TA1CCR1 = (TA1CCR0 / 100) * (duty_cycle / 2.55); 
	}

	return PIN_STAT_OK;
}
    d31a:	39 41       	pop	r9		
    d31c:	3a 41       	pop	r10		
    d31e:	3b 41       	pop	r11		
    d320:	30 41       	ret			

0000d322 <pin_exti_function>:

int pin_exti_function(unsigned char pin, unsigned char function)
{
    d322:	0b 12       	push	r11		
    d324:	0a 12       	push	r10		
    d326:	4a 4f       	mov.b	r15,	r10	
    d328:	4b 4e       	mov.b	r14,	r11	
	unsigned char pf = pin_function(pin);
    d32a:	b0 12 ea cc 	call	#0xccea	
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
    d32e:	7f 90 03 00 	cmp.b	#3,	r15	;#0x0003
    d332:	39 2c       	jc	$+116    	;abs 0xd3a6
	}

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
    d334:	4f 4a       	mov.b	r10,	r15	
    d336:	b0 12 8a cc 	call	#0xcc8a	
    d33a:	0f 93       	tst	r15		
    d33c:	37 38       	jl	$+112    	;abs 0xd3ac
}

int pin2bit(unsigned char pin) 
{
	int bit_num = (0x0F & pin);
	int bit 	=  0x01 << bit_num;
    d33e:	1d 43       	mov	#1,	r13	;r3 As==01
    d340:	0e 4a       	mov	r10,	r14	
    d342:	3e f0 0f 00 	and	#15,	r14	;#0x000f
    d346:	0e 93       	tst	r14		
    d348:	03 24       	jz	$+8      	;abs 0xd350
    d34a:	0d 5d       	rla	r13		
    d34c:	1e 83       	dec	r14		
    d34e:	fd 23       	jnz	$-4      	;abs 0xd34a

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d350:	0d 93       	tst	r13		
    d352:	2b 38       	jl	$+88     	;abs 0xd3aa

	if(port == 1) {
    d354:	1f 93       	cmp	#1,	r15	;r3 As==01
    d356:	13 20       	jnz	$+40     	;abs 0xd37e
		if(function == PIN_FUNCTION_EXTI_HIGHLOW) {
    d358:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    d35a:	03 20       	jnz	$+8      	;abs 0xd362
    		P1IES |=  bit;		// set mode high-low 
    d35c:	c2 dd 24 00 	bis.b	r13,	&0x0024	
    d360:	02 3c       	jmp	$+6      	;abs 0xd366
		} 
		else {
    		P1IES &= ~bit;		// set mode low-high 
    d362:	c2 cd 24 00 	bic.b	r13,	&0x0024	
		}

 	    P1IFG &= ~bit;			// reset interrupt flag
    d366:	4f 4d       	mov.b	r13,	r15	
    d368:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    d36a:	c2 ff 23 00 	and.b	r15,	&0x0023	

		if(function == PIN_FUNCTION_EXTI_DISABLE) {
    d36e:	4b 93       	tst.b	r11		
    d370:	03 20       	jnz	$+8      	;abs 0xd378
 	    	P1IE  &= ~bit;		// disable interrupt
    d372:	c2 ff 25 00 	and.b	r15,	&0x0025	
    d376:	15 3c       	jmp	$+44     	;abs 0xd3a2
		}
		else {
 	    	P1IE  |=  bit;		// enable interrupt
    d378:	c2 dd 25 00 	bis.b	r13,	&0x0025	
    d37c:	12 3c       	jmp	$+38     	;abs 0xd3a2
		}
	}
	else {
		if(function == PIN_FUNCTION_EXTI_HIGHLOW) {
    d37e:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    d380:	03 20       	jnz	$+8      	;abs 0xd388
    		P2IES |=  bit;		// set mode high-low 
    d382:	c2 dd 2c 00 	bis.b	r13,	&0x002c	
    d386:	02 3c       	jmp	$+6      	;abs 0xd38c
		} 
		else {
    		P2IES &= ~bit;		// set mode low-high 
    d388:	c2 cd 2c 00 	bic.b	r13,	&0x002c	
		}

 	    P2IFG &= ~bit;			// reset interrupt flag
    d38c:	4f 4d       	mov.b	r13,	r15	
    d38e:	7f e3       	xor.b	#-1,	r15	;r3 As==11
    d390:	c2 ff 2b 00 	and.b	r15,	&0x002b	

		if(function == PIN_FUNCTION_EXTI_DISABLE) {
    d394:	4b 93       	tst.b	r11		
    d396:	03 20       	jnz	$+8      	;abs 0xd39e
 	    	P2IE  &= ~bit;		// disable interrupt
    d398:	c2 ff 2d 00 	and.b	r15,	&0x002d	
    d39c:	02 3c       	jmp	$+6      	;abs 0xd3a2
		}
		else {
 	    	P2IE  |=  bit;		// enable interrupt
    d39e:	c2 dd 2d 00 	bis.b	r13,	&0x002d	
		}
	}

	return PIN_STAT_OK;
    d3a2:	0f 43       	clr	r15		
    d3a4:	03 3c       	jmp	$+8      	;abs 0xd3ac
int pin_exti_function(unsigned char pin, unsigned char function)
{
	unsigned char pf = pin_function(pin);
 
	if(pf != PIN_FUNCTION_INPUT_FLOAT && pf != PIN_FUNCTION_INPUT_PULLUP && pf != PIN_FUNCTION_INPUT_PULLDOWN) { 
		return PIN_STAT_ERR_UNSUPFUNC;
    d3a6:	3f 43       	mov	#-1,	r15	;r3 As==11
    d3a8:	01 3c       	jmp	$+4      	;abs 0xd3ac

	int port;
	int bit;

	if((port = pin2port(pin)) < 0) return port;
	if((bit  = pin2bit(pin))  < 0) return bit;
    d3aa:	0f 4d       	mov	r13,	r15	
 	    	P2IE  |=  bit;		// enable interrupt
		}
	}

	return PIN_STAT_OK;
}
    d3ac:	3a 41       	pop	r10		
    d3ae:	3b 41       	pop	r11		
    d3b0:	30 41       	ret			

0000d3b2 <__fixunssfsi>:
    d3b2:	0b 12       	push	r11		
    d3b4:	0a 12       	push	r10		
    d3b6:	0a 4e       	mov	r14,	r10	
    d3b8:	0b 4f       	mov	r15,	r11	
    d3ba:	0c 43       	clr	r12		
    d3bc:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    d3c0:	b0 12 a4 da 	call	#0xdaa4	
    d3c4:	0f 93       	tst	r15		
    d3c6:	07 34       	jge	$+16     	;abs 0xd3d6
    d3c8:	0e 4a       	mov	r10,	r14	
    d3ca:	0f 4b       	mov	r11,	r15	
    d3cc:	b0 12 96 db 	call	#0xdb96	
    d3d0:	3a 41       	pop	r10		
    d3d2:	3b 41       	pop	r11		
    d3d4:	30 41       	ret			
    d3d6:	0c 43       	clr	r12		
    d3d8:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    d3dc:	0e 4a       	mov	r10,	r14	
    d3de:	0f 4b       	mov	r11,	r15	
    d3e0:	b0 12 f2 d6 	call	#0xd6f2	
    d3e4:	b0 12 96 db 	call	#0xdb96	
    d3e8:	0e 53       	add	#0,	r14	;r3 As==00
    d3ea:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    d3ee:	3a 41       	pop	r10		
    d3f0:	3b 41       	pop	r11		
    d3f2:	30 41       	ret			

0000d3f4 <_fpadd_parts>:
    d3f4:	0b 12       	push	r11		
    d3f6:	0a 12       	push	r10		
    d3f8:	09 12       	push	r9		
    d3fa:	08 12       	push	r8		
    d3fc:	07 12       	push	r7		
    d3fe:	06 12       	push	r6		
    d400:	05 12       	push	r5		
    d402:	04 12       	push	r4		
    d404:	31 82       	sub	#8,	r1	;r2 As==11
    d406:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d40a:	06 4d       	mov	r13,	r6	
    d40c:	6b 4f       	mov.b	@r15,	r11	
    d40e:	59 43       	mov.b	#1,	r9	;r3 As==01
    d410:	49 9b       	cmp.b	r11,	r9	
    d412:	aa 2c       	jc	$+342    	;abs 0xd568
    d414:	6c 4e       	mov.b	@r14,	r12	
    d416:	49 9c       	cmp.b	r12,	r9	
    d418:	02 28       	jnc	$+6      	;abs 0xd41e
    d41a:	30 40 2e d6 	br	#0xd62e	
    d41e:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    d420:	02 20       	jnz	$+6      	;abs 0xd426
    d422:	30 40 90 d6 	br	#0xd690	
    d426:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d428:	02 20       	jnz	$+6      	;abs 0xd42e
    d42a:	30 40 2e d6 	br	#0xd62e	
    d42e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d430:	c4 24       	jz	$+394    	;abs 0xd5ba
    d432:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    d434:	02 20       	jnz	$+6      	;abs 0xd43a
    d436:	30 40 2e d6 	br	#0xd62e	
    d43a:	91 4f 02 00 	mov	2(r15),	2(r1)	;0x0002(r15), 0x0002(r1)
    d43e:	02 00 
    d440:	2c 41       	mov	@r1,	r12	
    d442:	1b 4c 02 00 	mov	2(r12),	r11	;0x0002(r12)
    d446:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    d44a:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    d44e:	17 4c 04 00 	mov	4(r12),	r7	;0x0004(r12)
    d452:	18 4c 06 00 	mov	6(r12),	r8	;0x0006(r12)
    d456:	1c 41 02 00 	mov	2(r1),	r12	;0x0002(r1)
    d45a:	0c 8b       	sub	r11,	r12	
    d45c:	09 4c       	mov	r12,	r9	
    d45e:	d9 30       	jn	$+436    	;abs 0xd612
    d460:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    d464:	8b 34       	jge	$+280    	;abs 0xd57c
    d466:	1c 93       	cmp	#1,	r12	;r3 As==01
    d468:	02 34       	jge	$+6      	;abs 0xd46e
    d46a:	30 40 32 d6 	br	#0xd632	
    d46e:	0e 49       	mov	r9,	r14	
    d470:	0a 47       	mov	r7,	r10	
    d472:	0b 48       	mov	r8,	r11	
    d474:	0e 93       	tst	r14		
    d476:	05 24       	jz	$+12     	;abs 0xd482
    d478:	12 c3       	clrc			
    d47a:	0b 10       	rrc	r11		
    d47c:	0a 10       	rrc	r10		
    d47e:	1e 83       	dec	r14		
    d480:	fb 23       	jnz	$-8      	;abs 0xd478
    d482:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    d486:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    d48a:	1c 43       	mov	#1,	r12	;r3 As==01
    d48c:	0d 43       	clr	r13		
    d48e:	0e 49       	mov	r9,	r14	
    d490:	09 4c       	mov	r12,	r9	
    d492:	0a 4d       	mov	r13,	r10	
    d494:	0e 93       	tst	r14		
    d496:	04 24       	jz	$+10     	;abs 0xd4a0
    d498:	09 59       	rla	r9		
    d49a:	0a 6a       	rlc	r10		
    d49c:	1e 83       	dec	r14		
    d49e:	fc 23       	jnz	$-6      	;abs 0xd498
    d4a0:	39 53       	add	#-1,	r9	;r3 As==11
    d4a2:	3a 63       	addc	#-1,	r10	;r3 As==11
    d4a4:	09 f7       	and	r7,	r9	
    d4a6:	0a f8       	and	r8,	r10	
    d4a8:	09 93       	tst	r9		
    d4aa:	b9 24       	jz	$+372    	;abs 0xd61e
    d4ac:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    d4b0:	18 41 06 00 	mov	6(r1),	r8	;0x0006(r1)
    d4b4:	07 dc       	bis	r12,	r7	
    d4b6:	08 dd       	bis	r13,	r8	
    d4b8:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    d4bc:	2c 41       	mov	@r1,	r12	
    d4be:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    d4c2:	67 24       	jz	$+208    	;abs 0xd592
    d4c4:	4f 93       	tst.b	r15		
    d4c6:	9b 24       	jz	$+312    	;abs 0xd5fe
    d4c8:	0c 47       	mov	r7,	r12	
    d4ca:	0d 48       	mov	r8,	r13	
    d4cc:	0c 84       	sub	r4,	r12	
    d4ce:	0d 75       	subc	r5,	r13	
    d4d0:	0d 93       	tst	r13		
    d4d2:	89 34       	jge	$+276    	;abs 0xd5e6
    d4d4:	d6 43 01 00 	mov.b	#1,	1(r6)	;r3 As==01, 0x0001(r6)
    d4d8:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d4dc:	02 00 
    d4de:	0e 4c       	mov	r12,	r14	
    d4e0:	0f 4d       	mov	r13,	r15	
    d4e2:	3e e3       	inv	r14		
    d4e4:	3f e3       	inv	r15		
    d4e6:	1e 53       	inc	r14		
    d4e8:	0f 63       	adc	r15		
    d4ea:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d4ee:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d4f2:	0c 4e       	mov	r14,	r12	
    d4f4:	0d 4f       	mov	r15,	r13	
    d4f6:	3c 53       	add	#-1,	r12	;r3 As==11
    d4f8:	3d 63       	addc	#-1,	r13	;r3 As==11
    d4fa:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d4fe:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d502:	0a 9d       	cmp	r13,	r10	
    d504:	1a 28       	jnc	$+54     	;abs 0xd53a
    d506:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d50a:	8e 24       	jz	$+286    	;abs 0xd628
    d50c:	1b 46 02 00 	mov	2(r6),	r11	;0x0002(r6)
    d510:	3b 53       	add	#-1,	r11	;r3 As==11
    d512:	39 40 fe ff 	mov	#-2,	r9	;#0xfffe
    d516:	3a 40 ff 3f 	mov	#16383,	r10	;#0x3fff
    d51a:	0e 5e       	rla	r14		
    d51c:	0f 6f       	rlc	r15		
    d51e:	08 4b       	mov	r11,	r8	
    d520:	3b 53       	add	#-1,	r11	;r3 As==11
    d522:	0c 4e       	mov	r14,	r12	
    d524:	0d 4f       	mov	r15,	r13	
    d526:	3c 53       	add	#-1,	r12	;r3 As==11
    d528:	3d 63       	addc	#-1,	r13	;r3 As==11
    d52a:	0a 9d       	cmp	r13,	r10	
    d52c:	40 2c       	jc	$+130    	;abs 0xd5ae
    d52e:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d532:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d536:	86 48 02 00 	mov	r8,	2(r6)	;0x0002(r6)
    d53a:	f6 40 03 00 	mov.b	#3,	0(r6)	;#0x0003, 0x0000(r6)
    d53e:	00 00 
    d540:	0f 93       	tst	r15		
    d542:	11 34       	jge	$+36     	;abs 0xd566
    d544:	0c 4e       	mov	r14,	r12	
    d546:	0d 4f       	mov	r15,	r13	
    d548:	1c f3       	and	#1,	r12	;r3 As==01
    d54a:	0d f3       	and	#0,	r13	;r3 As==00
    d54c:	12 c3       	clrc			
    d54e:	0f 10       	rrc	r15		
    d550:	0e 10       	rrc	r14		
    d552:	0a 4c       	mov	r12,	r10	
    d554:	0b 4d       	mov	r13,	r11	
    d556:	0a de       	bis	r14,	r10	
    d558:	0b df       	bis	r15,	r11	
    d55a:	86 4a 04 00 	mov	r10,	4(r6)	;0x0004(r6)
    d55e:	86 4b 06 00 	mov	r11,	6(r6)	;0x0006(r6)
    d562:	96 53 02 00 	inc	2(r6)		;0x0002(r6)
    d566:	0f 46       	mov	r6,	r15	
    d568:	31 52       	add	#8,	r1	;r2 As==11
    d56a:	34 41       	pop	r4		
    d56c:	35 41       	pop	r5		
    d56e:	36 41       	pop	r6		
    d570:	37 41       	pop	r7		
    d572:	38 41       	pop	r8		
    d574:	39 41       	pop	r9		
    d576:	3a 41       	pop	r10		
    d578:	3b 41       	pop	r11		
    d57a:	30 41       	ret			
    d57c:	1b 91 02 00 	cmp	2(r1),	r11	;0x0002(r1)
    d580:	43 34       	jge	$+136    	;abs 0xd608
    d582:	07 43       	clr	r7		
    d584:	08 43       	clr	r8		
    d586:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    d58a:	2c 41       	mov	@r1,	r12	
    d58c:	5f 9c 01 00 	cmp.b	1(r12),	r15	;0x0001(r12)
    d590:	99 23       	jnz	$-204    	;abs 0xd4c4
    d592:	c6 4f 01 00 	mov.b	r15,	1(r6)	;0x0001(r6)
    d596:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d59a:	02 00 
    d59c:	0e 47       	mov	r7,	r14	
    d59e:	0f 48       	mov	r8,	r15	
    d5a0:	0e 54       	add	r4,	r14	
    d5a2:	0f 65       	addc	r5,	r15	
    d5a4:	86 4e 04 00 	mov	r14,	4(r6)	;0x0004(r6)
    d5a8:	86 4f 06 00 	mov	r15,	6(r6)	;0x0006(r6)
    d5ac:	c6 3f       	jmp	$-114    	;abs 0xd53a
    d5ae:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    d5b2:	b3 2b       	jnc	$-152    	;abs 0xd51a
    d5b4:	09 9c       	cmp	r12,	r9	
    d5b6:	b1 2f       	jc	$-156    	;abs 0xd51a
    d5b8:	ba 3f       	jmp	$-138    	;abs 0xd52e
    d5ba:	4b 9c       	cmp.b	r12,	r11	
    d5bc:	d5 23       	jnz	$-84     	;abs 0xd568
    d5be:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    d5c2:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    d5c6:	02 00 
    d5c8:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    d5cc:	04 00 
    d5ce:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    d5d2:	06 00 
    d5d4:	2b 41       	mov	@r1,	r11	
    d5d6:	5a 4b 01 00 	mov.b	1(r11),	r10	;0x0001(r11)
    d5da:	5a ff 01 00 	and.b	1(r15),	r10	;0x0001(r15)
    d5de:	cd 4a 01 00 	mov.b	r10,	1(r13)	;0x0001(r13)
    d5e2:	0f 4d       	mov	r13,	r15	
    d5e4:	c1 3f       	jmp	$-124    	;abs 0xd568
    d5e6:	c6 43 01 00 	mov.b	#0,	1(r6)	;r3 As==00, 0x0001(r6)
    d5ea:	96 41 02 00 	mov	2(r1),	2(r6)	;0x0002(r1), 0x0002(r6)
    d5ee:	02 00 
    d5f0:	0e 4c       	mov	r12,	r14	
    d5f2:	0f 4d       	mov	r13,	r15	
    d5f4:	86 4c 04 00 	mov	r12,	4(r6)	;0x0004(r6)
    d5f8:	86 4d 06 00 	mov	r13,	6(r6)	;0x0006(r6)
    d5fc:	7a 3f       	jmp	$-266    	;abs 0xd4f2
    d5fe:	0c 44       	mov	r4,	r12	
    d600:	0d 45       	mov	r5,	r13	
    d602:	0c 87       	sub	r7,	r12	
    d604:	0d 78       	subc	r8,	r13	
    d606:	64 3f       	jmp	$-310    	;abs 0xd4d0
    d608:	81 4b 02 00 	mov	r11,	2(r1)	;0x0002(r1)
    d60c:	04 43       	clr	r4		
    d60e:	05 43       	clr	r5		
    d610:	53 3f       	jmp	$-344    	;abs 0xd4b8
    d612:	39 e3       	inv	r9		
    d614:	19 53       	inc	r9		
    d616:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    d61a:	b0 37       	jge	$-158    	;abs 0xd57c
    d61c:	24 3f       	jmp	$-438    	;abs 0xd466
    d61e:	0a 93       	tst	r10		
    d620:	45 23       	jnz	$-372    	;abs 0xd4ac
    d622:	0c 43       	clr	r12		
    d624:	0d 43       	clr	r13		
    d626:	42 3f       	jmp	$-378    	;abs 0xd4ac
    d628:	09 9c       	cmp	r12,	r9	
    d62a:	87 2b       	jnc	$-240    	;abs 0xd53a
    d62c:	6f 3f       	jmp	$-288    	;abs 0xd50c
    d62e:	2f 41       	mov	@r1,	r15	
    d630:	9b 3f       	jmp	$-200    	;abs 0xd568
    d632:	0c 93       	tst	r12		
    d634:	41 27       	jz	$-380    	;abs 0xd4b8
    d636:	81 59 02 00 	add	r9,	2(r1)	;0x0002(r1)
    d63a:	0e 49       	mov	r9,	r14	
    d63c:	0b 44       	mov	r4,	r11	
    d63e:	0c 45       	mov	r5,	r12	
    d640:	0e 93       	tst	r14		
    d642:	05 24       	jz	$+12     	;abs 0xd64e
    d644:	12 c3       	clrc			
    d646:	0c 10       	rrc	r12		
    d648:	0b 10       	rrc	r11		
    d64a:	1e 83       	dec	r14		
    d64c:	fb 23       	jnz	$-8      	;abs 0xd644
    d64e:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    d652:	81 4c 06 00 	mov	r12,	6(r1)	;0x0006(r1)
    d656:	1d 43       	mov	#1,	r13	;r3 As==01
    d658:	0e 43       	clr	r14		
    d65a:	0b 4d       	mov	r13,	r11	
    d65c:	0c 4e       	mov	r14,	r12	
    d65e:	09 93       	tst	r9		
    d660:	04 24       	jz	$+10     	;abs 0xd66a
    d662:	0b 5b       	rla	r11		
    d664:	0c 6c       	rlc	r12		
    d666:	19 83       	dec	r9		
    d668:	fc 23       	jnz	$-6      	;abs 0xd662
    d66a:	3b 53       	add	#-1,	r11	;r3 As==11
    d66c:	3c 63       	addc	#-1,	r12	;r3 As==11
    d66e:	0b f4       	and	r4,	r11	
    d670:	0c f5       	and	r5,	r12	
    d672:	0b 93       	tst	r11		
    d674:	08 24       	jz	$+18     	;abs 0xd686
    d676:	14 41 04 00 	mov	4(r1),	r4	;0x0004(r1)
    d67a:	15 41 06 00 	mov	6(r1),	r5	;0x0006(r1)
    d67e:	04 dd       	bis	r13,	r4	
    d680:	05 de       	bis	r14,	r5	
    d682:	30 40 b8 d4 	br	#0xd4b8	
    d686:	0c 93       	tst	r12		
    d688:	f6 23       	jnz	$-18     	;abs 0xd676
    d68a:	0d 43       	clr	r13		
    d68c:	0e 43       	clr	r14		
    d68e:	f3 3f       	jmp	$-24     	;abs 0xd676
    d690:	4c 9b       	cmp.b	r11,	r12	
    d692:	6a 23       	jnz	$-298    	;abs 0xd568
    d694:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    d698:	01 00 
    d69a:	66 27       	jz	$-306    	;abs 0xd568
    d69c:	3f 40 20 dc 	mov	#-9184,	r15	;#0xdc20
    d6a0:	63 3f       	jmp	$-312    	;abs 0xd568

0000d6a2 <__addsf3>:
    d6a2:	0b 12       	push	r11		
    d6a4:	0a 12       	push	r10		
    d6a6:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d6aa:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d6ae:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d6b2:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d6b6:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d6ba:	0b 41       	mov	r1,	r11	
    d6bc:	3b 52       	add	#8,	r11	;r2 As==11
    d6be:	0e 4b       	mov	r11,	r14	
    d6c0:	0f 41       	mov	r1,	r15	
    d6c2:	b0 12 2e df 	call	#0xdf2e	
    d6c6:	0a 41       	mov	r1,	r10	
    d6c8:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d6cc:	0e 4a       	mov	r10,	r14	
    d6ce:	0f 41       	mov	r1,	r15	
    d6d0:	2f 52       	add	#4,	r15	;r2 As==10
    d6d2:	b0 12 2e df 	call	#0xdf2e	
    d6d6:	0d 41       	mov	r1,	r13	
    d6d8:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d6dc:	0e 4a       	mov	r10,	r14	
    d6de:	0f 4b       	mov	r11,	r15	
    d6e0:	b0 12 f4 d3 	call	#0xd3f4	
    d6e4:	b0 12 58 dd 	call	#0xdd58	
    d6e8:	31 50 20 00 	add	#32,	r1	;#0x0020
    d6ec:	3a 41       	pop	r10		
    d6ee:	3b 41       	pop	r11		
    d6f0:	30 41       	ret			

0000d6f2 <__subsf3>:
    d6f2:	0b 12       	push	r11		
    d6f4:	0a 12       	push	r10		
    d6f6:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    d6fa:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d6fe:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d702:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d706:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d70a:	0b 41       	mov	r1,	r11	
    d70c:	3b 52       	add	#8,	r11	;r2 As==11
    d70e:	0e 4b       	mov	r11,	r14	
    d710:	0f 41       	mov	r1,	r15	
    d712:	b0 12 2e df 	call	#0xdf2e	
    d716:	0a 41       	mov	r1,	r10	
    d718:	3a 50 10 00 	add	#16,	r10	;#0x0010
    d71c:	0e 4a       	mov	r10,	r14	
    d71e:	0f 41       	mov	r1,	r15	
    d720:	2f 52       	add	#4,	r15	;r2 As==10
    d722:	b0 12 2e df 	call	#0xdf2e	
    d726:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    d72a:	0d 41       	mov	r1,	r13	
    d72c:	3d 50 18 00 	add	#24,	r13	;#0x0018
    d730:	0e 4a       	mov	r10,	r14	
    d732:	0f 4b       	mov	r11,	r15	
    d734:	b0 12 f4 d3 	call	#0xd3f4	
    d738:	b0 12 58 dd 	call	#0xdd58	
    d73c:	31 50 20 00 	add	#32,	r1	;#0x0020
    d740:	3a 41       	pop	r10		
    d742:	3b 41       	pop	r11		
    d744:	30 41       	ret			

0000d746 <__mulsf3>:
    d746:	0b 12       	push	r11		
    d748:	0a 12       	push	r10		
    d74a:	09 12       	push	r9		
    d74c:	08 12       	push	r8		
    d74e:	07 12       	push	r7		
    d750:	06 12       	push	r6		
    d752:	05 12       	push	r5		
    d754:	04 12       	push	r4		
    d756:	31 50 de ff 	add	#-34,	r1	;#0xffde
    d75a:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d75e:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d762:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d766:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d76a:	08 41       	mov	r1,	r8	
    d76c:	38 52       	add	#8,	r8	;r2 As==11
    d76e:	0e 48       	mov	r8,	r14	
    d770:	0f 41       	mov	r1,	r15	
    d772:	b0 12 2e df 	call	#0xdf2e	
    d776:	06 41       	mov	r1,	r6	
    d778:	36 50 10 00 	add	#16,	r6	;#0x0010
    d77c:	0e 46       	mov	r6,	r14	
    d77e:	0f 41       	mov	r1,	r15	
    d780:	2f 52       	add	#4,	r15	;r2 As==10
    d782:	b0 12 2e df 	call	#0xdf2e	
    d786:	5c 41 08 00 	mov.b	8(r1),	r12	;0x0008(r1)
    d78a:	5d 43       	mov.b	#1,	r13	;r3 As==01
    d78c:	4d 9c       	cmp.b	r12,	r13	
    d78e:	a4 2c       	jc	$+330    	;abs 0xd8d8
    d790:	5a 41 10 00 	mov.b	16(r1),	r10	;0x0010(r1)
    d794:	4d 9a       	cmp.b	r10,	r13	
    d796:	c4 2c       	jc	$+394    	;abs 0xd920
    d798:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d79a:	9c 24       	jz	$+314    	;abs 0xd8d4
    d79c:	6a 92       	cmp.b	#4,	r10	;r2 As==10
    d79e:	02 20       	jnz	$+6      	;abs 0xd7a4
    d7a0:	30 40 3a d9 	br	#0xd93a	
    d7a4:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d7a6:	98 24       	jz	$+306    	;abs 0xd8d8
    d7a8:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d7aa:	ba 24       	jz	$+374    	;abs 0xd920
    d7ac:	14 41 0c 00 	mov	12(r1),	r4	;0x000c(r1)
    d7b0:	91 41 0e 00 	mov	14(r1),	32(r1)	;0x000e(r1), 0x0020(r1)
    d7b4:	20 00 
    d7b6:	1a 41 14 00 	mov	20(r1),	r10	;0x0014(r1)
    d7ba:	1b 41 16 00 	mov	22(r1),	r11	;0x0016(r1)
    d7be:	05 43       	clr	r5		
    d7c0:	0c 43       	clr	r12		
    d7c2:	0d 43       	clr	r13		
    d7c4:	06 4c       	mov	r12,	r6	
    d7c6:	07 4d       	mov	r13,	r7	
    d7c8:	08 4c       	mov	r12,	r8	
    d7ca:	09 4d       	mov	r13,	r9	
    d7cc:	19 3c       	jmp	$+52     	;abs 0xd800
    d7ce:	0e 43       	clr	r14		
    d7d0:	0f 43       	clr	r15		
    d7d2:	0c 5e       	add	r14,	r12	
    d7d4:	0d 6f       	addc	r15,	r13	
    d7d6:	06 56       	rla	r6		
    d7d8:	07 67       	rlc	r7		
    d7da:	0b 93       	tst	r11		
    d7dc:	02 34       	jge	$+6      	;abs 0xd7e2
    d7de:	16 d3       	bis	#1,	r6	;r3 As==01
    d7e0:	07 d3       	bis	#0,	r7	;r3 As==00
    d7e2:	15 53       	inc	r5		
    d7e4:	35 90 20 00 	cmp	#32,	r5	;#0x0020
    d7e8:	1a 24       	jz	$+54     	;abs 0xd81e
    d7ea:	0a 5a       	rla	r10		
    d7ec:	0b 6b       	rlc	r11		
    d7ee:	0e 44       	mov	r4,	r14	
    d7f0:	1f 41 20 00 	mov	32(r1),	r15	;0x0020(r1)
    d7f4:	12 c3       	clrc			
    d7f6:	0f 10       	rrc	r15		
    d7f8:	0e 10       	rrc	r14		
    d7fa:	04 4e       	mov	r14,	r4	
    d7fc:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    d800:	14 b3       	bit	#1,	r4	;r3 As==01
    d802:	e9 27       	jz	$-44     	;abs 0xd7d6
    d804:	08 5a       	add	r10,	r8	
    d806:	09 6b       	addc	r11,	r9	
    d808:	0c 56       	add	r6,	r12	
    d80a:	0d 67       	addc	r7,	r13	
    d80c:	1e 43       	mov	#1,	r14	;r3 As==01
    d80e:	0f 43       	clr	r15		
    d810:	09 9b       	cmp	r11,	r9	
    d812:	df 2b       	jnc	$-64     	;abs 0xd7d2
    d814:	09 9b       	cmp	r11,	r9	
    d816:	db 23       	jnz	$-72     	;abs 0xd7ce
    d818:	08 9a       	cmp	r10,	r8	
    d81a:	db 2b       	jnc	$-72     	;abs 0xd7d2
    d81c:	d8 3f       	jmp	$-78     	;abs 0xd7ce
    d81e:	0a 4d       	mov	r13,	r10	
    d820:	1f 41 12 00 	mov	18(r1),	r15	;0x0012(r1)
    d824:	1f 51 0a 00 	add	10(r1),	r15	;0x000a(r1)
    d828:	0e 4f       	mov	r15,	r14	
    d82a:	2e 53       	incd	r14		
    d82c:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d830:	5e 43       	mov.b	#1,	r14	;r3 As==01
    d832:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d836:	09 00 
    d838:	57 24       	jz	$+176    	;abs 0xd8e8
    d83a:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d83e:	0a 93       	tst	r10		
    d840:	13 34       	jge	$+40     	;abs 0xd868
    d842:	3f 50 03 00 	add	#3,	r15	;#0x0003
    d846:	0a 4f       	mov	r15,	r10	
    d848:	1c b3       	bit	#1,	r12	;r3 As==01
    d84a:	06 24       	jz	$+14     	;abs 0xd858
    d84c:	12 c3       	clrc			
    d84e:	09 10       	rrc	r9		
    d850:	08 10       	rrc	r8		
    d852:	08 d3       	bis	#0,	r8	;r3 As==00
    d854:	39 d0 00 80 	bis	#-32768,r9	;#0x8000
    d858:	12 c3       	clrc			
    d85a:	0d 10       	rrc	r13		
    d85c:	0c 10       	rrc	r12		
    d85e:	1f 53       	inc	r15		
    d860:	0d 93       	tst	r13		
    d862:	f1 3b       	jl	$-28     	;abs 0xd846
    d864:	81 4a 1a 00 	mov	r10,	26(r1)	;0x001a(r1)
    d868:	3a 43       	mov	#-1,	r10	;r3 As==11
    d86a:	3b 40 ff 3f 	mov	#16383,	r11	;#0x3fff
    d86e:	0b 9d       	cmp	r13,	r11	
    d870:	12 28       	jnc	$+38     	;abs 0xd896
    d872:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    d876:	3f 53       	add	#-1,	r15	;r3 As==11
    d878:	0a 4b       	mov	r11,	r10	
    d87a:	0e 4f       	mov	r15,	r14	
    d87c:	0c 5c       	rla	r12		
    d87e:	0d 6d       	rlc	r13		
    d880:	09 93       	tst	r9		
    d882:	02 34       	jge	$+6      	;abs 0xd888
    d884:	1c d3       	bis	#1,	r12	;r3 As==01
    d886:	0d d3       	bis	#0,	r13	;r3 As==00
    d888:	08 58       	rla	r8		
    d88a:	09 69       	rlc	r9		
    d88c:	3f 53       	add	#-1,	r15	;r3 As==11
    d88e:	0a 9d       	cmp	r13,	r10	
    d890:	f4 2f       	jc	$-22     	;abs 0xd87a
    d892:	81 4e 1a 00 	mov	r14,	26(r1)	;0x001a(r1)
    d896:	0e 4c       	mov	r12,	r14	
    d898:	0f 4d       	mov	r13,	r15	
    d89a:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    d89e:	0f f3       	and	#0,	r15	;r3 As==00
    d8a0:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    d8a4:	27 24       	jz	$+80     	;abs 0xd8f4
    d8a6:	81 4c 1c 00 	mov	r12,	28(r1)	;0x001c(r1)
    d8aa:	81 4d 1e 00 	mov	r13,	30(r1)	;0x001e(r1)
    d8ae:	f1 40 03 00 	mov.b	#3,	24(r1)	;#0x0003, 0x0018(r1)
    d8b2:	18 00 
    d8b4:	0f 41       	mov	r1,	r15	
    d8b6:	3f 50 18 00 	add	#24,	r15	;#0x0018
    d8ba:	b0 12 58 dd 	call	#0xdd58	
    d8be:	31 50 22 00 	add	#34,	r1	;#0x0022
    d8c2:	34 41       	pop	r4		
    d8c4:	35 41       	pop	r5		
    d8c6:	36 41       	pop	r6		
    d8c8:	37 41       	pop	r7		
    d8ca:	38 41       	pop	r8		
    d8cc:	39 41       	pop	r9		
    d8ce:	3a 41       	pop	r10		
    d8d0:	3b 41       	pop	r11		
    d8d2:	30 41       	ret			
    d8d4:	6a 93       	cmp.b	#2,	r10	;r3 As==10
    d8d6:	33 24       	jz	$+104    	;abs 0xd93e
    d8d8:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d8dc:	09 00 
    d8de:	1e 24       	jz	$+62     	;abs 0xd91c
    d8e0:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    d8e4:	0f 48       	mov	r8,	r15	
    d8e6:	e9 3f       	jmp	$-44     	;abs 0xd8ba
    d8e8:	4e 43       	clr.b	r14		
    d8ea:	c1 4e 19 00 	mov.b	r14,	25(r1)	;0x0019(r1)
    d8ee:	0a 93       	tst	r10		
    d8f0:	bb 37       	jge	$-136    	;abs 0xd868
    d8f2:	a7 3f       	jmp	$-176    	;abs 0xd842
    d8f4:	0f 93       	tst	r15		
    d8f6:	d7 23       	jnz	$-80     	;abs 0xd8a6
    d8f8:	0e 4c       	mov	r12,	r14	
    d8fa:	0f 4d       	mov	r13,	r15	
    d8fc:	3e f0 80 00 	and	#128,	r14	;#0x0080
    d900:	0f f3       	and	#0,	r15	;r3 As==00
    d902:	0e 93       	tst	r14		
    d904:	d0 23       	jnz	$-94     	;abs 0xd8a6
    d906:	0f 93       	tst	r15		
    d908:	ce 23       	jnz	$-98     	;abs 0xd8a6
    d90a:	08 93       	tst	r8		
    d90c:	13 24       	jz	$+40     	;abs 0xd934
    d90e:	3c 50 40 00 	add	#64,	r12	;#0x0040
    d912:	0d 63       	adc	r13		
    d914:	3c f0 80 ff 	and	#-128,	r12	;#0xff80
    d918:	3d f3       	and	#-1,	r13	;r3 As==11
    d91a:	c5 3f       	jmp	$-116    	;abs 0xd8a6
    d91c:	4d 43       	clr.b	r13		
    d91e:	e0 3f       	jmp	$-62     	;abs 0xd8e0
    d920:	d1 91 11 00 	cmp.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d924:	09 00 
    d926:	04 24       	jz	$+10     	;abs 0xd930
    d928:	c1 4d 11 00 	mov.b	r13,	17(r1)	;0x0011(r1)
    d92c:	0f 46       	mov	r6,	r15	
    d92e:	c5 3f       	jmp	$-116    	;abs 0xd8ba
    d930:	4d 43       	clr.b	r13		
    d932:	fa 3f       	jmp	$-10     	;abs 0xd928
    d934:	09 93       	tst	r9		
    d936:	eb 23       	jnz	$-40     	;abs 0xd90e
    d938:	b6 3f       	jmp	$-146    	;abs 0xd8a6
    d93a:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d93c:	f1 23       	jnz	$-28     	;abs 0xd920
    d93e:	3f 40 20 dc 	mov	#-9184,	r15	;#0xdc20
    d942:	bb 3f       	jmp	$-136    	;abs 0xd8ba

0000d944 <__divsf3>:
    d944:	0b 12       	push	r11		
    d946:	0a 12       	push	r10		
    d948:	09 12       	push	r9		
    d94a:	08 12       	push	r8		
    d94c:	07 12       	push	r7		
    d94e:	06 12       	push	r6		
    d950:	05 12       	push	r5		
    d952:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    d956:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    d95a:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    d95e:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    d962:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    d966:	05 41       	mov	r1,	r5	
    d968:	35 52       	add	#8,	r5	;r2 As==11
    d96a:	0e 45       	mov	r5,	r14	
    d96c:	0f 41       	mov	r1,	r15	
    d96e:	b0 12 2e df 	call	#0xdf2e	
    d972:	09 41       	mov	r1,	r9	
    d974:	39 50 10 00 	add	#16,	r9	;#0x0010
    d978:	0e 49       	mov	r9,	r14	
    d97a:	0f 41       	mov	r1,	r15	
    d97c:	2f 52       	add	#4,	r15	;r2 As==10
    d97e:	b0 12 2e df 	call	#0xdf2e	
    d982:	5d 41 08 00 	mov.b	8(r1),	r13	;0x0008(r1)
    d986:	5b 43       	mov.b	#1,	r11	;r3 As==01
    d988:	4b 9d       	cmp.b	r13,	r11	
    d98a:	64 2c       	jc	$+202    	;abs 0xda54
    d98c:	5c 41 10 00 	mov.b	16(r1),	r12	;0x0010(r1)
    d990:	4b 9c       	cmp.b	r12,	r11	
    d992:	86 2c       	jc	$+270    	;abs 0xdaa0
    d994:	d1 e1 11 00 	xor.b	17(r1),	9(r1)	;0x0011(r1), 0x0009(r1)
    d998:	09 00 
    d99a:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    d99c:	5d 24       	jz	$+188    	;abs 0xda58
    d99e:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    d9a0:	5b 24       	jz	$+184    	;abs 0xda58
    d9a2:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    d9a4:	75 24       	jz	$+236    	;abs 0xda90
    d9a6:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    d9a8:	53 24       	jz	$+168    	;abs 0xda50
    d9aa:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    d9ae:	1f 81 12 00 	sub	18(r1),	r15	;0x0012(r1)
    d9b2:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d9b6:	1d 41 0c 00 	mov	12(r1),	r13	;0x000c(r1)
    d9ba:	1e 41 0e 00 	mov	14(r1),	r14	;0x000e(r1)
    d9be:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    d9c2:	18 41 16 00 	mov	22(r1),	r8	;0x0016(r1)
    d9c6:	0e 98       	cmp	r8,	r14	
    d9c8:	3e 2c       	jc	$+126    	;abs 0xda46
    d9ca:	0d 5d       	rla	r13		
    d9cc:	0e 6e       	rlc	r14		
    d9ce:	3f 53       	add	#-1,	r15	;r3 As==11
    d9d0:	81 4f 0a 00 	mov	r15,	10(r1)	;0x000a(r1)
    d9d4:	36 40 1f 00 	mov	#31,	r6	;#0x001f
    d9d8:	0b 43       	clr	r11		
    d9da:	3c 40 00 40 	mov	#16384,	r12	;#0x4000
    d9de:	09 43       	clr	r9		
    d9e0:	0a 43       	clr	r10		
    d9e2:	0b 3c       	jmp	$+24     	;abs 0xd9fa
    d9e4:	09 db       	bis	r11,	r9	
    d9e6:	0a dc       	bis	r12,	r10	
    d9e8:	0d 87       	sub	r7,	r13	
    d9ea:	0e 78       	subc	r8,	r14	
    d9ec:	12 c3       	clrc			
    d9ee:	0c 10       	rrc	r12		
    d9f0:	0b 10       	rrc	r11		
    d9f2:	0d 5d       	rla	r13		
    d9f4:	0e 6e       	rlc	r14		
    d9f6:	36 53       	add	#-1,	r6	;r3 As==11
    d9f8:	0d 24       	jz	$+28     	;abs 0xda14
    d9fa:	0e 98       	cmp	r8,	r14	
    d9fc:	f7 2b       	jnc	$-16     	;abs 0xd9ec
    d9fe:	0e 98       	cmp	r8,	r14	
    da00:	f1 23       	jnz	$-28     	;abs 0xd9e4
    da02:	0d 97       	cmp	r7,	r13	
    da04:	ef 2f       	jc	$-32     	;abs 0xd9e4
    da06:	12 c3       	clrc			
    da08:	0c 10       	rrc	r12		
    da0a:	0b 10       	rrc	r11		
    da0c:	0d 5d       	rla	r13		
    da0e:	0e 6e       	rlc	r14		
    da10:	36 53       	add	#-1,	r6	;r3 As==11
    da12:	f3 23       	jnz	$-24     	;abs 0xd9fa
    da14:	0b 49       	mov	r9,	r11	
    da16:	0c 4a       	mov	r10,	r12	
    da18:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    da1c:	0c f3       	and	#0,	r12	;r3 As==00
    da1e:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    da22:	1f 24       	jz	$+64     	;abs 0xda62
    da24:	81 49 0c 00 	mov	r9,	12(r1)	;0x000c(r1)
    da28:	81 4a 0e 00 	mov	r10,	14(r1)	;0x000e(r1)
    da2c:	0f 45       	mov	r5,	r15	
    da2e:	b0 12 58 dd 	call	#0xdd58	
    da32:	31 50 18 00 	add	#24,	r1	;#0x0018
    da36:	35 41       	pop	r5		
    da38:	36 41       	pop	r6		
    da3a:	37 41       	pop	r7		
    da3c:	38 41       	pop	r8		
    da3e:	39 41       	pop	r9		
    da40:	3a 41       	pop	r10		
    da42:	3b 41       	pop	r11		
    da44:	30 41       	ret			
    da46:	08 9e       	cmp	r14,	r8	
    da48:	c5 2b       	jnc	$-116    	;abs 0xd9d4
    da4a:	0d 97       	cmp	r7,	r13	
    da4c:	c3 2f       	jc	$-120    	;abs 0xd9d4
    da4e:	bd 3f       	jmp	$-132    	;abs 0xd9ca
    da50:	e1 42 08 00 	mov.b	#4,	8(r1)	;r2 As==10, 0x0008(r1)
    da54:	0f 45       	mov	r5,	r15	
    da56:	eb 3f       	jmp	$-40     	;abs 0xda2e
    da58:	4d 9c       	cmp.b	r12,	r13	
    da5a:	fc 23       	jnz	$-6      	;abs 0xda54
    da5c:	3f 40 20 dc 	mov	#-9184,	r15	;#0xdc20
    da60:	e6 3f       	jmp	$-50     	;abs 0xda2e
    da62:	0c 93       	tst	r12		
    da64:	df 23       	jnz	$-64     	;abs 0xda24
    da66:	0b 49       	mov	r9,	r11	
    da68:	0c 4a       	mov	r10,	r12	
    da6a:	3b f0 80 00 	and	#128,	r11	;#0x0080
    da6e:	0c f3       	and	#0,	r12	;r3 As==00
    da70:	0b 93       	tst	r11		
    da72:	d8 23       	jnz	$-78     	;abs 0xda24
    da74:	0c 93       	tst	r12		
    da76:	d6 23       	jnz	$-82     	;abs 0xda24
    da78:	0d 93       	tst	r13		
    da7a:	07 24       	jz	$+16     	;abs 0xda8a
    da7c:	39 50 40 00 	add	#64,	r9	;#0x0040
    da80:	0a 63       	adc	r10		
    da82:	39 f0 80 ff 	and	#-128,	r9	;#0xff80
    da86:	3a f3       	and	#-1,	r10	;r3 As==11
    da88:	cd 3f       	jmp	$-100    	;abs 0xda24
    da8a:	0e 93       	tst	r14		
    da8c:	f7 23       	jnz	$-16     	;abs 0xda7c
    da8e:	ca 3f       	jmp	$-106    	;abs 0xda24
    da90:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c(r1)
    da94:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e(r1)
    da98:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a(r1)
    da9c:	0f 45       	mov	r5,	r15	
    da9e:	c7 3f       	jmp	$-112    	;abs 0xda2e
    daa0:	0f 49       	mov	r9,	r15	
    daa2:	c5 3f       	jmp	$-116    	;abs 0xda2e

0000daa4 <__gesf2>:
    daa4:	0b 12       	push	r11		
    daa6:	0a 12       	push	r10		
    daa8:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    daac:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    dab0:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    dab4:	81 4c 04 00 	mov	r12,	4(r1)	;0x0004(r1)
    dab8:	81 4d 06 00 	mov	r13,	6(r1)	;0x0006(r1)
    dabc:	0b 41       	mov	r1,	r11	
    dabe:	3b 52       	add	#8,	r11	;r2 As==11
    dac0:	0e 4b       	mov	r11,	r14	
    dac2:	0f 41       	mov	r1,	r15	
    dac4:	b0 12 2e df 	call	#0xdf2e	
    dac8:	0a 41       	mov	r1,	r10	
    daca:	3a 50 10 00 	add	#16,	r10	;#0x0010
    dace:	0e 4a       	mov	r10,	r14	
    dad0:	0f 41       	mov	r1,	r15	
    dad2:	2f 52       	add	#4,	r15	;r2 As==10
    dad4:	b0 12 2e df 	call	#0xdf2e	
    dad8:	5d 43       	mov.b	#1,	r13	;r3 As==01
    dada:	5d 91 08 00 	cmp.b	8(r1),	r13	;0x0008(r1)
    dade:	0c 2c       	jc	$+26     	;abs 0xdaf8
    dae0:	5d 91 10 00 	cmp.b	16(r1),	r13	;0x0010(r1)
    dae4:	09 2c       	jc	$+20     	;abs 0xdaf8
    dae6:	0e 4a       	mov	r10,	r14	
    dae8:	0f 4b       	mov	r11,	r15	
    daea:	b0 12 60 e0 	call	#0xe060	
    daee:	31 50 18 00 	add	#24,	r1	;#0x0018
    daf2:	3a 41       	pop	r10		
    daf4:	3b 41       	pop	r11		
    daf6:	30 41       	ret			
    daf8:	3f 43       	mov	#-1,	r15	;r3 As==11
    dafa:	f9 3f       	jmp	$-12     	;abs 0xdaee

0000dafc <__floatsisf>:
    dafc:	0b 12       	push	r11		
    dafe:	0a 12       	push	r10		
    db00:	31 82       	sub	#8,	r1	;r2 As==11
    db02:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    db06:	00 00 
    db08:	0d 4f       	mov	r15,	r13	
    db0a:	0d 5d       	rla	r13		
    db0c:	0d 43       	clr	r13		
    db0e:	0d 6d       	rlc	r13		
    db10:	4c 4d       	mov.b	r13,	r12	
    db12:	c1 4d 01 00 	mov.b	r13,	1(r1)	;0x0001(r1)
    db16:	0e 93       	tst	r14		
    db18:	32 24       	jz	$+102    	;abs 0xdb7e
    db1a:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    db1e:	02 00 
    db20:	4c 93       	tst.b	r12		
    db22:	24 20       	jnz	$+74     	;abs 0xdb6c
    db24:	0a 4e       	mov	r14,	r10	
    db26:	0b 4f       	mov	r15,	r11	
    db28:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    db2c:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    db30:	0e 4a       	mov	r10,	r14	
    db32:	0f 4b       	mov	r11,	r15	
    db34:	b0 12 00 dd 	call	#0xdd00	
    db38:	3f 53       	add	#-1,	r15	;r3 As==11
    db3a:	1f 93       	cmp	#1,	r15	;r3 As==01
    db3c:	10 38       	jl	$+34     	;abs 0xdb5e
    db3e:	0e 4f       	mov	r15,	r14	
    db40:	0e 93       	tst	r14		
    db42:	04 24       	jz	$+10     	;abs 0xdb4c
    db44:	0a 5a       	rla	r10		
    db46:	0b 6b       	rlc	r11		
    db48:	1e 83       	dec	r14		
    db4a:	fc 23       	jnz	$-6      	;abs 0xdb44
    db4c:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    db50:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    db54:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    db58:	0e 8f       	sub	r15,	r14	
    db5a:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    db5e:	0f 41       	mov	r1,	r15	
    db60:	b0 12 58 dd 	call	#0xdd58	
    db64:	31 52       	add	#8,	r1	;r2 As==11
    db66:	3a 41       	pop	r10		
    db68:	3b 41       	pop	r11		
    db6a:	30 41       	ret			
    db6c:	0e 93       	tst	r14		
    db6e:	0c 24       	jz	$+26     	;abs 0xdb88
    db70:	0a 4e       	mov	r14,	r10	
    db72:	0b 4f       	mov	r15,	r11	
    db74:	3a e3       	inv	r10		
    db76:	3b e3       	inv	r11		
    db78:	1a 53       	inc	r10		
    db7a:	0b 63       	adc	r11		
    db7c:	d5 3f       	jmp	$-84     	;abs 0xdb28
    db7e:	0f 93       	tst	r15		
    db80:	cc 23       	jnz	$-102    	;abs 0xdb1a
    db82:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    db86:	eb 3f       	jmp	$-40     	;abs 0xdb5e
    db88:	3f 90 00 80 	cmp	#-32768,r15	;#0x8000
    db8c:	f1 23       	jnz	$-28     	;abs 0xdb70
    db8e:	0e 43       	clr	r14		
    db90:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    db94:	e7 3f       	jmp	$-48     	;abs 0xdb64

0000db96 <__fixsfsi>:
    db96:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    db9a:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    db9e:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    dba2:	0e 41       	mov	r1,	r14	
    dba4:	2e 52       	add	#4,	r14	;r2 As==10
    dba6:	0f 41       	mov	r1,	r15	
    dba8:	b0 12 2e df 	call	#0xdf2e	
    dbac:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    dbb0:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    dbb2:	2b 24       	jz	$+88     	;abs 0xdc0a
    dbb4:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    dbb6:	29 28       	jnc	$+84     	;abs 0xdc0a
    dbb8:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    dbba:	08 24       	jz	$+18     	;abs 0xdbcc
    dbbc:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    dbc0:	0d 93       	tst	r13		
    dbc2:	23 38       	jl	$+72     	;abs 0xdc0a
    dbc4:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    dbc8:	0c 9d       	cmp	r13,	r12	
    dbca:	09 34       	jge	$+20     	;abs 0xdbde
    dbcc:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    dbd0:	21 20       	jnz	$+68     	;abs 0xdc14
    dbd2:	3e 43       	mov	#-1,	r14	;r3 As==11
    dbd4:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    dbd8:	31 50 0c 00 	add	#12,	r1	;#0x000c
    dbdc:	30 41       	ret			
    dbde:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    dbe2:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    dbe6:	0c 8d       	sub	r13,	r12	
    dbe8:	0c 93       	tst	r12		
    dbea:	05 24       	jz	$+12     	;abs 0xdbf6
    dbec:	12 c3       	clrc			
    dbee:	0f 10       	rrc	r15		
    dbf0:	0e 10       	rrc	r14		
    dbf2:	1c 83       	dec	r12		
    dbf4:	fb 23       	jnz	$-8      	;abs 0xdbec
    dbf6:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    dbfa:	ee 27       	jz	$-34     	;abs 0xdbd8
    dbfc:	3e e3       	inv	r14		
    dbfe:	3f e3       	inv	r15		
    dc00:	1e 53       	inc	r14		
    dc02:	0f 63       	adc	r15		
    dc04:	31 50 0c 00 	add	#12,	r1	;#0x000c
    dc08:	30 41       	ret			
    dc0a:	0e 43       	clr	r14		
    dc0c:	0f 43       	clr	r15		
    dc0e:	31 50 0c 00 	add	#12,	r1	;#0x000c
    dc12:	30 41       	ret			
    dc14:	0e 43       	clr	r14		
    dc16:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    dc1a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    dc1e:	30 41       	ret			

0000dc20 <__thenan_sf>:
	...

0000dc28 <__floatunsisf>:
    dc28:	0b 12       	push	r11		
    dc2a:	0a 12       	push	r10		
    dc2c:	09 12       	push	r9		
    dc2e:	08 12       	push	r8		
    dc30:	07 12       	push	r7		
    dc32:	31 82       	sub	#8,	r1	;r2 As==11
    dc34:	0a 4e       	mov	r14,	r10	
    dc36:	0b 4f       	mov	r15,	r11	
    dc38:	c1 43 01 00 	mov.b	#0,	1(r1)	;r3 As==00, 0x0001(r1)
    dc3c:	0e 93       	tst	r14		
    dc3e:	2d 24       	jz	$+92     	;abs 0xdc9a
    dc40:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    dc44:	00 00 
    dc46:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    dc4a:	02 00 
    dc4c:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    dc50:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    dc54:	0e 4a       	mov	r10,	r14	
    dc56:	0f 4b       	mov	r11,	r15	
    dc58:	b0 12 00 dd 	call	#0xdd00	
    dc5c:	0d 4f       	mov	r15,	r13	
    dc5e:	3d 53       	add	#-1,	r13	;r3 As==11
    dc60:	21 30       	jn	$+68     	;abs 0xdca4
    dc62:	0d 93       	tst	r13		
    dc64:	10 24       	jz	$+34     	;abs 0xdc86
    dc66:	0f 4d       	mov	r13,	r15	
    dc68:	0f 93       	tst	r15		
    dc6a:	04 24       	jz	$+10     	;abs 0xdc74
    dc6c:	0a 5a       	rla	r10		
    dc6e:	0b 6b       	rlc	r11		
    dc70:	1f 83       	dec	r15		
    dc72:	fc 23       	jnz	$-6      	;abs 0xdc6c
    dc74:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    dc78:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    dc7c:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    dc80:	0f 8d       	sub	r13,	r15	
    dc82:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    dc86:	0f 41       	mov	r1,	r15	
    dc88:	b0 12 58 dd 	call	#0xdd58	
    dc8c:	31 52       	add	#8,	r1	;r2 As==11
    dc8e:	37 41       	pop	r7		
    dc90:	38 41       	pop	r8		
    dc92:	39 41       	pop	r9		
    dc94:	3a 41       	pop	r10		
    dc96:	3b 41       	pop	r11		
    dc98:	30 41       	ret			
    dc9a:	0b 93       	tst	r11		
    dc9c:	d1 23       	jnz	$-92     	;abs 0xdc40
    dc9e:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    dca2:	f1 3f       	jmp	$-28     	;abs 0xdc86
    dca4:	0c 4d       	mov	r13,	r12	
    dca6:	3c e3       	inv	r12		
    dca8:	1c 53       	inc	r12		
    dcaa:	18 43       	mov	#1,	r8	;r3 As==01
    dcac:	09 43       	clr	r9		
    dcae:	07 4c       	mov	r12,	r7	
    dcb0:	0e 48       	mov	r8,	r14	
    dcb2:	0f 49       	mov	r9,	r15	
    dcb4:	07 93       	tst	r7		
    dcb6:	04 24       	jz	$+10     	;abs 0xdcc0
    dcb8:	0e 5e       	rla	r14		
    dcba:	0f 6f       	rlc	r15		
    dcbc:	17 83       	dec	r7		
    dcbe:	fc 23       	jnz	$-6      	;abs 0xdcb8
    dcc0:	3e 53       	add	#-1,	r14	;r3 As==11
    dcc2:	3f 63       	addc	#-1,	r15	;r3 As==11
    dcc4:	0e fa       	and	r10,	r14	
    dcc6:	0f fb       	and	r11,	r15	
    dcc8:	0e 93       	tst	r14		
    dcca:	15 24       	jz	$+44     	;abs 0xdcf6
    dccc:	0c 93       	tst	r12		
    dcce:	05 24       	jz	$+12     	;abs 0xdcda
    dcd0:	12 c3       	clrc			
    dcd2:	0b 10       	rrc	r11		
    dcd4:	0a 10       	rrc	r10		
    dcd6:	1c 83       	dec	r12		
    dcd8:	fb 23       	jnz	$-8      	;abs 0xdcd0
    dcda:	0e 48       	mov	r8,	r14	
    dcdc:	0f 49       	mov	r9,	r15	
    dcde:	0e da       	bis	r10,	r14	
    dce0:	0f db       	bis	r11,	r15	
    dce2:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    dce6:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    dcea:	3f 40 1e 00 	mov	#30,	r15	;#0x001e
    dcee:	0f 8d       	sub	r13,	r15	
    dcf0:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    dcf4:	c8 3f       	jmp	$-110    	;abs 0xdc86
    dcf6:	0f 93       	tst	r15		
    dcf8:	e9 23       	jnz	$-44     	;abs 0xdccc
    dcfa:	08 43       	clr	r8		
    dcfc:	09 43       	clr	r9		
    dcfe:	e6 3f       	jmp	$-50     	;abs 0xdccc

0000dd00 <__clzsi2>:
    dd00:	0b 12       	push	r11		
    dd02:	0f 93       	tst	r15		
    dd04:	16 20       	jnz	$+46     	;abs 0xdd32
    dd06:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    dd0a:	21 28       	jnc	$+68     	;abs 0xdd4e
    dd0c:	3b 40 18 00 	mov	#24,	r11	;#0x0018
    dd10:	0c 43       	clr	r12		
    dd12:	3d 42       	mov	#8,	r13	;r2 As==11
    dd14:	0d 93       	tst	r13		
    dd16:	05 24       	jz	$+12     	;abs 0xdd22
    dd18:	12 c3       	clrc			
    dd1a:	0f 10       	rrc	r15		
    dd1c:	0e 10       	rrc	r14		
    dd1e:	1d 83       	dec	r13		
    dd20:	fb 23       	jnz	$-8      	;abs 0xdd18
    dd22:	0f 4e       	mov	r14,	r15	
    dd24:	3f 50 02 e1 	add	#-7934,	r15	;#0xe102
    dd28:	6d 4f       	mov.b	@r15,	r13	
    dd2a:	0f 4b       	mov	r11,	r15	
    dd2c:	0f 8d       	sub	r13,	r15	
    dd2e:	3b 41       	pop	r11		
    dd30:	30 41       	ret			
    dd32:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    dd36:	05 28       	jnc	$+12     	;abs 0xdd42
    dd38:	3b 42       	mov	#8,	r11	;r2 As==11
    dd3a:	0c 43       	clr	r12		
    dd3c:	3d 40 18 00 	mov	#24,	r13	;#0x0018
    dd40:	e9 3f       	jmp	$-44     	;abs 0xdd14
    dd42:	3b 40 10 00 	mov	#16,	r11	;#0x0010
    dd46:	0c 43       	clr	r12		
    dd48:	3d 40 10 00 	mov	#16,	r13	;#0x0010
    dd4c:	e3 3f       	jmp	$-56     	;abs 0xdd14
    dd4e:	3b 40 20 00 	mov	#32,	r11	;#0x0020
    dd52:	0c 43       	clr	r12		
    dd54:	0d 43       	clr	r13		
    dd56:	de 3f       	jmp	$-66     	;abs 0xdd14

0000dd58 <__pack_f>:
    dd58:	0b 12       	push	r11		
    dd5a:	0a 12       	push	r10		
    dd5c:	09 12       	push	r9		
    dd5e:	08 12       	push	r8		
    dd60:	07 12       	push	r7		
    dd62:	06 12       	push	r6		
    dd64:	1d 4f 04 00 	mov	4(r15),	r13	;0x0004(r15)
    dd68:	1e 4f 06 00 	mov	6(r15),	r14	;0x0006(r15)
    dd6c:	5a 4f 01 00 	mov.b	1(r15),	r10	;0x0001(r15)
    dd70:	6c 4f       	mov.b	@r15,	r12	
    dd72:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    dd74:	bc 28       	jnc	$+378    	;abs 0xdeee
    dd76:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    dd78:	b6 24       	jz	$+366    	;abs 0xdee6
    dd7a:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    dd7c:	32 24       	jz	$+102    	;abs 0xdde2
    dd7e:	0d 93       	tst	r13		
    dd80:	2e 24       	jz	$+94     	;abs 0xddde
    dd82:	1f 4f 02 00 	mov	2(r15),	r15	;0x0002(r15)
    dd86:	3f 90 82 ff 	cmp	#-126,	r15	;#0xff82
    dd8a:	61 38       	jl	$+196    	;abs 0xde4e
    dd8c:	3f 90 80 00 	cmp	#128,	r15	;#0x0080
    dd90:	aa 34       	jge	$+342    	;abs 0xdee6
    dd92:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    dd96:	0b 4d       	mov	r13,	r11	
    dd98:	0c 4e       	mov	r14,	r12	
    dd9a:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    dd9e:	0c f3       	and	#0,	r12	;r3 As==00
    dda0:	3b 90 40 00 	cmp	#64,	r11	;#0x0040
    dda4:	47 24       	jz	$+144    	;abs 0xde34
    dda6:	3d 50 3f 00 	add	#63,	r13	;#0x003f
    ddaa:	0e 63       	adc	r14		
    ddac:	0e 93       	tst	r14		
    ddae:	04 34       	jge	$+10     	;abs 0xddb8
    ddb0:	12 c3       	clrc			
    ddb2:	0e 10       	rrc	r14		
    ddb4:	0d 10       	rrc	r13		
    ddb6:	1f 53       	inc	r15		
    ddb8:	12 c3       	clrc			
    ddba:	0e 10       	rrc	r14		
    ddbc:	0d 10       	rrc	r13		
    ddbe:	0e 11       	rra	r14		
    ddc0:	0d 10       	rrc	r13		
    ddc2:	0e 11       	rra	r14		
    ddc4:	0d 10       	rrc	r13		
    ddc6:	0e 11       	rra	r14		
    ddc8:	0d 10       	rrc	r13		
    ddca:	0e 11       	rra	r14		
    ddcc:	0d 10       	rrc	r13		
    ddce:	0e 11       	rra	r14		
    ddd0:	0d 10       	rrc	r13		
    ddd2:	0e 11       	rra	r14		
    ddd4:	0d 10       	rrc	r13		
    ddd6:	3d f3       	and	#-1,	r13	;r3 As==11
    ddd8:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    dddc:	05 3c       	jmp	$+12     	;abs 0xdde8
    ddde:	0e 93       	tst	r14		
    dde0:	d0 23       	jnz	$-94     	;abs 0xdd82
    dde2:	4f 43       	clr.b	r15		
    dde4:	0d 43       	clr	r13		
    dde6:	0e 43       	clr	r14		
    dde8:	0b 43       	clr	r11		
    ddea:	0c 43       	clr	r12		
    ddec:	0b 4d       	mov	r13,	r11	
    ddee:	0d 4e       	mov	r14,	r13	
    ddf0:	3d f0 7f 00 	and	#127,	r13	;#0x007f
    ddf4:	0e 4c       	mov	r12,	r14	
    ddf6:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    ddfa:	0e dd       	bis	r13,	r14	
    ddfc:	4f 4f       	mov.b	r15,	r15	
    ddfe:	0f 5f       	rla	r15		
    de00:	0f 5f       	rla	r15		
    de02:	0f 5f       	rla	r15		
    de04:	0f 5f       	rla	r15		
    de06:	0f 5f       	rla	r15		
    de08:	0f 5f       	rla	r15		
    de0a:	0f 5f       	rla	r15		
    de0c:	3e f0 7f 80 	and	#-32641,r14	;#0x807f
    de10:	0e df       	bis	r15,	r14	
    de12:	0f 4a       	mov	r10,	r15	
    de14:	0f 11       	rra	r15		
    de16:	0f 43       	clr	r15		
    de18:	0f 10       	rrc	r15		
    de1a:	3e f0 ff 7f 	and	#32767,	r14	;#0x7fff
    de1e:	0c 4e       	mov	r14,	r12	
    de20:	0c df       	bis	r15,	r12	
    de22:	0e 4b       	mov	r11,	r14	
    de24:	0f 4c       	mov	r12,	r15	
    de26:	36 41       	pop	r6		
    de28:	37 41       	pop	r7		
    de2a:	38 41       	pop	r8		
    de2c:	39 41       	pop	r9		
    de2e:	3a 41       	pop	r10		
    de30:	3b 41       	pop	r11		
    de32:	30 41       	ret			
    de34:	0c 93       	tst	r12		
    de36:	b7 23       	jnz	$-144    	;abs 0xdda6
    de38:	0b 4d       	mov	r13,	r11	
    de3a:	0c 4e       	mov	r14,	r12	
    de3c:	3b f0 80 00 	and	#128,	r11	;#0x0080
    de40:	0c f3       	and	#0,	r12	;r3 As==00
    de42:	0b 93       	tst	r11		
    de44:	4d 24       	jz	$+156    	;abs 0xdee0
    de46:	3d 50 40 00 	add	#64,	r13	;#0x0040
    de4a:	0e 63       	adc	r14		
    de4c:	af 3f       	jmp	$-160    	;abs 0xddac
    de4e:	3c 40 82 ff 	mov	#-126,	r12	;#0xff82
    de52:	0c 8f       	sub	r15,	r12	
    de54:	0f 4c       	mov	r12,	r15	
    de56:	3c 90 1a 00 	cmp	#26,	r12	;#0x001a
    de5a:	51 34       	jge	$+164    	;abs 0xdefe
    de5c:	06 4d       	mov	r13,	r6	
    de5e:	07 4e       	mov	r14,	r7	
    de60:	0c 93       	tst	r12		
    de62:	05 24       	jz	$+12     	;abs 0xde6e
    de64:	12 c3       	clrc			
    de66:	07 10       	rrc	r7		
    de68:	06 10       	rrc	r6		
    de6a:	1c 83       	dec	r12		
    de6c:	fb 23       	jnz	$-8      	;abs 0xde64
    de6e:	18 43       	mov	#1,	r8	;r3 As==01
    de70:	09 43       	clr	r9		
    de72:	0b 48       	mov	r8,	r11	
    de74:	0c 49       	mov	r9,	r12	
    de76:	0f 93       	tst	r15		
    de78:	04 24       	jz	$+10     	;abs 0xde82
    de7a:	0b 5b       	rla	r11		
    de7c:	0c 6c       	rlc	r12		
    de7e:	1f 83       	dec	r15		
    de80:	fc 23       	jnz	$-6      	;abs 0xde7a
    de82:	3b 53       	add	#-1,	r11	;r3 As==11
    de84:	3c 63       	addc	#-1,	r12	;r3 As==11
    de86:	0b fd       	and	r13,	r11	
    de88:	0c fe       	and	r14,	r12	
    de8a:	0b 93       	tst	r11		
    de8c:	48 24       	jz	$+146    	;abs 0xdf1e
    de8e:	0b 46       	mov	r6,	r11	
    de90:	0c 47       	mov	r7,	r12	
    de92:	0b d8       	bis	r8,	r11	
    de94:	0c d9       	bis	r9,	r12	
    de96:	0e 4b       	mov	r11,	r14	
    de98:	0f 4c       	mov	r12,	r15	
    de9a:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    de9e:	0f f3       	and	#0,	r15	;r3 As==00
    dea0:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    dea4:	2f 24       	jz	$+96     	;abs 0xdf04
    dea6:	3b 50 3f 00 	add	#63,	r11	;#0x003f
    deaa:	0c 63       	adc	r12		
    deac:	0d 4b       	mov	r11,	r13	
    deae:	0e 4c       	mov	r12,	r14	
    deb0:	12 c3       	clrc			
    deb2:	0e 10       	rrc	r14		
    deb4:	0d 10       	rrc	r13		
    deb6:	0e 11       	rra	r14		
    deb8:	0d 10       	rrc	r13		
    deba:	0e 11       	rra	r14		
    debc:	0d 10       	rrc	r13		
    debe:	0e 11       	rra	r14		
    dec0:	0d 10       	rrc	r13		
    dec2:	0e 11       	rra	r14		
    dec4:	0d 10       	rrc	r13		
    dec6:	0e 11       	rra	r14		
    dec8:	0d 10       	rrc	r13		
    deca:	0e 11       	rra	r14		
    decc:	0d 10       	rrc	r13		
    dece:	3d f3       	and	#-1,	r13	;r3 As==11
    ded0:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    ded4:	5f 43       	mov.b	#1,	r15	;r3 As==01
    ded6:	3c 90 00 40 	cmp	#16384,	r12	;#0x4000
    deda:	86 2f       	jc	$-242    	;abs 0xdde8
    dedc:	4f 43       	clr.b	r15		
    dede:	84 3f       	jmp	$-246    	;abs 0xdde8
    dee0:	0c 93       	tst	r12		
    dee2:	b1 23       	jnz	$-156    	;abs 0xde46
    dee4:	63 3f       	jmp	$-312    	;abs 0xddac
    dee6:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    dee8:	0d 43       	clr	r13		
    deea:	0e 43       	clr	r14		
    deec:	7d 3f       	jmp	$-260    	;abs 0xdde8
    deee:	0d d3       	bis	#0,	r13	;r3 As==00
    def0:	3e d0 10 00 	bis	#16,	r14	;#0x0010
    def4:	3d f3       	and	#-1,	r13	;r3 As==11
    def6:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    defa:	7f 43       	mov.b	#-1,	r15	;r3 As==11
    defc:	75 3f       	jmp	$-276    	;abs 0xdde8
    defe:	0b 43       	clr	r11		
    df00:	0c 43       	clr	r12		
    df02:	d1 3f       	jmp	$-92     	;abs 0xdea6
    df04:	0f 93       	tst	r15		
    df06:	cf 23       	jnz	$-96     	;abs 0xdea6
    df08:	0e 4b       	mov	r11,	r14	
    df0a:	0f 4c       	mov	r12,	r15	
    df0c:	3e f0 80 00 	and	#128,	r14	;#0x0080
    df10:	0f f3       	and	#0,	r15	;r3 As==00
    df12:	0e 93       	tst	r14		
    df14:	09 24       	jz	$+20     	;abs 0xdf28
    df16:	3b 50 40 00 	add	#64,	r11	;#0x0040
    df1a:	0c 63       	adc	r12		
    df1c:	c7 3f       	jmp	$-112    	;abs 0xdeac
    df1e:	0c 93       	tst	r12		
    df20:	b6 23       	jnz	$-146    	;abs 0xde8e
    df22:	08 43       	clr	r8		
    df24:	09 43       	clr	r9		
    df26:	b3 3f       	jmp	$-152    	;abs 0xde8e
    df28:	0f 93       	tst	r15		
    df2a:	f5 23       	jnz	$-20     	;abs 0xdf16
    df2c:	bf 3f       	jmp	$-128    	;abs 0xdeac

0000df2e <__unpack_f>:
    df2e:	0b 12       	push	r11		
    df30:	0a 12       	push	r10		
    df32:	09 12       	push	r9		
    df34:	0b 4e       	mov	r14,	r11	
    df36:	2d 4f       	mov	@r15,	r13	
    df38:	5e 4f 02 00 	mov.b	2(r15),	r14	;0x0002(r15)
    df3c:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    df40:	1c 4f 02 00 	mov	2(r15),	r12	;0x0002(r15)
    df44:	12 c3       	clrc			
    df46:	0c 10       	rrc	r12		
    df48:	0c 11       	rra	r12		
    df4a:	0c 11       	rra	r12		
    df4c:	0c 11       	rra	r12		
    df4e:	0c 11       	rra	r12		
    df50:	0c 11       	rra	r12		
    df52:	12 c3       	clrc			
    df54:	0c 10       	rrc	r12		
    df56:	4c 4c       	mov.b	r12,	r12	
    df58:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    df5c:	4f 5f       	rla.b	r15		
    df5e:	4f 43       	clr.b	r15		
    df60:	4f 6f       	rlc.b	r15		
    df62:	cb 4f 01 00 	mov.b	r15,	1(r11)	;0x0001(r11)
    df66:	0c 93       	tst	r12		
    df68:	34 20       	jnz	$+106    	;abs 0xdfd2
    df6a:	0d 93       	tst	r13		
    df6c:	57 24       	jz	$+176    	;abs 0xe01c
    df6e:	bb 40 82 ff 	mov	#-126,	2(r11)	;#0xff82, 0x0002(r11)
    df72:	02 00 
    df74:	0d 5d       	rla	r13		
    df76:	0e 6e       	rlc	r14		
    df78:	0d 5d       	rla	r13		
    df7a:	0e 6e       	rlc	r14		
    df7c:	0d 5d       	rla	r13		
    df7e:	0e 6e       	rlc	r14		
    df80:	0d 5d       	rla	r13		
    df82:	0e 6e       	rlc	r14		
    df84:	0d 5d       	rla	r13		
    df86:	0e 6e       	rlc	r14		
    df88:	0d 5d       	rla	r13		
    df8a:	0e 6e       	rlc	r14		
    df8c:	0d 5d       	rla	r13		
    df8e:	0e 6e       	rlc	r14		
    df90:	0a 4d       	mov	r13,	r10	
    df92:	0f 4e       	mov	r14,	r15	
    df94:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    df98:	00 00 
    df9a:	3d 43       	mov	#-1,	r13	;r3 As==11
    df9c:	3e 40 ff 3f 	mov	#16383,	r14	;#0x3fff
    dfa0:	0e 9f       	cmp	r15,	r14	
    dfa2:	0f 28       	jnc	$+32     	;abs 0xdfc2
    dfa4:	3c 40 81 ff 	mov	#-127,	r12	;#0xff81
    dfa8:	09 4e       	mov	r14,	r9	
    dfaa:	0d 4a       	mov	r10,	r13	
    dfac:	0e 4f       	mov	r15,	r14	
    dfae:	0d 5d       	rla	r13		
    dfb0:	0e 6e       	rlc	r14		
    dfb2:	0a 4d       	mov	r13,	r10	
    dfb4:	0f 4e       	mov	r14,	r15	
    dfb6:	0e 4c       	mov	r12,	r14	
    dfb8:	3c 53       	add	#-1,	r12	;r3 As==11
    dfba:	09 9f       	cmp	r15,	r9	
    dfbc:	f6 2f       	jc	$-18     	;abs 0xdfaa
    dfbe:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    dfc2:	8b 4a 04 00 	mov	r10,	4(r11)	;0x0004(r11)
    dfc6:	8b 4f 06 00 	mov	r15,	6(r11)	;0x0006(r11)
    dfca:	39 41       	pop	r9		
    dfcc:	3a 41       	pop	r10		
    dfce:	3b 41       	pop	r11		
    dfd0:	30 41       	ret			
    dfd2:	3c 90 ff 00 	cmp	#255,	r12	;#0x00ff
    dfd6:	2a 24       	jz	$+86     	;abs 0xe02c
    dfd8:	3c 50 81 ff 	add	#-127,	r12	;#0xff81
    dfdc:	8b 4c 02 00 	mov	r12,	2(r11)	;0x0002(r11)
    dfe0:	fb 40 03 00 	mov.b	#3,	0(r11)	;#0x0003, 0x0000(r11)
    dfe4:	00 00 
    dfe6:	0d 5d       	rla	r13		
    dfe8:	0e 6e       	rlc	r14		
    dfea:	0d 5d       	rla	r13		
    dfec:	0e 6e       	rlc	r14		
    dfee:	0d 5d       	rla	r13		
    dff0:	0e 6e       	rlc	r14		
    dff2:	0d 5d       	rla	r13		
    dff4:	0e 6e       	rlc	r14		
    dff6:	0d 5d       	rla	r13		
    dff8:	0e 6e       	rlc	r14		
    dffa:	0d 5d       	rla	r13		
    dffc:	0e 6e       	rlc	r14		
    dffe:	0d 5d       	rla	r13		
    e000:	0e 6e       	rlc	r14		
    e002:	09 4d       	mov	r13,	r9	
    e004:	0a 4e       	mov	r14,	r10	
    e006:	09 d3       	bis	#0,	r9	;r3 As==00
    e008:	3a d0 00 40 	bis	#16384,	r10	;#0x4000
    e00c:	8b 49 04 00 	mov	r9,	4(r11)	;0x0004(r11)
    e010:	8b 4a 06 00 	mov	r10,	6(r11)	;0x0006(r11)
    e014:	39 41       	pop	r9		
    e016:	3a 41       	pop	r10		
    e018:	3b 41       	pop	r11		
    e01a:	30 41       	ret			
    e01c:	0e 93       	tst	r14		
    e01e:	a7 23       	jnz	$-176    	;abs 0xdf6e
    e020:	eb 43 00 00 	mov.b	#2,	0(r11)	;r3 As==10, 0x0000(r11)
    e024:	39 41       	pop	r9		
    e026:	3a 41       	pop	r10		
    e028:	3b 41       	pop	r11		
    e02a:	30 41       	ret			
    e02c:	0d 93       	tst	r13		
    e02e:	0e 24       	jz	$+30     	;abs 0xe04c
    e030:	09 4d       	mov	r13,	r9	
    e032:	0a 4e       	mov	r14,	r10	
    e034:	09 f3       	and	#0,	r9	;r3 As==00
    e036:	3a f0 10 00 	and	#16,	r10	;#0x0010
    e03a:	09 93       	tst	r9		
    e03c:	0c 24       	jz	$+26     	;abs 0xe056
    e03e:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)
    e042:	8b 4d 04 00 	mov	r13,	4(r11)	;0x0004(r11)
    e046:	8b 4e 06 00 	mov	r14,	6(r11)	;0x0006(r11)
    e04a:	e4 3f       	jmp	$-54     	;abs 0xe014
    e04c:	0e 93       	tst	r14		
    e04e:	f0 23       	jnz	$-30     	;abs 0xe030
    e050:	eb 42 00 00 	mov.b	#4,	0(r11)	;r2 As==10, 0x0000(r11)
    e054:	df 3f       	jmp	$-64     	;abs 0xe014
    e056:	0a 93       	tst	r10		
    e058:	f2 23       	jnz	$-26     	;abs 0xe03e
    e05a:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
    e05e:	f1 3f       	jmp	$-28     	;abs 0xe042

0000e060 <__fpcmp_parts_f>:
    e060:	0b 12       	push	r11		
    e062:	6d 4f       	mov.b	@r15,	r13	
    e064:	5b 43       	mov.b	#1,	r11	;r3 As==01
    e066:	4b 9d       	cmp.b	r13,	r11	
    e068:	12 2c       	jc	$+38     	;abs 0xe08e
    e06a:	6c 4e       	mov.b	@r14,	r12	
    e06c:	4b 9c       	cmp.b	r12,	r11	
    e06e:	0f 2c       	jc	$+32     	;abs 0xe08e
    e070:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    e072:	3f 24       	jz	$+128    	;abs 0xe0f2
    e074:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    e076:	11 24       	jz	$+36     	;abs 0xe09a
    e078:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    e07a:	0d 24       	jz	$+28     	;abs 0xe096
    e07c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    e07e:	14 24       	jz	$+42     	;abs 0xe0a8
    e080:	5d 4f 01 00 	mov.b	1(r15),	r13	;0x0001(r15)
    e084:	5d 9e 01 00 	cmp.b	1(r14),	r13	;0x0001(r14)
    e088:	14 24       	jz	$+42     	;abs 0xe0b2
    e08a:	4d 93       	tst.b	r13		
    e08c:	09 20       	jnz	$+20     	;abs 0xe0a0
    e08e:	1e 43       	mov	#1,	r14	;r3 As==01
    e090:	0f 4e       	mov	r14,	r15	
    e092:	3b 41       	pop	r11		
    e094:	30 41       	ret			
    e096:	4c 9d       	cmp.b	r13,	r12	
    e098:	26 24       	jz	$+78     	;abs 0xe0e6
    e09a:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    e09e:	f7 23       	jnz	$-16     	;abs 0xe08e
    e0a0:	3e 43       	mov	#-1,	r14	;r3 As==11
    e0a2:	0f 4e       	mov	r14,	r15	
    e0a4:	3b 41       	pop	r11		
    e0a6:	30 41       	ret			
    e0a8:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    e0ac:	f0 27       	jz	$-30     	;abs 0xe08e
    e0ae:	3e 43       	mov	#-1,	r14	;r3 As==11
    e0b0:	f8 3f       	jmp	$-14     	;abs 0xe0a2
    e0b2:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    e0b6:	1c 4e 02 00 	mov	2(r14),	r12	;0x0002(r14)
    e0ba:	0c 9b       	cmp	r11,	r12	
    e0bc:	e6 3b       	jl	$-50     	;abs 0xe08a
    e0be:	0b 9c       	cmp	r12,	r11	
    e0c0:	14 38       	jl	$+42     	;abs 0xe0ea
    e0c2:	1b 4f 04 00 	mov	4(r15),	r11	;0x0004(r15)
    e0c6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    e0ca:	1c 4e 04 00 	mov	4(r14),	r12	;0x0004(r14)
    e0ce:	1e 4e 06 00 	mov	6(r14),	r14	;0x0006(r14)
    e0d2:	0e 9f       	cmp	r15,	r14	
    e0d4:	da 2b       	jnc	$-74     	;abs 0xe08a
    e0d6:	0f 9e       	cmp	r14,	r15	
    e0d8:	08 28       	jnc	$+18     	;abs 0xe0ea
    e0da:	0c 9b       	cmp	r11,	r12	
    e0dc:	d6 2b       	jnc	$-82     	;abs 0xe08a
    e0de:	0e 9f       	cmp	r15,	r14	
    e0e0:	02 28       	jnc	$+6      	;abs 0xe0e6
    e0e2:	0b 9c       	cmp	r12,	r11	
    e0e4:	02 28       	jnc	$+6      	;abs 0xe0ea
    e0e6:	0e 43       	clr	r14		
    e0e8:	d3 3f       	jmp	$-88     	;abs 0xe090
    e0ea:	4d 93       	tst.b	r13		
    e0ec:	d0 23       	jnz	$-94     	;abs 0xe08e
    e0ee:	3e 43       	mov	#-1,	r14	;r3 As==11
    e0f0:	d8 3f       	jmp	$-78     	;abs 0xe0a2
    e0f2:	4c 9d       	cmp.b	r13,	r12	
    e0f4:	d9 23       	jnz	$-76     	;abs 0xe0a8
    e0f6:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    e0fa:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    e0fe:	0e 8f       	sub	r15,	r14	
    e100:	c7 3f       	jmp	$-112    	;abs 0xe090

0000e102 <__clz_tab>:
    e102:	00 01 02 02 03 03 03 03 04 04 04 04 04 04 04 04     ................
    e112:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05     ................
    e122:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    e132:	06 06 06 06 06 06 06 06 06 06 06 06 06 06 06 06     ................
    e142:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e152:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e162:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e172:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    e182:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e192:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1a2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1b2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1c2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1d2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1e2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    e1f2:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................

0000e202 <__udivmodhi4>:
    e202:	0e ee       	xor	r14,	r14	
    e204:	3b 40 11 00 	mov	#17,	r11	;#0x0011
    e208:	05 3c       	jmp	$+12     	;abs 0xe214
    e20a:	0d 10       	rrc	r13		
    e20c:	0e 6e       	rlc	r14		
    e20e:	0e 9a       	cmp	r10,	r14	
    e210:	01 28       	jnc	$+4      	;abs 0xe214
    e212:	0e 8a       	sub	r10,	r14	
    e214:	0c 6c       	rlc	r12		
    e216:	0d 6d       	rlc	r13		
    e218:	1b 83       	dec	r11		
    e21a:	f7 23       	jnz	$-16     	;abs 0xe20a
    e21c:	30 41       	ret			

0000e21e <__divmodhi4>:
    e21e:	0d 43       	clr	r13		
    e220:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    e224:	03 28       	jnc	$+8      	;abs 0xe22c
    e226:	3c e3       	inv	r12		
    e228:	1c 53       	inc	r12		
    e22a:	2d d2       	bis	#4,	r13	;r2 As==10
    e22c:	3a b0 00 80 	bit	#-32768,r10	;#0x8000
    e230:	03 28       	jnc	$+8      	;abs 0xe238
    e232:	3a e3       	inv	r10		
    e234:	1a 53       	inc	r10		
    e236:	3d d2       	bis	#8,	r13	;r2 As==11
    e238:	b0 12 02 e2 	call	#0xe202	
    e23c:	0d 10       	rrc	r13		
    e23e:	2d b2       	bit	#4,	r13	;r2 As==10
    e240:	04 28       	jnc	$+10     	;abs 0xe24a
    e242:	3e e3       	inv	r14		
    e244:	1e 53       	inc	r14		
    e246:	3c e3       	inv	r12		
    e248:	1c 53       	inc	r12		
    e24a:	3d b2       	bit	#8,	r13	;r2 As==11
    e24c:	02 28       	jnc	$+6      	;abs 0xe252
    e24e:	3c e3       	inv	r12		
    e250:	1c 53       	inc	r12		
    e252:	30 41       	ret			

0000e254 <__divmodsi4>:
    e254:	08 43       	clr	r8		
    e256:	3d b0 00 80 	bit	#-32768,r13	;#0x8000
    e25a:	05 24       	jz	$+12     	;abs 0xe266
    e25c:	3d e3       	inv	r13		
    e25e:	3c e3       	inv	r12		
    e260:	1c 53       	inc	r12		
    e262:	0d 63       	adc	r13		
    e264:	28 d2       	bis	#4,	r8	;r2 As==10
    e266:	3b b0 00 80 	bit	#-32768,r11	;#0x8000
    e26a:	05 24       	jz	$+12     	;abs 0xe276
    e26c:	3b e3       	inv	r11		
    e26e:	3a e3       	inv	r10		
    e270:	1a 53       	inc	r10		
    e272:	0b 63       	adc	r11		
    e274:	38 d2       	bis	#8,	r8	;r2 As==11
    e276:	b0 12 9e e2 	call	#0xe29e	
    e27a:	08 10       	rrc	r8		
    e27c:	28 b2       	bit	#4,	r8	;r2 As==10
    e27e:	08 24       	jz	$+18     	;abs 0xe290
    e280:	3e e3       	inv	r14		
    e282:	3f e3       	inv	r15		
    e284:	1e 53       	inc	r14		
    e286:	0f 63       	adc	r15		
    e288:	3c e3       	inv	r12		
    e28a:	3d e3       	inv	r13		
    e28c:	1c 53       	inc	r12		
    e28e:	0d 63       	adc	r13		
    e290:	38 b2       	bit	#8,	r8	;r2 As==11
    e292:	04 24       	jz	$+10     	;abs 0xe29c
    e294:	3c e3       	inv	r12		
    e296:	3d e3       	inv	r13		
    e298:	1c 53       	inc	r12		
    e29a:	0d 63       	adc	r13		
    e29c:	30 41       	ret			

0000e29e <__udivmodsi4>:
    e29e:	0f ef       	xor	r15,	r15	
    e2a0:	0e ee       	xor	r14,	r14	
    e2a2:	39 40 21 00 	mov	#33,	r9	;#0x0021
    e2a6:	0a 3c       	jmp	$+22     	;abs 0xe2bc
    e2a8:	08 10       	rrc	r8		
    e2aa:	0e 6e       	rlc	r14		
    e2ac:	0f 6f       	rlc	r15		
    e2ae:	0f 9b       	cmp	r11,	r15	
    e2b0:	05 28       	jnc	$+12     	;abs 0xe2bc
    e2b2:	02 20       	jnz	$+6      	;abs 0xe2b8
    e2b4:	0e 9a       	cmp	r10,	r14	
    e2b6:	02 28       	jnc	$+6      	;abs 0xe2bc
    e2b8:	0e 8a       	sub	r10,	r14	
    e2ba:	0f 7b       	subc	r11,	r15	
    e2bc:	0c 6c       	rlc	r12		
    e2be:	0d 6d       	rlc	r13		
    e2c0:	08 68       	rlc	r8		
    e2c2:	19 83       	dec	r9		
    e2c4:	f1 23       	jnz	$-28     	;abs 0xe2a8
    e2c6:	30 41       	ret			

0000e2c8 <_unexpected_>:
    e2c8:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 c6 c4     ................
    fff0:	c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 c6 c4 00 c0     ................
